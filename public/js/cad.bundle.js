/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 18);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var nodeFactory = function nodeFactory() {
  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var node = document.createElement(type);

  appendClasses(node, params);
  appendAttrs(node, params);
  insertTextContent(node, params);

  return node;
};

function appendClasses(node, _ref) {
  var classList = _ref.classList;

  if (classList && classList.forEach) {
    classList.forEach(function (className) {
      return node.classList.add(className);
    });
  }
}

function appendAttrs(node, _ref2) {
  var attrs = _ref2.attrs;

  if (attrs) {
    var attrNames = Object.keys(attrs);
    attrNames.forEach(function (attrName) {
      return node.setAttribute(attrName, attrs[attrName]);
    });
  }
}

function insertTextContent(node, _ref3) {
  var _ref3$textContent = _ref3.textContent,
      textContent = _ref3$textContent === undefined ? "" : _ref3$textContent;

  node.textContent = textContent;
}

exports.default = nodeFactory;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var pubsub = function () {

  var topics = {};

  return {
    subscribe: function subscribe(topic, listener) {
      if (!topics[topic]) topics[topic] = { queue: [] };

      var index = topics[topic].queue.push(listener) - 1;
      // function to delete topic
      return {
        remove: function remove() {
          delete topics[topic].queue[index];
        }
      };
    },

    publish: function publish(topic, info) {
      // no theme or no listeners
      if (!topics[topic] || !topics[topic].queue.length) return;

      var items = topics[topic].queue;
      items.forEach(function (item) {
        item(info || {});
      });
    }
  };
}();

exports.default = pubsub;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
function toggleListDisplay(flag, $list, $icon) {
  if (flag) {
    showList($list, $icon);
  } else {
    hideList($list, $icon);
  }
  return !flag;
}

function showList($list, $icon) {
  if ($icon) $icon.classList.add('turn-down');
  $list.style.display = 'block';
}

function hideList($list, $icon) {
  if ($icon) $icon.classList.remove('turn-down');
  $list.style.display = 'none';
}

function appendListElement(element, $list) {
  var $li = void 0;
  if (typeof element === 'function') {
    $li = element();
  } else {
    $li = element;
  }
  $list.appendChild($li);
}

function appendChildren(parent, children) {
  if (children.forEach) {
    children.forEach(function (child) {
      return parent.appendChild(child);
    });
  }
  return parent;
}

exports.default = {
  toggleListDisplay: toggleListDisplay,
  appendListElement: appendListElement,
  appendChildren: appendChildren
};

/***/ }),
/* 4 */,
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _scheme = __webpack_require__(25);

var _scheme2 = _interopRequireDefault(_scheme);

var _panel = __webpack_require__(3);

var _panel2 = _interopRequireDefault(_panel);

var _statePanel = __webpack_require__(21);

var _statePanel2 = _interopRequireDefault(_statePanel);

var _jsplumb = __webpack_require__(35);

var _pubsub = __webpack_require__(2);

var _pubsub2 = _interopRequireDefault(_pubsub);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var appendListElement = _panel2.default.appendListElement,
    toggleListDisplay = _panel2.default.toggleListDisplay;


var scene = {};
var scheme = new _scheme2.default();

/**
 * Tabs control
 */
var $statePanel = document.querySelector('#new-state-panel');
var $propsPanel = document.querySelector('#model-props-panel');
var $cadWrapper = document.querySelector('#cad-wrapper');
var $cadPane = document.querySelector('#cad-pane');

var openedTabs = 0;

var setFlexRatio = function setFlexRatio(el, ratio) {
  el.style.flex = ratio;
};

function showTab($tab) {
  if ($tab.classList.contains('is-hidden')) {
    openedTabs++;
    $tab.classList.remove('is-hidden');
    setFlexRatio($cadWrapper, 4 - openedTabs);
  }
}

function hideTab($tab) {
  openedTabs--;
  $tab.classList.add('is-hidden');
  setFlexRatio($cadWrapper, 4 - openedTabs);
}

scene.showPropsPanel = function () {
  showTab($propsPanel);
  return scene;
};
scene.hidePropsPanel = function () {
  hideTab($propsPanel);
  return scene;
};

scene.showStatePanel = function () {
  showTab($statePanel);
  return scene;
};
scene.hideStatePanel = function () {
  hideTab($statePanel);
  return scene;
};

/**
 * Model panel listeners
 */
var $modelNameInput = document.querySelector('#model-name-input');
handleModelParamChange($modelNameInput, 'setModelName');

var $breakTimeInput = document.querySelector('#break-time-input');
handleModelParamChange($breakTimeInput, 'setBreakTime');

var $stepsInput = document.querySelector('#steps-input');
handleModelParamChange($stepsInput, 'setSteps');

function handleModelParamChange($node, handler) {
  $node.addEventListener('change', function (e) {
    return scheme[handler](e.target.value);
  });
}

var $toolsOpenBtn = document.querySelector('#panel-tools-open');
var $toolsOpenIcon = $toolsOpenBtn.querySelector('.icon-forward');
var $addToolBtn = document.querySelector('#add-tool-btn');
var $toolsList = document.querySelector('#panel-tools-list');

var toolsListClosed = true;
$toolsOpenBtn.addEventListener('click', function () {
  toolsListClosed = toggleListDisplay(toolsListClosed, $toolsList, $toolsOpenIcon);
});
$addToolBtn.addEventListener('click', function () {
  var tool = scheme.addTool();
  toolsListClosed = appendListElement(tool.$node, $toolsList, toolsListClosed, $toolsOpenIcon);
});

var subscriptions = {
  toolTypeChange: 'setToolType',
  toolNameChange: 'setToolName',
  toolValueChange: 'setToolValue',
  stateNameChange: 'setStateName',
  stateImgChange: 'setStateImg',
  eventNameChange: 'setEventName',
  eventDescChange: 'setEventDesc',
  paramNameChange: 'setParamName',
  paramValueChange: 'setParamValue'
};

Object.keys(subscriptions).forEach(function (key) {
  setHandlerForTopic(key, subscriptions[key]);
});

function setHandlerForTopic(topic, handler) {
  _pubsub2.default.subscribe(topic, function (data) {
    return scheme[handler](data);
  });
}

_pubsub2.default.subscribe('stateNameChange', function (data) {
  var $stateNode = document.querySelector('#' + data.id);
  var $stateName = $stateNode.querySelector('.cad-state-name');
  $stateName.textContent = data.value;
});

_pubsub2.default.subscribe('paramCreated', function (data) {
  var newParam = scheme.addParameter(data);
  _statePanel2.default.appendParam(newParam.$paramWrapper);
});

_pubsub2.default.subscribe('actionCreated', function (data) {
  var newAction = scheme.addAction(data);
  _statePanel2.default.appendAction(newAction.$actionWrapper);
});

_pubsub2.default.subscribe('nextStateChange', function (data) {
  // create jsPlumb link
  var source = data.source,
      target = data.target,
      actionId = data.actionId;

  _jsplumb.jsPlumb.connect({ source: source, target: target });
  scheme.setAction(source, target, actionId);
});

/**
 * State-objects management
 */
scene.addState = function () {
  var state = scheme.addState();
  $cadPane.appendChild(state.$node);

  _jsplumb.jsPlumb.draggable(state.$node.id, {
    containment: true
  });

  state.$node.addEventListener('contextmenu', function (e) {
    e.preventDefault();
    _statePanel2.default.fillContent(state);
    scene.showStatePanel();
  });
};

exports.default = scene;

/***/ }),
/* 6 */,
/* 7 */,
/* 8 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(8);

var _scene = __webpack_require__(5);

var _scene2 = _interopRequireDefault(_scene);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var $newStateButton = document.querySelector('#new-state-btn');
var $modelPropsButton = document.querySelector('#model-props-btn');

$newStateButton.addEventListener('click', function () {
  return _scene2.default.addState();
});
$modelPropsButton.addEventListener('click', function () {
  return _scene2.default.showPropsPanel();
});

var $stateCloseButton = document.querySelector('#new-state-panel .icon-close');
var $propsCloseButton = document.querySelector('#model-props-panel .icon-close');

$stateCloseButton.addEventListener('click', function () {
  return _scene2.default.hideStatePanel();
});
$propsCloseButton.addEventListener('click', function () {
  return _scene2.default.hidePropsPanel();
});

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _nodeFactory = __webpack_require__(1);

var _nodeFactory2 = _interopRequireDefault(_nodeFactory);

var _pubsub = __webpack_require__(2);

var _pubsub2 = _interopRequireDefault(_pubsub);

var _panel = __webpack_require__(3);

var _panel2 = _interopRequireDefault(_panel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var appendChildren = _panel2.default.appendChildren;


function createAction() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var id = 'action-' + (data.id || Date.now());
  var nextState = null;
  var tools = [];

  var $actionWrapper = (0, _nodeFactory2.default)('div', { classList: ['panel-action'] });

  var $nextStateLabel = (0, _nodeFactory2.default)('label', { textContent: 'Следующее состояние' });
  var $nextStateSelect = (0, _nodeFactory2.default)('select', { classList: ['next-state-select'] });
  Object.keys(data.states).forEach(function (stateId) {
    var name = data.states[stateId].name;

    var $option = (0, _nodeFactory2.default)('option', { attrs: { value: stateId }, textContent: name });
    $nextStateSelect.appendChild($option);
  });
  $nextStateSelect.addEventListener('change', function (e) {
    return createConnection(data.stateId, $nextStateSelect, id);
  });

  var $toolsHeader = (0, _nodeFactory2.default)('div', { classList: ['panel-action-tools-header'] });
  var $toolsHeaderLabel = (0, _nodeFactory2.default)('label', { textContent: 'Значения приборов' });
  var $toolsHeaderIcon = (0, _nodeFactory2.default)('i', { classList: ['icon', 'icon-add'] });
  $toolsHeaderIcon.addEventListener('click', function (e) {
    addActionTool(data.tools, $actionWrapper);
  });

  appendChildren($toolsHeader, [$toolsHeaderLabel, $toolsHeaderIcon]);

  appendChildren($actionWrapper, [$nextStateLabel, $nextStateSelect, $toolsHeader]);

  return { id: id, $actionWrapper: $actionWrapper };
}

function createConnection(id, $sel, actionId) {
  var nextId = $sel.value;
  if (id === nextId) {
    console.warn('Trying to connect with itself');
    return;
  }
  _pubsub2.default.publish('nextStateChange', { source: id, target: nextId, actionId: actionId });
}

function addActionTool(tools, $parent) {
  _pubsub2.default.publish('newAction', { foo: 'bar' }); // todo
  var $wrapper = (0, _nodeFactory2.default)('div', { classList: ['panel-action-tool'] });
  var $select = (0, _nodeFactory2.default)('select');
  fillToolsSelect($select, tools);
  $select.addEventListener('change', function (e) {
    _pubsub2.default.publish('actionSelectChange', { foo: 'bar' }); // todo
  });
  $wrapper.appendChild($select);
  addActionToolProps($select, $wrapper);
  $parent.appendChild($wrapper);
}

function fillToolsSelect($sel, tools) {
  Object.keys(tools).forEach(function (toolId) {
    var _tools$toolId = tools[toolId],
        name = _tools$toolId.name,
        type = _tools$toolId.type;

    var $opt = (0, _nodeFactory2.default)('option', { attrs: { value: toolId, 'data-type': type }, textContent: name });
    $sel.appendChild($opt);
  });
}

function addActionToolProps($sel, $wrapper) {
  var sOption = $sel.options[$sel.selectedIndex];
  var $div = (0, _nodeFactory2.default)('div', { classList: ['panel-action-tool-value'] });
  switch (sOption.dataset.type) {
    case 'switch':
      createSwitchProps($div);
      break;
    case 'range':
      createRangeProps($div);
      break;
    default:
      console.warn('Invalid current tool option in action creator');
      break;
  }
  $wrapper.appendChild($div);
}

function createSwitchProps($parent) {
  // todo make ID's unique
  var $label = (0, _nodeFactory2.default)('label', { attrs: { for: 'action-tool-checkbox' }, textContent: 'Включен?' });
  var $input = (0, _nodeFactory2.default)('input', { attrs: { type: 'checkbox', id: 'action-tool-checkbox' } });

  appendChildren($parent, [$label, $input]);
}

function createRangeProps($parent) {
  var $inputMin = (0, _nodeFactory2.default)('input', { attrs: {
      type: 'text',
      placeholder: 'Минимум'
    } });

  var $inputMax = (0, _nodeFactory2.default)('input', { attrs: {
      type: 'text',
      placeholder: 'Максимум'
    } });
  appendChildren($parent, [$inputMin, $inputMax]);
}

exports.default = createAction;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _nodeFactory = __webpack_require__(1);

var _nodeFactory2 = _interopRequireDefault(_nodeFactory);

var _pubsub = __webpack_require__(2);

var _pubsub2 = _interopRequireDefault(_pubsub);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createParamNode() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var id = 'param-' + data.id;
  var name = '';
  var value = '';
  var $paramWrapper = (0, _nodeFactory2.default)('div', { classList: ['panel-param'] });
  var stateId = data.stateId;


  var $nameInput = (0, _nodeFactory2.default)('input', {
    attrs: {
      type: 'text',
      placeholder: 'Name'
    }
  });
  $nameInput.addEventListener('change', function (e) {
    var newName = e.target.value;
    _pubsub2.default.publish('paramNameChange', { id: id, value: newName, stateId: stateId });
  });

  var $valueInput = (0, _nodeFactory2.default)('input', {
    attrs: {
      type: 'text',
      placeholder: 'Value'
    }
  });
  $valueInput.addEventListener('change', function (e) {
    var newValue = e.target.value;
    _pubsub2.default.publish('paramValueChange', { id: id, value: newValue, stateId: stateId });
  });

  $paramWrapper.appendChild($nameInput);
  $paramWrapper.appendChild($valueInput);
  return {
    id: id,
    name: name,
    value: value,
    $paramWrapper: $paramWrapper
  };
}

exports.default = createParamNode;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _pubsub = __webpack_require__(2);

var _pubsub2 = _interopRequireDefault(_pubsub);

var _panel = __webpack_require__(3);

var _panel2 = _interopRequireDefault(_panel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var toggleListDisplay = _panel2.default.toggleListDisplay;

var statePanel = {};

/**
 * Panel data handlers
 */
var $currentStateId = document.querySelector('#current-state-id');
var $stateNameInput = document.querySelector('#state-name-input');
var $imgSelect = document.querySelector('#image-select');
var $eventNameInput = document.querySelector('#event-name-input');
var $eventDescInput = document.querySelector('#event-description-input');
var $paramsList = document.querySelector('#panel-params-list');
var $actionsList = document.querySelector('#panel-actions-list');

statePanel.fillContent = function (state) {
  $currentStateId.value = state.id;
  $stateNameInput.value = state.name;
  $imgSelect.value = state.img;
  $eventNameInput.value = state.eventName;
  $eventDescInput.value = state.eventDesc;

  $paramsList.innerHTML = '';
  Object.keys(state.params).forEach(function (paramId) {
    $paramsList.appendChild(state.params[paramId].$paramWrapper);
  });

  $actionsList.innerHTML = '';
  Object.keys(state.actions).forEach(function (actionId) {
    $actionsList.appendChild(state.actions[actionId].$actionWrapper);
  });
};

publishOnChange($stateNameInput, 'stateNameChange');
publishOnChange($imgSelect, 'stateImgChange');
publishOnChange($eventNameInput, 'eventNameChange');
publishOnChange($eventDescInput, 'eventDescChange');

function publishOnChange($node, topic) {
  $node.addEventListener('change', function (event) {
    var id = $currentStateId.value;
    var value = event.target.value;
    _pubsub2.default.publish(topic, { id: id, value: value });
  });
}

/**
 * State params
 */
var $paramsOpenBtn = document.querySelector('#panel-params-open');
var $paramsOpenIcon = $paramsOpenBtn.querySelector('.icon-forward');
var $addParamBtn = document.querySelector('#add-param-btn');

var paramsListClosed = true;

$paramsOpenBtn.addEventListener('click', function () {
  paramsListClosed = toggleListDisplay(paramsListClosed, $paramsList, $paramsOpenIcon);
});

$addParamBtn.addEventListener('click', function () {
  var id = $currentStateId.value;
  _pubsub2.default.publish('paramCreated', { id: id });
  if (paramsListClosed) {
    paramsListClosed = toggleListDisplay(paramsListClosed, $paramsList, $paramsOpenIcon);
  }
});

statePanel.appendParam = function ($node) {
  $paramsList.appendChild($node);
};

/**
 * Actions
 */
var $actionsOpenBtn = document.querySelector('#panel-actions-open');
var $actionsOpenIcon = $actionsOpenBtn.querySelector('.icon-forward');
var $addActionBtn = document.querySelector('#add-action-btn');

var actionsListClosed = true;

$actionsOpenBtn.addEventListener('click', function () {
  actionsListClosed = toggleListDisplay(actionsListClosed, $actionsList, $actionsOpenIcon);
});

$addActionBtn.addEventListener('click', function () {
  var id = $currentStateId.value;
  _pubsub2.default.publish('actionCreated', { id: id });
  if (actionsListClosed) {
    actionsListClosed = toggleListDisplay(actionsListClosed, $actionsList, $actionsOpenIcon);
  }
});

statePanel.appendAction = function ($node) {
  $actionsList.appendChild($node);
};

exports.default = statePanel;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _nodeFactory = __webpack_require__(1);

var _nodeFactory2 = _interopRequireDefault(_nodeFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createStateNode() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var id = 'state-' + (data.id || Date.now());
  var name = data.name || 'Состояние';
  var img = '1';
  var eventName = '';
  var eventDesc = '';
  var params = {};
  var actions = [];

  var $node = (0, _nodeFactory2.default)('div', { classList: ['cad-state'], attrs: { id: id } });
  var $stateName = (0, _nodeFactory2.default)('h5', { classList: ['cad-state-name'], textContent: name });
  $node.appendChild($stateName);

  return {
    id: id,
    name: name,
    img: img,
    eventName: eventName,
    eventDesc: eventDesc,
    params: params,
    actions: actions,
    $node: $node
  };
}

exports.default = createStateNode;

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _nodeFactory = __webpack_require__(1);

var _nodeFactory2 = _interopRequireDefault(_nodeFactory);

var _pubsub = __webpack_require__(2);

var _pubsub2 = _interopRequireDefault(_pubsub);

var _panel = __webpack_require__(3);

var _panel2 = _interopRequireDefault(_panel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var appendChildren = _panel2.default.appendChildren;


var TOOL_TYPES = ['Switch', 'Range'];

function createToolNode() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var id = 'tool-' + (data.id || Date.now());
  var name = '';
  var minValue = '';
  var maxValue = '';
  var type = TOOL_TYPES[0].toLowerCase();

  var $toolWrapper = (0, _nodeFactory2.default)('div', { classList: ['panel-tool'], attrs: { id: id } });
  var $nameLabel = (0, _nodeFactory2.default)('label', {
    classList: ['panel-tool-name'],
    textContent: 'Название прибора'
  });
  var $nameInput = (0, _nodeFactory2.default)('input', { attrs: { type: 'text' } });
  $nameInput.addEventListener('change', function (e) {
    var value = e.target.value;
    _pubsub2.default.publish('toolNameChange', { id: id, value: value });
  });

  var $toolTypeWrapper = (0, _nodeFactory2.default)('div', { classList: ['panel-tool-type'] });
  var $toolTypeLabel = (0, _nodeFactory2.default)('label', { textContent: 'Тип прибора' });
  var $toolTypeSelect = (0, _nodeFactory2.default)('select');
  TOOL_TYPES.forEach(function (toolType) {
    return $toolTypeSelect.appendChild(createOption(toolType));
  });
  var $rangeValues = createRangeValues(id);

  $toolTypeSelect.addEventListener('change', function (e) {
    var value = e.target.value.toLowerCase();

    _pubsub2.default.publish('toolTypeChange', { id: id, value: value });

    if (value === 'range') {
      $rangeValues.style.display = 'flex';
    } else {
      $rangeValues.style.display = 'none';
    }
  });

  appendChildren($toolTypeWrapper, [$toolTypeLabel, $toolTypeSelect]);
  var $node = appendChildren($toolWrapper, [$nameLabel, $nameInput, $toolTypeWrapper, $rangeValues]);

  return { id: id, name: name, type: type, minValue: minValue, maxValue: maxValue, $node: $node };
}

function createOption(value, name) {
  return (0, _nodeFactory2.default)('option', {
    textContent: value,
    attrs: { name: name || value.toLowerCase() }
  });
}

function createRangeValues(id) {
  var $wrapper = (0, _nodeFactory2.default)('div', { classList: ['panel-tool-range-values'] });
  return appendChildren($wrapper, [{ text: 'Минимум', limit: 'min' }, { text: 'Максимум', limit: 'max' }].map(function (data) {
    return createRangeValue(data, id);
  }));
}

function createRangeValue(data) {
  var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

  var $div = (0, _nodeFactory2.default)('div', { attrs: { 'data-limit': data.limit } });
  var $label = (0, _nodeFactory2.default)('label', { textContent: data.text });
  var $input = (0, _nodeFactory2.default)('input', { attrs: { type: 'text' } });
  $input.addEventListener('change', function (e) {
    var value = e.target.value;
    var limit = data.limit || 'min';
    _pubsub2.default.publish('toolValueChange', { id: id, value: value, limit: limit });
  });
  return appendChildren($div, [$label, $input]);
}

exports.default = createToolNode;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
function generateId() {
  var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

  var id = initialValue;

  return function generate() {
    return id++;
  };
}

exports.default = generateId;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _stateStore = __webpack_require__(22);

var _stateStore2 = _interopRequireDefault(_stateStore);

var _toolStore = __webpack_require__(23);

var _toolStore2 = _interopRequireDefault(_toolStore);

var _paramStore = __webpack_require__(20);

var _paramStore2 = _interopRequireDefault(_paramStore);

var _actionStore = __webpack_require__(19);

var _actionStore2 = _interopRequireDefault(_actionStore);

var _idGen = __webpack_require__(24);

var _idGen2 = _interopRequireDefault(_idGen);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var stateIdGen = (0, _idGen2.default)();
var toolIdGen = (0, _idGen2.default)();
var paramIdGen = (0, _idGen2.default)();
var actionIdGen = (0, _idGen2.default)();

var Scheme = function () {
  function Scheme() {
    _classCallCheck(this, Scheme);

    this.modelName = 'Без названия';
    this.breakTime = 0;
    this.steps = 0;

    this.states = {};

    this.tools = {};
  }

  /**
   * Model info
   */


  _createClass(Scheme, [{
    key: 'setModelName',
    value: function setModelName(name) {
      this.modelName = name;
      console.log(this);
    }
  }, {
    key: 'setBreakTime',
    value: function setBreakTime(breakTime) {
      this.breakTime = breakTime;
    }
  }, {
    key: 'setSteps',
    value: function setSteps(steps) {
      this.steps = steps;
    }

    /**
     * Add components to scheme
     */

  }, {
    key: 'addTool',
    value: function addTool() {
      return this.addComponent(toolIdGen, _toolStore2.default, 'tools');
    }
  }, {
    key: 'addState',
    value: function addState() {
      return this.addComponent(stateIdGen, _stateStore2.default, 'states');
    }
  }, {
    key: 'addParameter',
    value: function addParameter(data) {
      var id = paramIdGen();
      var newComponent = (0, _paramStore2.default)({ id: id, stateId: data.id });
      this.states[data.id].params[newComponent.id] = newComponent;
      return newComponent;
    }
  }, {
    key: 'addAction',
    value: function addAction(data) {
      var id = actionIdGen();
      var newAction = (0, _actionStore2.default)({ id: id, stateId: data.id, states: this.states, tools: this.tools });
      this.states[data.id].actions[newAction.id] = newAction;
      return newAction;
    }

    /**
     * Create new scheme component with underlying DOM node
     * @param {function} gen - Function for generating id
     * @param {function} store - Function for creating new object
     * @param {object} list - Object containing scheme components
     */

  }, {
    key: 'addComponent',
    value: function addComponent(gen, store, list) {
      var id = gen();
      var newComponent = store({ id: id });
      this[list][newComponent.id] = newComponent;
      return newComponent;
    }

    /**
     * Set new type for tool with given id
     * @param { id: String, value: String } data
     */

  }, {
    key: 'setToolType',
    value: function setToolType(data) {
      this.tools[data.id].type = data.value;
    }
  }, {
    key: 'setToolName',
    value: function setToolName(data) {
      this.tools[data.id].name = data.value;
    }
  }, {
    key: 'setToolValue',
    value: function setToolValue(data) {
      var prop = data.limit + 'Value';
      this.tools[data.id][prop] = data.value;
    }

    /**
     * Handle state data change
     */

  }, {
    key: 'setStateName',
    value: function setStateName(data) {
      this.states[data.id].name = data.value;
    }
  }, {
    key: 'setStateImg',
    value: function setStateImg(data) {
      this.states[data.id].img = data.value;
    }
  }, {
    key: 'setEventName',
    value: function setEventName(data) {
      this.states[data.id].eventName = data.value;
    }
  }, {
    key: 'setEventDesc',
    value: function setEventDesc(data) {
      this.states[data.id].eventDesc = data.value;
    }

    /**
     * Handle state parameters change
     */

  }, {
    key: 'setParamName',
    value: function setParamName(_ref) {
      var id = _ref.id,
          value = _ref.value,
          stateId = _ref.stateId;

      this.states[stateId].params[id].name = value;
    }
  }, {
    key: 'setParamValue',
    value: function setParamValue(_ref2) {
      var id = _ref2.id,
          value = _ref2.value,
          stateId = _ref2.stateId;

      this.states[stateId].params[id].value = value;
    }

    /**
     * Handle actions
     */

  }, {
    key: 'setAction',
    value: function setAction(source, target, actionId) {
      this.states[source].actions[actionId].nextState = target;
      return; // todo
    }
  }]);

  return Scheme;
}();

exports.default = Scheme;

/***/ }),
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function () {
  "undefined" == typeof Math.sgn && (Math.sgn = function (a) {
    return 0 == a ? 0 : a > 0 ? 1 : -1;
  });var a = { subtract: function subtract(a, b) {
      return { x: a.x - b.x, y: a.y - b.y };
    }, dotProduct: function dotProduct(a, b) {
      return a.x * b.x + a.y * b.y;
    }, square: function square(a) {
      return Math.sqrt(a.x * a.x + a.y * a.y);
    }, scale: function scale(a, b) {
      return { x: a.x * b, y: a.y * b };
    } },
      b = 64,
      c = Math.pow(2, -b - 1),
      d = function d(b, c) {
    for (var d = [], e = f(b, c), h = c.length - 1, i = 2 * h - 1, j = g(e, i, d, 0), k = a.subtract(b, c[0]), m = a.square(k), n = 0, o = 0; j > o; o++) {
      k = a.subtract(b, l(c, h, d[o], null, null));var p = a.square(k);m > p && (m = p, n = d[o]);
    }return k = a.subtract(b, c[h]), p = a.square(k), m > p && (m = p, n = 1), { location: n, distance: m };
  },
      e = function e(a, b) {
    var c = d(a, b);return { point: l(b, b.length - 1, c.location, null, null), location: c.location };
  },
      f = function f(b, c) {
    for (var d = c.length - 1, e = 2 * d - 1, f = [], g = [], h = [], i = [], k = [[1, .6, .3, .1], [.4, .6, .6, .4], [.1, .3, .6, 1]], l = 0; d >= l; l++) {
      f[l] = a.subtract(c[l], b);
    }for (var l = 0; d - 1 >= l; l++) {
      g[l] = a.subtract(c[l + 1], c[l]), g[l] = a.scale(g[l], 3);
    }for (var m = 0; d - 1 >= m; m++) {
      for (var n = 0; d >= n; n++) {
        h[m] || (h[m] = []), h[m][n] = a.dotProduct(g[m], f[n]);
      }
    }for (l = 0; e >= l; l++) {
      i[l] || (i[l] = []), i[l].y = 0, i[l].x = parseFloat(l) / e;
    }for (var o = d, p = d - 1, q = 0; o + p >= q; q++) {
      var r = Math.max(0, q - p),
          s = Math.min(q, o);for (l = r; s >= l; l++) {
        j = q - l, i[l + j].y += h[j][l] * k[j][l];
      }
    }return i;
  },
      g = function g(a, c, d, e) {
    var f,
        j,
        m = [],
        n = [],
        o = [],
        p = [];switch (h(a, c)) {case 0:
        return 0;case 1:
        if (e >= b) return d[0] = (a[0].x + a[c].x) / 2, 1;if (i(a, c)) return d[0] = k(a, c), 1;}l(a, c, .5, m, n), f = g(m, c, o, e + 1), j = g(n, c, p, e + 1);for (var q = 0; f > q; q++) {
      d[q] = o[q];
    }for (var q = 0; j > q; q++) {
      d[q + f] = p[q];
    }return f + j;
  },
      h = function h(a, b) {
    var c,
        d,
        e = 0;c = d = Math.sgn(a[0].y);for (var f = 1; b >= f; f++) {
      c = Math.sgn(a[f].y), c != d && e++, d = c;
    }return e;
  },
      i = function i(a, b) {
    var d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s;i = a[0].y - a[b].y, j = a[b].x - a[0].x, k = a[0].x * a[b].y - a[b].x * a[0].y;for (var t = max_distance_below = 0, u = 1; b > u; u++) {
      var v = i * a[u].x + j * a[u].y + k;v > t ? t = v : max_distance_below > v && (max_distance_below = v);
    }return n = 0, o = 1, p = 0, q = i, r = j, s = k - t, l = n * r - q * o, m = 1 / l, e = (o * s - r * p) * m, q = i, r = j, s = k - max_distance_below, l = n * r - q * o, m = 1 / l, f = (o * s - r * p) * m, g = Math.min(e, f), h = Math.max(e, f), d = h - g, c > d ? 1 : 0;
  },
      k = function k(a, b) {
    var c = 1,
        d = 0,
        e = a[b].x - a[0].x,
        f = a[b].y - a[0].y,
        g = a[0].x - 0,
        h = a[0].y - 0,
        i = e * d - f * c,
        j = 1 / i,
        k = (e * h - f * g) * j;return 0 + c * k;
  },
      l = function l(a, b, c, d, e) {
    for (var f = [[]], g = 0; b >= g; g++) {
      f[0][g] = a[g];
    }for (var h = 1; b >= h; h++) {
      for (var g = 0; b - h >= g; g++) {
        f[h] || (f[h] = []), f[h][g] || (f[h][g] = {}), f[h][g].x = (1 - c) * f[h - 1][g].x + c * f[h - 1][g + 1].x, f[h][g].y = (1 - c) * f[h - 1][g].y + c * f[h - 1][g + 1].y;
      }
    }if (null != d) for (g = 0; b >= g; g++) {
      d[g] = f[g][0];
    }if (null != e) for (g = 0; b >= g; g++) {
      e[g] = f[b - g][g];
    }return f[b][0];
  },
      m = {},
      n = function n(a) {
    var b = m[a];if (!b) {
      b = [];var c = function c() {
        return function (b) {
          return Math.pow(b, a);
        };
      },
          d = function d() {
        return function (b) {
          return Math.pow(1 - b, a);
        };
      },
          e = function e(a) {
        return function () {
          return a;
        };
      },
          f = function f() {
        return function (a) {
          return a;
        };
      },
          g = function g() {
        return function (a) {
          return 1 - a;
        };
      },
          h = function h(a) {
        return function (b) {
          for (var c = 1, d = 0; d < a.length; d++) {
            c *= a[d](b);
          }return c;
        };
      };b.push(new c());for (var i = 1; a > i; i++) {
        for (var j = [new e(a)], k = 0; a - i > k; k++) {
          j.push(new f());
        }for (var k = 0; i > k; k++) {
          j.push(new g());
        }b.push(new h(j));
      }b.push(new d()), m[a] = b;
    }return b;
  },
      o = function o(a, b) {
    for (var c = n(a.length - 1), d = 0, e = 0, f = 0; f < a.length; f++) {
      d += a[f].x * c[f](b), e += a[f].y * c[f](b);
    }return { x: d, y: e };
  },
      p = function p(a, b) {
    return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
  },
      q = function q(a) {
    return a[0].x == a[1].x && a[0].y == a[1].y;
  },
      r = function r(a, b, c) {
    if (q(a)) return { point: a[0], location: b };for (var d = o(a, b), e = 0, f = b, g = c > 0 ? 1 : -1, h = null; e < Math.abs(c);) {
      f += .005 * g, h = o(a, f), e += p(h, d), d = h;
    }return { point: h, location: f };
  },
      s = function s(a) {
    if (q(a)) return 0;for (var b = o(a, 0), c = 0, d = 0, e = 1, f = null; 1 > d;) {
      d += .005 * e, f = o(a, d), c += p(f, b), b = f;
    }return c;
  },
      t = function t(a, b, c) {
    return r(a, b, c).point;
  },
      u = function u(a, b, c) {
    return r(a, b, c).location;
  },
      v = function v(a, b) {
    var c = o(a, b),
        d = o(a.slice(0, a.length - 1), b),
        e = d.y - c.y,
        f = d.x - c.x;return 0 == e ? 1 / 0 : Math.atan(e / f);
  },
      w = function w(a, b, c) {
    var d = r(a, b, c);return d.location > 1 && (d.location = 1), d.location < 0 && (d.location = 0), v(a, d.location);
  },
      x = function x(a, b, c, d) {
    d = null == d ? 0 : d;var e = r(a, b, d),
        f = v(a, e.location),
        g = Math.atan(-1 / f),
        h = c / 2 * Math.sin(g),
        i = c / 2 * Math.cos(g);return [{ x: e.point.x + i, y: e.point.y + h }, { x: e.point.x - i, y: e.point.y - h }];
  },
      y = this.jsBezier = { distanceFromCurve: d, gradientAtPoint: v, gradientAtPointAlongCurveFrom: w, nearestPointOnCurve: e, pointOnCurve: o, pointAlongCurveFrom: t, perpendicularToCurveAt: x, locationAlongCurveFrom: u, getLength: s, version: "0.9.0" };"undefined" != typeof exports && (exports.jsBezier = y);
}).call("undefined" != typeof window ? window : undefined), function () {
  "use strict";
  var a = this,
      b = a.Biltong = { version: "0.4.0" };"undefined" != typeof exports && (exports.Biltong = b);var c = function c(a) {
    return "[object Array]" === Object.prototype.toString.call(a);
  },
      d = function d(a, b, _d) {
    return a = c(a) ? a : [a.x, a.y], b = c(b) ? b : [b.x, b.y], _d(a, b);
  },
      e = b.gradient = function (a, b) {
    return d(a, b, function (a, b) {
      return b[0] == a[0] ? b[1] > a[1] ? 1 / 0 : -1 / 0 : b[1] == a[1] ? b[0] > a[0] ? 0 : -0 : (b[1] - a[1]) / (b[0] - a[0]);
    });
  },
      f = (b.normal = function (a, b) {
    return -1 / e(a, b);
  }, b.lineLength = function (a, b) {
    return d(a, b, function (a, b) {
      return Math.sqrt(Math.pow(b[1] - a[1], 2) + Math.pow(b[0] - a[0], 2));
    });
  }, b.quadrant = function (a, b) {
    return d(a, b, function (a, b) {
      return b[0] > a[0] ? b[1] > a[1] ? 2 : 1 : b[0] == a[0] ? b[1] > a[1] ? 2 : 1 : b[1] > a[1] ? 3 : 4;
    });
  }),
      g = (b.theta = function (a, b) {
    return d(a, b, function (a, b) {
      var c = e(a, b),
          d = Math.atan(c),
          g = f(a, b);return (4 == g || 3 == g) && (d += Math.PI), 0 > d && (d += 2 * Math.PI), d;
    });
  }, b.intersects = function (a, b) {
    var c = a.x,
        d = a.x + a.w,
        e = a.y,
        f = a.y + a.h,
        g = b.x,
        h = b.x + b.w,
        i = b.y,
        j = b.y + b.h;return g >= c && d >= g && i >= e && f >= i || h >= c && d >= h && i >= e && f >= i || g >= c && d >= g && j >= e && f >= j || h >= c && d >= g && j >= e && f >= j || c >= g && h >= c && e >= i && j >= e || d >= g && h >= d && e >= i && j >= e || c >= g && h >= c && f >= i && j >= f || d >= g && h >= c && f >= i && j >= f;
  }, b.encloses = function (a, b, c) {
    var d = a.x,
        e = a.x + a.w,
        f = a.y,
        g = a.y + a.h,
        h = b.x,
        i = b.x + b.w,
        j = b.y,
        k = b.y + b.h,
        l = function l(a, b, d, e) {
      return c ? b >= a && d >= e : b > a && d > e;
    };return l(d, h, e, i) && l(f, j, g, k);
  }, [null, [1, -1], [1, 1], [-1, 1], [-1, -1]]),
      h = [null, [-1, -1], [-1, 1], [1, 1], [1, -1]];b.pointOnLine = function (a, b, c) {
    var d = e(a, b),
        i = f(a, b),
        j = c > 0 ? g[i] : h[i],
        k = Math.atan(d),
        l = Math.abs(c * Math.sin(k)) * j[1],
        m = Math.abs(c * Math.cos(k)) * j[0];return { x: a.x + m, y: a.y + l };
  }, b.perpendicularLineTo = function (a, b, c) {
    var d = e(a, b),
        f = Math.atan(-1 / d),
        g = c / 2 * Math.sin(f),
        h = c / 2 * Math.cos(f);return [{ x: b.x + h, y: b.y + g }, { x: b.x - h, y: b.y - g }];
  };
}.call("undefined" != typeof window ? window : undefined), function () {
  "use strict";
  var a = this,
      b = { android: navigator.userAgent.toLowerCase().indexOf("android") > -1 },
      c = function c(a, b, _c) {
    _c = _c || a.parentNode;for (var d = _c.querySelectorAll(b), e = 0; e < d.length; e++) {
      if (d[e] === a) return !0;
    }return !1;
  },
      d = function d(a) {
    return "string" == typeof a || a.constructor === String ? document.getElementById(a) : a;
  },
      e = function e(a) {
    return a.srcElement || a.target;
  },
      f = function f(a, b, c, d) {
    if (d) {
      if ("undefined" != typeof a.path && a.path.indexOf) return { path: a.path, end: a.path.indexOf(c) };var e = { path: [], end: -1 },
          f = function f(a) {
        e.path.push(a), a === c ? e.end = e.path.length - 1 : null != a.parentNode && f(a.parentNode);
      };return f(b), e;
    }return { path: [b], end: 1 };
  },
      g = function g(a, b) {
    for (var c = 0, d = a.length; d > c && a[c] != b; c++) {}c < a.length && a.splice(c, 1);
  },
      h = 1,
      i = function i(a, b, c) {
    var d = h++;return a.__ta = a.__ta || {}, a.__ta[b] = a.__ta[b] || {}, a.__ta[b][d] = c, c.__tauid = d, d;
  },
      j = function j(a, b, c) {
    if (a.__ta && a.__ta[b] && delete a.__ta[b][c.__tauid], c.__taExtra) {
      for (var d = 0; d < c.__taExtra.length; d++) {
        F(a, c.__taExtra[d][0], c.__taExtra[d][1]);
      }c.__taExtra.length = 0;
    }c.__taUnstore && c.__taUnstore();
  },
      k = function k(a, b, d, g) {
    if (null == a) return d;var h = a.split(","),
        i = function i(g) {
      i.__tauid = d.__tauid;var j = e(g),
          k = j,
          l = f(g, j, b, null != a);if (-1 != l.end) for (var m = 0; m < l.end; m++) {
        k = l.path[m];for (var n = 0; n < h.length; n++) {
          c(k, h[n], b) && d.apply(k, arguments);
        }
      }
    };return l(d, g, i), i;
  },
      l = function l(a, b, c) {
    a.__taExtra = a.__taExtra || [], a.__taExtra.push([b, c]);
  },
      m = function m(a, b, c, d) {
    if (s && u[b]) {
      var e = k(d, a, c, u[b]);E(a, u[b], e, c);
    }"focus" === b && null == a.getAttribute("tabindex") && a.setAttribute("tabindex", "1"), E(a, b, k(d, a, c, b), c);
  },
      n = function n(a, b, c, d) {
    if (null == a.__taSmartClicks) {
      var f = function f(b) {
        a.__tad = y(b);
      },
          h = function h(b) {
        a.__tau = y(b);
      },
          i = function i(b) {
        if (a.__tad && a.__tau && a.__tad[0] === a.__tau[0] && a.__tad[1] === a.__tau[1]) for (var c = 0; c < a.__taSmartClicks.length; c++) {
          a.__taSmartClicks[c].apply(e(b), [b]);
        }
      };m(a, "mousedown", f, d), m(a, "mouseup", h, d), m(a, "click", i, d), a.__taSmartClicks = [];
    }a.__taSmartClicks.push(c), c.__taUnstore = function () {
      g(a.__taSmartClicks, c);
    };
  },
      o = { tap: { touches: 1, taps: 1 }, dbltap: { touches: 1, taps: 2 }, contextmenu: { touches: 2, taps: 1 } },
      p = function p(a, b) {
    return function (d, h, i, j) {
      if ("contextmenu" == h && t) m(d, h, i, j);else {
        if (null == d.__taTapHandler) {
          var k = d.__taTapHandler = { tap: [], dbltap: [], contextmenu: [], down: !1, taps: 0, downSelectors: [] },
              l = function l(g) {
            for (var h = e(g), i = f(g, h, d, null != j), l = !1, m = 0; m < i.end; m++) {
              if (l) return;h = i.path[m];for (var n = 0; n < k.downSelectors.length; n++) {
                if (null == k.downSelectors[n] || c(h, k.downSelectors[n], d)) {
                  k.down = !0, setTimeout(p, a), setTimeout(q, b), l = !0;break;
                }
              }
            }
          },
              n = function n(a) {
            if (k.down) {
              var b,
                  g,
                  h = e(a);k.taps++;var i = D(a);for (var j in o) {
                if (o.hasOwnProperty(j)) {
                  var l = o[j];if (l.touches === i && (1 === l.taps || l.taps === k.taps)) for (var m = 0; m < k[j].length; m++) {
                    g = f(a, h, d, null != k[j][m][1]);for (var n = 0; n < g.end; n++) {
                      if (b = g.path[n], null == k[j][m][1] || c(b, k[j][m][1], d)) {
                        k[j][m][0].apply(b, [a]);break;
                      }
                    }
                  }
                }
              }
            }
          },
              p = function p() {
            k.down = !1;
          },
              q = function q() {
            k.taps = 0;
          };m(d, "mousedown", l), m(d, "mouseup", n);
        }d.__taTapHandler.downSelectors.push(j), d.__taTapHandler[h].push([i, j]), i.__taUnstore = function () {
          g(d.__taTapHandler[h], i);
        };
      }
    };
  },
      q = function q(a, b, c, d) {
    for (var e in c.__tamee[a]) {
      c.__tamee[a].hasOwnProperty(e) && c.__tamee[a][e].apply(d, [b]);
    }
  },
      r = function r() {
    var a = [];return function (b, d, f, g) {
      if (!b.__tamee) {
        b.__tamee = { over: !1, mouseenter: [], mouseexit: [] };var h = function h(d) {
          var f = e(d);(null == g && f == b && !b.__tamee.over || c(f, g, b) && (null == f.__tamee || !f.__tamee.over)) && (q("mouseenter", d, b, f), f.__tamee = f.__tamee || {}, f.__tamee.over = !0, a.push(f));
        },
            j = function j(d) {
          for (var f = e(d), g = 0; g < a.length; g++) {
            f != a[g] || c(d.relatedTarget || d.toElement, "*", f) || (f.__tamee.over = !1, a.splice(g, 1), q("mouseexit", d, b, f));
          }
        };E(b, "mouseover", k(g, b, h, "mouseover"), h), E(b, "mouseout", k(g, b, j, "mouseout"), j);
      }f.__taUnstore = function () {
        delete b.__tamee[d][f.__tauid];
      }, i(b, d, f), b.__tamee[d][f.__tauid] = f;
    };
  },
      s = "ontouchstart" in document.documentElement,
      t = "onmousedown" in document.documentElement,
      u = { mousedown: "touchstart", mouseup: "touchend", mousemove: "touchmove" },
      v = function () {
    var a = -1;if ("Microsoft Internet Explorer" == navigator.appName) {
      var b = navigator.userAgent,
          c = new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})");null != c.exec(b) && (a = parseFloat(RegExp.$1));
    }return a;
  }(),
      w = v > -1 && 9 > v,
      x = function x(a, b) {
    if (null == a) return [0, 0];var c = C(a),
        d = B(c, 0);return [d[b + "X"], d[b + "Y"]];
  },
      y = function y(a) {
    return null == a ? [0, 0] : w ? [a.clientX + document.documentElement.scrollLeft, a.clientY + document.documentElement.scrollTop] : x(a, "page");
  },
      z = function z(a) {
    return x(a, "screen");
  },
      A = function A(a) {
    return x(a, "client");
  },
      B = function B(a, b) {
    return a.item ? a.item(b) : a[b];
  },
      C = function C(a) {
    return a.touches && a.touches.length > 0 ? a.touches : a.changedTouches && a.changedTouches.length > 0 ? a.changedTouches : a.targetTouches && a.targetTouches.length > 0 ? a.targetTouches : [a];
  },
      D = function D(a) {
    return C(a).length;
  },
      E = function E(a, b, c, d) {
    if (i(a, b, c), d.__tauid = c.__tauid, a.addEventListener) a.addEventListener(b, c, !1);else if (a.attachEvent) {
      var e = b + c.__tauid;a["e" + e] = c, a[e] = function () {
        a["e" + e] && a["e" + e](window.event);
      }, a.attachEvent("on" + b, a[e]);
    }
  },
      F = function F(a, b, c) {
    null != c && G(a, function () {
      var e = d(this);if (j(e, b, c), null != c.__tauid) if (e.removeEventListener) e.removeEventListener(b, c, !1), s && u[b] && e.removeEventListener(u[b], c, !1);else if (this.detachEvent) {
        var f = b + c.__tauid;e[f] && e.detachEvent("on" + b, e[f]), e[f] = null, e["e" + f] = null;
      }c.__taTouchProxy && F(a, c.__taTouchProxy[1], c.__taTouchProxy[0]);
    });
  },
      G = function G(a, b) {
    if (null != a) {
      a = "undefined" != typeof Window && "unknown" != typeof a.top && a == a.top ? [a] : "string" != typeof a && null == a.tagName && null != a.length ? a : "string" == typeof a ? document.querySelectorAll(a) : [a];for (var c = 0; c < a.length; c++) {
        b.apply(a[c]);
      }
    }
  };a.Mottle = function (a) {
    a = a || {};var c = a.clickThreshold || 250,
        e = a.dblClickThreshold || 450,
        f = new r(),
        g = new p(c, e),
        h = a.smartClicks,
        i = function i(a, b, c, e) {
      null != c && G(a, function () {
        var a = d(this);h && "click" === b ? n(a, b, c, e) : "tap" === b || "dbltap" === b || "contextmenu" === b ? g(a, b, c, e) : "mouseenter" === b || "mouseexit" == b ? f(a, b, c, e) : m(a, b, c, e);
      });
    };this.remove = function (a) {
      return G(a, function () {
        var a = d(this);if (a.__ta) for (var b in a.__ta) {
          if (a.__ta.hasOwnProperty(b)) for (var c in a.__ta[b]) {
            a.__ta[b].hasOwnProperty(c) && F(a, b, a.__ta[b][c]);
          }
        }a.parentNode && a.parentNode.removeChild(a);
      }), this;
    }, this.on = function () {
      var a = arguments[0],
          b = 4 == arguments.length ? arguments[2] : null,
          c = arguments[1],
          d = arguments[arguments.length - 1];return i(a, c, d, b), this;
    }, this.off = function (a, b, c) {
      return F(a, b, c), this;
    }, this.trigger = function (a, c, e, f) {
      var g = t && ("undefined" == typeof MouseEvent || null == e || e.constructor === MouseEvent),
          h = s && !t && u[c] ? u[c] : c,
          i = !(s && !t && u[c]),
          j = y(e),
          k = z(e),
          l = A(e);return G(a, function () {
        var a,
            m = d(this);e = e || { screenX: k[0], screenY: k[1], clientX: l[0], clientY: l[1] };var n = function n(a) {
          f && (a.payload = f);
        },
            o = { TouchEvent: function TouchEvent(a) {
            var b = document.createTouch(window, m, 0, j[0], j[1], k[0], k[1], l[0], l[1], 0, 0, 0, 0),
                c = document.createTouchList(b),
                d = document.createTouchList(b),
                e = document.createTouchList(b);a.initTouchEvent(h, !0, !0, window, null, k[0], k[1], l[0], l[1], !1, !1, !1, !1, c, d, e, 1, 0);
          }, MouseEvents: function MouseEvents(a) {
            if (a.initMouseEvent(h, !0, !0, window, 0, k[0], k[1], l[0], l[1], !1, !1, !1, !1, 1, m), b.android) {
              var c = document.createTouch(window, m, 0, j[0], j[1], k[0], k[1], l[0], l[1], 0, 0, 0, 0);a.touches = a.targetTouches = a.changedTouches = document.createTouchList(c);
            }
          } };if (document.createEvent) {
          var p = !i && !g && s && u[c] && !b.android,
              q = p ? "TouchEvent" : "MouseEvents";a = document.createEvent(q), o[q](a), n(a), m.dispatchEvent(a);
        } else document.createEventObject && (a = document.createEventObject(), a.eventType = a.eventName = h, a.screenX = k[0], a.screenY = k[1], a.clientX = l[0], a.clientY = l[1], n(a), m.fireEvent("on" + h, a));
      }), this;
    };
  }, a.Mottle.consume = function (a, b) {
    a.stopPropagation ? a.stopPropagation() : a.returnValue = !1, !b && a.preventDefault && a.preventDefault();
  }, a.Mottle.pageLocation = y, a.Mottle.setForceTouchEvents = function (a) {
    s = a;
  }, a.Mottle.setForceMouseEvents = function (a) {
    t = a;
  }, a.Mottle.version = "0.8.0", "undefined" != typeof exports && (exports.Mottle = a.Mottle);
}.call("undefined" == typeof window ? undefined : window), function () {
  "use strict";
  var a = this,
      b = function b(a, _b, c) {
    return -1 === a.indexOf(_b) ? (c ? a.unshift(_b) : a.push(_b), !0) : !1;
  },
      c = function c(a, b) {
    var c = a.indexOf(b);-1 != c && a.splice(c, 1);
  },
      d = function d(a, b) {
    for (var c = [], d = 0; d < a.length; d++) {
      -1 == b.indexOf(a[d]) && c.push(a[d]);
    }return c;
  },
      e = function e(a) {
    return null == a ? !1 : "string" == typeof a || a.constructor == String;
  },
      f = function f(a) {
    var b = a.getBoundingClientRect(),
        c = document.body,
        d = document.documentElement,
        e = window.pageYOffset || d.scrollTop || c.scrollTop,
        f = window.pageXOffset || d.scrollLeft || c.scrollLeft,
        g = d.clientTop || c.clientTop || 0,
        h = d.clientLeft || c.clientLeft || 0,
        i = b.top + e - g,
        j = b.left + f - h;return { top: Math.round(i), left: Math.round(j) };
  },
      g = function g(a, b, c) {
    c = c || a.parentNode;for (var d = c.querySelectorAll(b), e = 0; e < d.length; e++) {
      if (d[e] === a) return !0;
    }return !1;
  },
      h = function () {
    var a = -1;if ("Microsoft Internet Explorer" == navigator.appName) {
      var b = navigator.userAgent,
          c = new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})");null != c.exec(b) && (a = parseFloat(RegExp.$1));
    }return a;
  }(),
      i = 50,
      j = 50,
      k = h > -1 && 9 > h,
      l = 9 == h,
      m = function m(a) {
    if (k) return [a.clientX + document.documentElement.scrollLeft, a.clientY + document.documentElement.scrollTop];var b = o(a),
        c = n(b, 0);return l ? [c.pageX || c.clientX, c.pageY || c.clientY] : [c.pageX, c.pageY];
  },
      n = function n(a, b) {
    return a.item ? a.item(b) : a[b];
  },
      o = function o(a) {
    return a.touches && a.touches.length > 0 ? a.touches : a.changedTouches && a.changedTouches.length > 0 ? a.changedTouches : a.targetTouches && a.targetTouches.length > 0 ? a.targetTouches : [a];
  },
      p = { draggable: "katavorio-draggable", droppable: "katavorio-droppable", drag: "katavorio-drag", selected: "katavorio-drag-selected", active: "katavorio-drag-active", hover: "katavorio-drag-hover", noSelect: "katavorio-drag-no-select", ghostProxy: "katavorio-ghost-proxy" },
      q = "katavorio-drag-scope",
      r = ["stop", "start", "drag", "drop", "over", "out", "beforeStart"],
      s = function s() {},
      t = function t() {
    return !0;
  },
      u = function u(a, b, c) {
    for (var d = 0; d < a.length; d++) {
      a[d] != c && b(a[d]);
    }
  },
      v = function v(a, b, c, d) {
    u(a, function (a) {
      a.setActive(b), b && a.updatePosition(), c && a.setHover(d, b);
    });
  },
      w = function w(a, b) {
    if (null != a) {
      a = e(a) || null != a.tagName || null == a.length ? [a] : a;for (var c = 0; c < a.length; c++) {
        b.apply(a[c], [a[c]]);
      }
    }
  },
      x = function x(a) {
    a.stopPropagation ? (a.stopPropagation(), a.preventDefault()) : a.returnValue = !1;
  },
      y = "input,textarea,select,button,option",
      z = function z(a, b, c) {
    var d = a.srcElement || a.target;return !g(d, c.getInputFilterSelector(), b);
  },
      A = function A(a, b, c, d) {
    this.params = b || {}, this.el = a, this.params.addClass(this.el, this._class), this.uuid = F();var e = !0;return this.setEnabled = function (a) {
      e = a;
    }, this.isEnabled = function () {
      return e;
    }, this.toggleEnabled = function () {
      e = !e;
    }, this.setScope = function (a) {
      this.scopes = a ? a.split(/\s+/) : [d];
    }, this.addScope = function (a) {
      var b = {};w(this.scopes, function (a) {
        b[a] = !0;
      }), w(a ? a.split(/\s+/) : [], function (a) {
        b[a] = !0;
      }), this.scopes = [];for (var c in b) {
        this.scopes.push(c);
      }
    }, this.removeScope = function (a) {
      var b = {};w(this.scopes, function (a) {
        b[a] = !0;
      }), w(a ? a.split(/\s+/) : [], function (a) {
        delete b[a];
      }), this.scopes = [];for (var c in b) {
        this.scopes.push(c);
      }
    }, this.toggleScope = function (a) {
      var b = {};w(this.scopes, function (a) {
        b[a] = !0;
      }), w(a ? a.split(/\s+/) : [], function (a) {
        b[a] ? delete b[a] : b[a] = !0;
      }), this.scopes = [];for (var c in b) {
        this.scopes.push(c);
      }
    }, this.setScope(b.scope), this.k = b.katavorio, b.katavorio;
  },
      B = function B() {
    return !0;
  },
      C = function C() {
    return !1;
  },
      D = function D(a, b, c) {
    this._class = c.draggable;var d = A.apply(this, arguments);this.rightButtonCanDrag = this.params.rightButtonCanDrag;var h = [0, 0],
        k = null,
        l = null,
        n = [0, 0],
        o = !1,
        q = this.params.consumeStartEvent !== !1,
        r = this.el,
        s = this.params.clone,
        u = (this.params.scroll, b.multipleDrop !== !1),
        w = !1,
        y = b.ghostProxy === !0 ? B : b.ghostProxy && "function" == typeof b.ghostProxy ? b.ghostProxy : C,
        D = function D(a) {
      return a.cloneNode(!0);
    },
        E = b.snapThreshold || 5,
        H = function H(a, b, c, d, e) {
      d = d || E, e = e || E;var f = Math.floor(a[0] / b),
          g = b * f,
          h = g + b,
          i = Math.abs(a[0] - g) <= d ? g : Math.abs(h - a[0]) <= d ? h : a[0],
          j = Math.floor(a[1] / c),
          k = c * j,
          l = k + c,
          m = Math.abs(a[1] - k) <= e ? k : Math.abs(l - a[1]) <= e ? l : a[1];return [i, m];
    };this.posses = [], this.posseRoles = {}, this.toGrid = function (a) {
      return null == this.params.grid ? a : H(a, this.params.grid[0], this.params.grid[1]);
    }, this.snap = function (a, b) {
      if (null != r) {
        a = a || (this.params.grid ? this.params.grid[0] : i), b = b || (this.params.grid ? this.params.grid[1] : j);var c = this.params.getPosition(r);this.params.setPosition(r, H(c, a, b, a, b));
      }
    }, this.setUseGhostProxy = function (a) {
      y = a ? B : C;
    };var I,
        J = function J(a) {
      return b.allowNegative === !1 ? [Math.max(0, a[0]), Math.max(0, a[1])] : a;
    },
        K = function (a) {
      I = "function" == typeof a ? a : a ? function (a) {
        return J([Math.max(0, Math.min(Q.w - this.size[0], a[0])), Math.max(0, Math.min(Q.h - this.size[1], a[1]))]);
      }.bind(this) : function (a) {
        return J(a);
      };
    }.bind(this);K("function" == typeof this.params.constrain ? this.params.constrain : this.params.constrain || this.params.containment), this.setConstrain = function (a) {
      K(a);
    };var L;this.setRevert = function (a) {
      L = a;
    };var M = function M(a) {
      return "function" == typeof a ? (a._katavorioId = F(), a._katavorioId) : a;
    },
        N = {},
        O = function O(a) {
      for (var b in N) {
        var c = N[b],
            d = c[0](a);if (c[1] && (d = !d), !d) return !1;
      }return !0;
    },
        P = this.setFilter = function (b, c) {
      if (b) {
        var d = M(b);N[d] = [function (c) {
          var d,
              f = c.srcElement || c.target;return e(b) ? d = g(f, b, a) : "function" == typeof b && (d = b(c, a)), d;
        }, c !== !1];
      }
    };this.addFilter = P, this.removeFilter = function (a) {
      var b = "function" == typeof a ? a._katavorioId : a;delete N[b];
    }, this.clearAllFilters = function () {
      N = {};
    }, this.canDrag = this.params.canDrag || t;var Q,
        R = [],
        S = [];this.downListener = function (a) {
      var b = this.rightButtonCanDrag || 3 !== a.which && 2 !== a.button;if (b && this.isEnabled() && this.canDrag()) {
        var e = O(a) && z(a, this.el, this.k);if (e) {
          if (s) {
            r = this.el.cloneNode(!0), r.setAttribute("id", null), r.style.position = "absolute";var g = f(this.el);r.style.left = g.left + "px", r.style.top = g.top + "px", document.body.appendChild(r);
          } else r = this.el;q && x(a), h = m(a), this.params.bind(document, "mousemove", this.moveListener), this.params.bind(document, "mouseup", this.upListener), d.markSelection(this), d.markPosses(this), this.params.addClass(document.body, c.noSelect), U("beforeStart", { el: this.el, pos: k, e: a, drag: this });
        } else this.params.consumeFilteredEvents && x(a);
      }
    }.bind(this), this.moveListener = function (a) {
      if (h) {
        if (!o) {
          var b = U("start", { el: this.el, pos: k, e: a, drag: this });if (b !== !1) {
            if (!h) return;this.mark(!0), o = !0;
          }
        }if (h) {
          S.length = 0;var c = m(a),
              e = c[0] - h[0],
              f = c[1] - h[1],
              g = this.params.ignoreZoom ? 1 : d.getZoom();e /= g, f /= g, this.moveBy(e, f, a), d.updateSelection(e, f, this), d.updatePosses(e, f, this);
        }
      }
    }.bind(this), this.upListener = function (a) {
      h && (h = null, this.params.unbind(document, "mousemove", this.moveListener), this.params.unbind(document, "mouseup", this.upListener), this.params.removeClass(document.body, c.noSelect), this.unmark(a), d.unmarkSelection(this, a), d.unmarkPosses(this, a), this.stop(a), d.notifySelectionDragStop(this, a), d.notifyPosseDragStop(this, a), o = !1, s && (r && r.parentNode && r.parentNode.removeChild(r), r = null), S.length = 0, L && L(this.el, this.params.getPosition(this.el)) === !0 && (this.params.setPosition(this.el, k), U("revert", this.el)));
    }.bind(this), this.getFilters = function () {
      return N;
    }, this.abort = function () {
      null != h && this.upListener();
    }, this.getDragElement = function () {
      return r || this.el;
    };var T = { start: [], drag: [], stop: [], over: [], out: [], beforeStart: [], revert: [] };b.events.start && T.start.push(b.events.start), b.events.beforeStart && T.beforeStart.push(b.events.beforeStart), b.events.stop && T.stop.push(b.events.stop), b.events.drag && T.drag.push(b.events.drag), b.events.revert && T.revert.push(b.events.revert), this.on = function (a, b) {
      T[a] && T[a].push(b);
    }, this.off = function (a, b) {
      if (T[a]) {
        for (var c = [], d = 0; d < T[a].length; d++) {
          T[a][d] !== b && c.push(T[a][d]);
        }T[a] = c;
      }
    };var U = function U(a, b) {
      if (T[a]) for (var c = 0; c < T[a].length; c++) {
        try {
          T[a][c](b);
        } catch (d) {}
      }
    };this.notifyStart = function (a) {
      U("start", { el: this.el, pos: this.params.getPosition(r), e: a, drag: this });
    }, this.stop = function (a, b) {
      if (b || o) {
        var c = [],
            e = d.getSelection(),
            f = this.params.getPosition(r);if (e.length > 1) for (var g = 0; g < e.length; g++) {
          var h = this.params.getPosition(e[g].el);c.push([e[g].el, { left: h[0], top: h[1] }, e[g]]);
        } else c.push([r, { left: f[0], top: f[1] }, this]);U("stop", { el: r, pos: V || f, finalPos: f, e: a, drag: this, selection: c });
      }
    }, this.mark = function (a) {
      k = this.params.getPosition(r), l = this.params.getPosition(r, !0), n = [l[0] - k[0], l[1] - k[1]], this.size = this.params.getSize(r), R = d.getMatchingDroppables(this), v(R, !0, !1, this), this.params.addClass(r, this.params.dragClass || c.drag);var b = this.params.getSize(r.parentNode);Q = { w: b[0], h: b[1] }, a && d.notifySelectionDragStart(this);
    };var V;this.unmark = function (a, d) {
      if (v(R, !1, !0, this), w && y(this.el) ? (V = [r.offsetLeft, r.offsetTop], this.el.parentNode.removeChild(r), r = this.el) : V = null, this.params.removeClass(r, this.params.dragClass || c.drag), R.length = 0, w = !1, !d) {
        S.length > 0 && V && b.setPosition(this.el, V), S.sort(G);for (var e = 0; e < S.length; e++) {
          var f = S[e].drop(this, a);if (f === !0) break;
        }
      }
    }, this.moveBy = function (a, c, d) {
      S.length = 0;var e = this.toGrid([k[0] + a, k[1] + c]),
          f = I(e, r);if (y(this.el)) if (e[0] != f[0] || e[1] != f[1]) {
        if (!w) {
          var g = D(this.el);b.addClass(g, p.ghostProxy), this.el.parentNode.appendChild(g), r = g, w = !0;
        }f = e;
      } else w && (this.el.parentNode.removeChild(r), r = this.el, w = !1);var h = { x: f[0], y: f[1], w: this.size[0], h: this.size[1] },
          i = { x: h.x + n[0], y: h.y + n[1], w: h.w, h: h.h },
          j = null;this.params.setPosition(r, f);for (var l = 0; l < R.length; l++) {
        var m = { x: R[l].pagePosition[0], y: R[l].pagePosition[1], w: R[l].size[0], h: R[l].size[1] };this.params.intersects(i, m) && (u || null == j || j == R[l].el) && R[l].canDrop(this) ? (j || (j = R[l].el), S.push(R[l]), R[l].setHover(this, !0, d)) : R[l].isHover() && R[l].setHover(this, !1, d);
      }U("drag", { el: this.el, pos: f, e: d, drag: this });
    }, this.destroy = function () {
      this.params.unbind(this.el, "mousedown", this.downListener), this.params.unbind(document, "mousemove", this.moveListener), this.params.unbind(document, "mouseup", this.upListener), this.downListener = null, this.upListener = null, this.moveListener = null;
    }, this.params.bind(this.el, "mousedown", this.downListener), this.params.handle ? P(this.params.handle, !1) : P(this.params.filter, this.params.filterExclude);
  },
      E = function E(a, b, c) {
    this._class = c.droppable, this.params = b || {}, this.rank = b.rank || 0, this._activeClass = this.params.activeClass || c.active, this._hoverClass = this.params.hoverClass || c.hover, A.apply(this, arguments);var d = !1;this.allowLoopback = this.params.allowLoopback !== !1, this.setActive = function (a) {
      this.params[a ? "addClass" : "removeClass"](this.el, this._activeClass);
    }, this.updatePosition = function () {
      this.position = this.params.getPosition(this.el), this.pagePosition = this.params.getPosition(this.el, !0), this.size = this.params.getSize(this.el);
    }, this.canDrop = this.params.canDrop || function () {
      return !0;
    }, this.isHover = function () {
      return d;
    }, this.setHover = function (a, b, c) {
      (b || null == this.el._katavorioDragHover || this.el._katavorioDragHover == a.el._katavorio) && (this.params[b ? "addClass" : "removeClass"](this.el, this._hoverClass), this.el._katavorioDragHover = b ? a.el._katavorio : null, d !== b && this.params.events[b ? "over" : "out"]({ el: this.el, e: c, drag: a, drop: this }), d = b);
    }, this.drop = function (a, b) {
      return this.params.events.drop({ drag: a, e: b, drop: this });
    }, this.destroy = function () {
      this._class = null, this._activeClass = null, this._hoverClass = null, d = null;
    };
  },
      F = function F() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (a) {
      var b = 0 | 16 * Math.random(),
          c = "x" == a ? b : 8 | 3 & b;return c.toString(16);
    });
  },
      G = function G(a, b) {
    return a.rank < b.rank ? 1 : a.rank > b.rank ? -1 : 0;
  },
      H = function H(a) {
    return null == a ? null : (a = "string" == typeof a || a.constructor == String ? document.getElementById(a) : a, null == a ? null : (a._katavorio = a._katavorio || F(), a));
  };a.Katavorio = function (a) {
    var f = [],
        g = {};this._dragsByScope = {}, this._dropsByScope = {};var h = 1,
        i = function i(a, b) {
      w(a, function (a) {
        for (var c = 0; c < a.scopes.length; c++) {
          b[a.scopes[c]] = b[a.scopes[c]] || [], b[a.scopes[c]].push(a);
        }
      });
    },
        j = function j(b, c) {
      var d = 0;return w(b, function (b) {
        for (var e = 0; e < b.scopes.length; e++) {
          if (c[b.scopes[e]]) {
            var f = a.indexOf(c[b.scopes[e]], b);-1 != f && (c[b.scopes[e]].splice(f, 1), d++);
          }
        }
      }), d > 0;
    },
        k = (this.getMatchingDroppables = function (a) {
      for (var b = [], c = {}, d = 0; d < a.scopes.length; d++) {
        var e = this._dropsByScope[a.scopes[d]];if (e) for (var f = 0; f < e.length; f++) {
          !e[f].canDrop(a) || c[e[f].uuid] || !e[f].allowLoopback && e[f].el === a.el || (c[e[f].uuid] = !0, b.push(e[f]));
        }
      }return b.sort(G), b;
    }, function (b) {
      b = b || {};var c,
          d = { events: {} };for (c in a) {
        d[c] = a[c];
      }for (c in b) {
        d[c] = b[c];
      }for (c = 0; c < r.length; c++) {
        d.events[r[c]] = b[r[c]] || s;
      }return d.katavorio = this, d;
    }.bind(this)),
        l = function (a, b) {
      for (var c = 0; c < r.length; c++) {
        b[r[c]] && a.on(r[c], b[r[c]]);
      }
    }.bind(this),
        m = {},
        n = a.css || {},
        o = a.scope || q;for (var t in p) {
      m[t] = p[t];
    }for (var t in n) {
      m[t] = n[t];
    }var v = a.inputFilterSelector || y;this.getInputFilterSelector = function () {
      return v;
    }, this.setInputFilterSelector = function (a) {
      return v = a, this;
    }, this.draggable = function (b, c) {
      var d = [];return w(b, function (b) {
        if (b = H(b), null != b) if (null == b._katavorioDrag) {
          var e = k(c);b._katavorioDrag = new D(b, e, m, o), i(b._katavorioDrag, this._dragsByScope), d.push(b._katavorioDrag), a.addClass(b, m.draggable);
        } else l(b._katavorioDrag, c);
      }.bind(this)), d;
    }, this.droppable = function (b, c) {
      var d = [];return w(b, function (b) {
        if (b = H(b), null != b) {
          var e = new E(b, k(c), m, o);b._katavorioDrop = b._katavorioDrop || [], b._katavorioDrop.push(e), i(e, this._dropsByScope), d.push(e), a.addClass(b, m.droppable);
        }
      }.bind(this)), d;
    }, this.select = function (b) {
      return w(b, function () {
        var b = H(this);b && b._katavorioDrag && (g[b._katavorio] || (f.push(b._katavorioDrag), g[b._katavorio] = [b, f.length - 1], a.addClass(b, m.selected)));
      }), this;
    }, this.deselect = function (b) {
      return w(b, function () {
        var b = H(this);if (b && b._katavorio) {
          var c = g[b._katavorio];if (c) {
            for (var d = [], e = 0; e < f.length; e++) {
              f[e].el !== b && d.push(f[e]);
            }f = d, delete g[b._katavorio], a.removeClass(b, m.selected);
          }
        }
      }), this;
    }, this.deselectAll = function () {
      for (var b in g) {
        var c = g[b];a.removeClass(c[0], m.selected);
      }f.length = 0, g = {};
    }, this.markSelection = function (a) {
      u(f, function (a) {
        a.mark();
      }, a);
    }, this.markPosses = function (a) {
      a.posses && w(a.posses, function (b) {
        a.posseRoles[b] && B[b] && u(B[b].members, function (a) {
          a.mark();
        }, a);
      });
    }, this.unmarkSelection = function (a, b) {
      u(f, function (a) {
        a.unmark(b);
      }, a);
    }, this.unmarkPosses = function (a, b) {
      a.posses && w(a.posses, function (c) {
        a.posseRoles[c] && B[c] && u(B[c].members, function (a) {
          a.unmark(b, !0);
        }, a);
      });
    }, this.getSelection = function () {
      return f.slice(0);
    }, this.updateSelection = function (a, b, c) {
      u(f, function (c) {
        c.moveBy(a, b);
      }, c);
    };var x = function x(a, b) {
      b.posses && w(b.posses, function (c) {
        b.posseRoles[c] && B[c] && u(B[c].members, function (b) {
          a(b);
        }, b);
      });
    };this.updatePosses = function (a, b, c) {
      x(function (c) {
        c.moveBy(a, b);
      }, c);
    }, this.notifyPosseDragStop = function (a, b) {
      x(function (a) {
        a.stop(b, !0);
      }, a);
    }, this.notifySelectionDragStop = function (a, b) {
      u(f, function (a) {
        a.stop(b, !0);
      }, a);
    }, this.notifySelectionDragStart = function (a, b) {
      u(f, function (a) {
        a.notifyStart(b);
      }, a);
    }, this.setZoom = function (a) {
      h = a;
    }, this.getZoom = function () {
      return h;
    };var z = function z(a, b, c, d) {
      w(a, function (a) {
        j(a, c), a[d](b), i(a, c);
      });
    };w(["set", "add", "remove", "toggle"], function (a) {
      this[a + "Scope"] = function (b, c) {
        z(b._katavorioDrag, c, this._dragsByScope, a + "Scope"), z(b._katavorioDrop, c, this._dropsByScope, a + "Scope");
      }.bind(this), this[a + "DragScope"] = function (b, c) {
        z(b.constructor === D ? b : b._katavorioDrag, c, this._dragsByScope, a + "Scope");
      }.bind(this), this[a + "DropScope"] = function (b, c) {
        z(b.constructor === E ? b : b._katavorioDrop, c, this._dropsByScope, a + "Scope");
      }.bind(this);
    }.bind(this)), this.snapToGrid = function (a, b) {
      for (var c in this._dragsByScope) {
        u(this._dragsByScope[c], function (c) {
          c.snap(a, b);
        });
      }
    }, this.getDragsForScope = function (a) {
      return this._dragsByScope[a];
    }, this.getDropsForScope = function (a) {
      return this._dropsByScope[a];
    };var A = function A(a, b, c) {
      if (a = H(a), a[b]) {
        var d = f.indexOf(a[b]);d >= 0 && f.splice(d, 1), j(a[b], c) && w(a[b], function (a) {
          a.destroy();
        }), delete a[b];
      }
    };this.elementRemoved = function (a) {
      this.destroyDraggable(a), this.destroyDroppable(a);
    }, this.destroyDraggable = function (a) {
      A(a, "_katavorioDrag", this._dragsByScope);
    }, this.destroyDroppable = function (a) {
      A(a, "_katavorioDrop", this._dropsByScope);
    }, this.reset = function () {
      this._dragsByScope = {}, this._dropsByScope = {}, f = [], g = {}, B = {};
    };var B = {},
        C = function C(a, c, d) {
      var f = e(c) ? c : c.id,
          g = e(c) ? !0 : c.active !== !1,
          h = B[f] || function () {
        var a = { name: f, members: [] };return B[f] = a, a;
      }();return w(a, function (a) {
        if (a._katavorioDrag) {
          if (d && null != a._katavorioDrag.posseRoles[h.name]) return;b(h.members, a._katavorioDrag), b(a._katavorioDrag.posses, h.name), a._katavorioDrag.posseRoles[h.name] = g;
        }
      }), h;
    };this.addToPosse = function (a) {
      for (var b = [], c = 1; c < arguments.length; c++) {
        b.push(C(a, arguments[c]));
      }return 1 == b.length ? b[0] : b;
    }, this.setPosse = function (a) {
      for (var b = [], c = 1; c < arguments.length; c++) {
        b.push(C(a, arguments[c], !0).name);
      }return w(a, function (a) {
        if (a._katavorioDrag) {
          var c = d(a._katavorioDrag.posses, b),
              e = [];Array.prototype.push.apply(e, a._katavorioDrag.posses);for (var f = 0; f < c.length; f++) {
            this.removeFromPosse(a, c[f]);
          }
        }
      }.bind(this)), 1 == b.length ? b[0] : b;
    }, this.removeFromPosse = function (a, b) {
      if (arguments.length < 2) throw new TypeError("No posse id provided for remove operation");for (var d = 1; d < arguments.length; d++) {
        b = arguments[d], w(a, function (a) {
          if (a._katavorioDrag && a._katavorioDrag.posses) {
            var d = a._katavorioDrag;w(b, function (a) {
              c(B[a].members, d), c(d.posses, a), delete d.posseRoles[a];
            });
          }
        });
      }
    }, this.removeFromAllPosses = function (a) {
      w(a, function (a) {
        if (a._katavorioDrag && a._katavorioDrag.posses) {
          var b = a._katavorioDrag;w(b.posses, function (a) {
            c(B[a].members, b);
          }), b.posses.length = 0, b.posseRoles = {};
        }
      });
    }, this.setPosseState = function (a, b, c) {
      var d = B[b];d && w(a, function (a) {
        a._katavorioDrag && a._katavorioDrag.posses && (a._katavorioDrag.posseRoles[d.name] = c);
      });
    };
  }, a.Katavorio.version = "0.19.2", "undefined" != typeof exports && (exports.Katavorio = a.Katavorio);
}.call("undefined" != typeof window ? window : undefined), function () {
  var a = function a(_a) {
    return "[object Array]" === Object.prototype.toString.call(_a);
  },
      b = function b(a) {
    return "[object Number]" === Object.prototype.toString.call(a);
  },
      c = function c(a) {
    return "string" == typeof a;
  },
      d = function d(a) {
    return "boolean" == typeof a;
  },
      e = function e(a) {
    return null == a;
  },
      f = function f(a) {
    return null == a ? !1 : "[object Object]" === Object.prototype.toString.call(a);
  },
      g = function g(a) {
    return "[object Date]" === Object.prototype.toString.call(a);
  },
      h = function h(a) {
    return "[object Function]" === Object.prototype.toString.call(a);
  },
      i = function i(a) {
    for (var b in a) {
      if (a.hasOwnProperty(b)) return !1;
    }return !0;
  },
      j = this;j.jsPlumbUtil = { isArray: a, isString: c, isBoolean: d, isNull: e, isObject: f, isDate: g, isFunction: h, isEmpty: i, isNumber: b, clone: function clone(b) {
      if (c(b)) return "" + b;if (d(b)) return !!b;if (g(b)) return new Date(b.getTime());if (h(b)) return b;if (a(b)) {
        for (var e = [], i = 0; i < b.length; i++) {
          e.push(this.clone(b[i]));
        }return e;
      }if (f(b)) {
        var j = {};for (var k in b) {
          j[k] = this.clone(b[k]);
        }return j;
      }return b;
    }, merge: function merge(b, e, g) {
      var h,
          i,
          j = {};for (g = g || [], i = 0; i < g.length; i++) {
        j[g[i]] = !0;
      }var k = this.clone(b);for (i in e) {
        if (null == k[i]) k[i] = e[i];else if (c(e[i]) || d(e[i])) j[i] ? (h = [], h.push.apply(h, a(k[i]) ? k[i] : [k[i]]), h.push.apply(h, a(e[i]) ? e[i] : [e[i]]), k[i] = h) : k[i] = e[i];else if (a(e[i])) h = [], a(k[i]) && h.push.apply(h, k[i]), h.push.apply(h, e[i]), k[i] = h;else if (f(e[i])) {
          f(k[i]) || (k[i] = {});for (var l in e[i]) {
            k[i][l] = e[i][l];
          }
        }
      }return k;
    }, replace: function replace(a, b, c) {
      if (null != a) {
        var d = a,
            e = d;return b.replace(/([^\.])+/g, function (a, b, d, f) {
          var g = a.match(/([^\[0-9]+){1}(\[)([0-9+])/),
              h = d + a.length >= f.length,
              i = function i() {
            return e[g[1]] || function () {
              return e[g[1]] = [], e[g[1]];
            }();
          };if (h) g ? i()[g[3]] = c : e[a] = c;else if (g) {
            var j = i();e = j[g[3]] || function () {
              return j[g[3]] = {}, j[g[3]];
            }();
          } else e = e[a] || function () {
            return e[a] = {}, e[a];
          }();
        }), a;
      }
    }, functionChain: function functionChain(a, b, c) {
      for (var d = 0; d < c.length; d++) {
        var e = c[d][0][c[d][1]].apply(c[d][0], c[d][2]);if (e === b) return e;
      }return a;
    }, populate: function populate(b, d, e) {
      var g = function g(a) {
        var b = a.match(/(\${.*?})/g);if (null != b) for (var c = 0; c < b.length; c++) {
          var e = d[b[c].substring(2, b[c].length - 1)] || "";null != e && (a = a.replace(b[c], e));
        }return a;
      },
          i = function i(b) {
        if (null != b) {
          if (c(b)) return g(b);if (!h(b) || null != e && 0 !== (b.name || "").indexOf(e)) {
            if (a(b)) {
              for (var j = [], k = 0; k < b.length; k++) {
                j.push(i(b[k]));
              }return j;
            }if (f(b)) {
              var l = {};for (var m in b) {
                l[m] = i(b[m]);
              }return l;
            }return b;
          }return b(d);
        }
      };return i(b);
    }, findWithFunction: function findWithFunction(a, b) {
      if (a) for (var c = 0; c < a.length; c++) {
        if (b(a[c])) return c;
      }return -1;
    }, removeWithFunction: function removeWithFunction(a, b) {
      var c = j.jsPlumbUtil.findWithFunction(a, b);return c > -1 && a.splice(c, 1), -1 != c;
    }, remove: function remove(a, b) {
      var c = a.indexOf(b);return c > -1 && a.splice(c, 1), -1 != c;
    }, addWithFunction: function addWithFunction(a, b, c) {
      -1 == j.jsPlumbUtil.findWithFunction(a, c) && a.push(b);
    }, addToList: function addToList(a, b, c, d) {
      var e = a[b];return null == e && (e = [], a[b] = e), e[d ? "unshift" : "push"](c), e;
    }, suggest: function suggest(a, b, c) {
      return -1 === a.indexOf(b) ? (c ? a.unshift(b) : a.push(b), !0) : !1;
    }, extend: function extend(b, c) {
      var d;for (c = a(c) ? c : [c], d = 0; d < c.length; d++) {
        for (var e in c[d].prototype) {
          c[d].prototype.hasOwnProperty(e) && (b.prototype[e] = c[d].prototype[e]);
        }
      }var f = function f(a, b) {
        return function () {
          for (d = 0; d < c.length; d++) {
            c[d].prototype[a] && c[d].prototype[a].apply(this, arguments);
          }return b.apply(this, arguments);
        };
      },
          g = function g(a) {
        for (var c in a) {
          b.prototype[c] = f(c, a[c]);
        }
      };if (arguments.length > 2) for (d = 2; d < arguments.length; d++) {
        g(arguments[d]);
      }return b;
    }, uuid: function uuid() {
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (a) {
        var b = 0 | 16 * Math.random(),
            c = "x" == a ? b : 8 | 3 & b;return c.toString(16);
      });
    }, logEnabled: !0, log: function log() {
      if (j.jsPlumbUtil.logEnabled && "undefined" != typeof console) try {
        var a = arguments[arguments.length - 1];console.log(a);
      } catch (b) {}
    }, wrap: function wrap(a, b, c) {
      return a = a || function () {}, b = b || function () {}, function () {
        var d = null;try {
          d = b.apply(this, arguments);
        } catch (e) {
          j.jsPlumbUtil.log("jsPlumb function failed : " + e);
        }if (null == c || d !== c) try {
          d = a.apply(this, arguments);
        } catch (e) {
          j.jsPlumbUtil.log("wrapped function failed : " + e);
        }return d;
      };
    } }, j.jsPlumbUtil.EventGenerator = function () {
    var a = {},
        b = !1,
        c = { ready: !0 };this.bind = function (b, c, d) {
      var e = function e(b) {
        j.jsPlumbUtil.addToList(a, b, c, d), c.__jsPlumb = c.__jsPlumb || {}, c.__jsPlumb[j.jsPlumbUtil.uuid()] = b;
      };if ("string" == typeof b) e(b);else if (null != b.length) for (var f = 0; f < b.length; f++) {
        e(b[f]);
      }return this;
    }, this.fire = function (d, e, f) {
      if (!b && a[d]) {
        var g = a[d].length,
            h = 0,
            i = !1,
            k = null;if (!this.shouldFireEvent || this.shouldFireEvent(d, e, f)) for (; !i && g > h && k !== !1;) {
          if (c[d]) a[d][h].apply(this, [e, f]);else try {
            k = a[d][h].apply(this, [e, f]);
          } catch (l) {
            j.jsPlumbUtil.log("jsPlumb: fire failed for event " + d + " : " + l);
          }h++, (null == a || null == a[d]) && (i = !0);
        }
      }return this;
    }, this.unbind = function (b, c) {
      if (0 === arguments.length) a = {};else if (1 === arguments.length) {
        if ("string" == typeof b) delete a[b];else if (b.__jsPlumb) {
          var d;for (var e in b.__jsPlumb) {
            d = b.__jsPlumb[e], j.jsPlumbUtil.remove(a[d] || [], b);
          }
        }
      } else 2 === arguments.length && j.jsPlumbUtil.remove(a[b] || [], c);return this;
    }, this.getListener = function (b) {
      return a[b];
    }, this.setSuspendEvents = function (a) {
      b = a;
    }, this.isSuspendEvents = function () {
      return b;
    }, this.silently = function (a) {
      this.setSuspendEvents(!0);try {
        a();
      } catch (b) {
        j.jsPlumbUtil.log("Cannot execute silent function " + b);
      }this.setSuspendEvents(!1);
    }, this.cleanupListeners = function () {
      for (var b in a) {
        a[b] = null;
      }
    };
  }, j.jsPlumbUtil.EventGenerator.prototype = { cleanup: function cleanup() {
      this.cleanupListeners();
    } }, "undefined" != typeof exports && (exports.jsPlumbUtil = j.jsPlumbUtil);
}.call("undefined" != typeof window ? window : undefined), function () {
  "use strict";
  var a = this;a.jsPlumbUtil.matchesSelector = function (a, b, c) {
    c = c || a.parentNode;for (var d = c.querySelectorAll(b), e = 0; e < d.length; e++) {
      if (d[e] === a) return !0;
    }return !1;
  }, a.jsPlumbUtil.consume = function (a, b) {
    a.stopPropagation ? a.stopPropagation() : a.returnValue = !1, !b && a.preventDefault && a.preventDefault();
  }, a.jsPlumbUtil.sizeElement = function (a, b, c, d, e) {
    a && (a.style.height = e + "px", a.height = e, a.style.width = d + "px", a.width = d, a.style.left = b + "px", a.style.top = c + "px");
  };
}.call("undefined" != typeof window ? window : undefined), function () {
  "use strict";
  var a,
      b = this,
      c = [],
      d = b.jsPlumbUtil,
      e = function e() {
    return "" + new Date().getTime();
  },
      f = function f(a) {
    if (a._jsPlumb.paintStyle && a._jsPlumb.hoverPaintStyle) {
      var b = {};r.extend(b, a._jsPlumb.paintStyle), r.extend(b, a._jsPlumb.hoverPaintStyle), delete a._jsPlumb.hoverPaintStyle, b.gradient && a._jsPlumb.paintStyle.fill && delete b.gradient, a._jsPlumb.hoverPaintStyle = b;
    }
  },
      g = ["tap", "dbltap", "click", "dblclick", "mouseover", "mouseout", "mousemove", "mousedown", "mouseup", "contextmenu"],
      h = function h(a, b, c, d) {
    var e = a.getAttachedElements();if (e) for (var f = 0, g = e.length; g > f; f++) {
      d && d == e[f] || e[f].setHover(b, !0, c);
    }
  },
      i = function i(a) {
    return null == a ? null : a.split(" ");
  },
      j = function j(a, b, c) {
    for (var d in b) {
      a[d] = c;
    }
  },
      k = function k(a, b) {
    b = d.isArray(b) || null != b.length && !d.isString(b) ? b : [b];for (var c = 0; c < b.length; c++) {
      try {
        a.apply(b[c], [b[c]]);
      } catch (e) {
        d.log(".each iteration failed : " + e);
      }
    }
  },
      l = function l(a, b, c) {
    if (a.getDefaultType) {
      var e = a.getTypeDescriptor(),
          f = {},
          g = a.getDefaultType(),
          h = d.merge({}, g);j(f, g, "__default");for (var i = 0, k = a._jsPlumb.types.length; k > i; i++) {
        var l = a._jsPlumb.types[i];if ("__default" !== l) {
          var m = a._jsPlumb.instance.getType(l, e);null != m && (h = d.merge(h, m, ["cssClass"]), j(f, m, l));
        }
      }b && (h = d.populate(h, b, "_")), a.applyType(h, c, f), c || a.repaint();
    }
  },
      m = b.jsPlumbUIComponent = function (a) {
    d.EventGenerator.apply(this, arguments);var b = this,
        c = arguments,
        e = b.idPrefix,
        f = e + new Date().getTime();this._jsPlumb = { instance: a._jsPlumb, parameters: a.parameters || {}, paintStyle: null, hoverPaintStyle: null, paintStyleInUse: null, hover: !1, beforeDetach: a.beforeDetach, beforeDrop: a.beforeDrop, overlayPlacements: [], hoverClass: a.hoverClass || a._jsPlumb.Defaults.HoverClass, types: [], typeCache: {} }, this.cacheTypeItem = function (a, b, c) {
      this._jsPlumb.typeCache[c] = this._jsPlumb.typeCache[c] || {}, this._jsPlumb.typeCache[c][a] = b;
    }, this.getCachedTypeItem = function (a, b) {
      return this._jsPlumb.typeCache[b] ? this._jsPlumb.typeCache[b][a] : null;
    }, this.getId = function () {
      return f;
    };var g = a.overlays || [],
        h = {};if (this.defaultOverlayKeys) {
      for (var i = 0; i < this.defaultOverlayKeys.length; i++) {
        Array.prototype.push.apply(g, this._jsPlumb.instance.Defaults[this.defaultOverlayKeys[i]] || []);
      }for (i = 0; i < g.length; i++) {
        var j = r.convertToFullOverlaySpec(g[i]);h[j[1].id] = j;
      }
    }var k = { overlays: h, parameters: a.parameters || {}, scope: a.scope || this._jsPlumb.instance.getDefaultScope() };if (this.getDefaultType = function () {
      return k;
    }, this.appendToDefaultType = function (a) {
      for (var b in a) {
        k[b] = a[b];
      }
    }, a.events) for (i in a.events) {
      b.bind(i, a.events[i]);
    }this.clone = function () {
      var a = Object.create(this.constructor.prototype);return this.constructor.apply(a, c), a;
    }.bind(this), this.isDetachAllowed = function (a) {
      var b = !0;if (this._jsPlumb.beforeDetach) try {
        b = this._jsPlumb.beforeDetach(a);
      } catch (c) {
        d.log("jsPlumb: beforeDetach callback failed", c);
      }return b;
    }, this.isDropAllowed = function (a, b, c, e, f, g, h) {
      var i = this._jsPlumb.instance.checkCondition("beforeDrop", { sourceId: a, targetId: b, scope: c, connection: e, dropEndpoint: f, source: g, target: h });if (this._jsPlumb.beforeDrop) try {
        i = this._jsPlumb.beforeDrop({ sourceId: a, targetId: b, scope: c, connection: e, dropEndpoint: f, source: g, target: h });
      } catch (j) {
        d.log("jsPlumb: beforeDrop callback failed", j);
      }return i;
    };var l = [];this.setListenerComponent = function (a) {
      for (var b = 0; b < l.length; b++) {
        l[b][3] = a;
      }
    };
  },
      n = function n(a, b) {
    var c = a._jsPlumb.types[b],
        d = a._jsPlumb.instance.getType(c, a.getTypeDescriptor());null != d && d.cssClass && a.canvas && a._jsPlumb.instance.removeClass(a.canvas, d.cssClass);
  };d.extend(b.jsPlumbUIComponent, d.EventGenerator, { getParameter: function getParameter(a) {
      return this._jsPlumb.parameters[a];
    }, setParameter: function setParameter(a, b) {
      this._jsPlumb.parameters[a] = b;
    }, getParameters: function getParameters() {
      return this._jsPlumb.parameters;
    }, setParameters: function setParameters(a) {
      this._jsPlumb.parameters = a;
    }, getClass: function getClass() {
      return r.getClass(this.canvas);
    }, hasClass: function hasClass(a) {
      return r.hasClass(this.canvas, a);
    }, addClass: function addClass(a) {
      r.addClass(this.canvas, a);
    }, removeClass: function removeClass(a) {
      r.removeClass(this.canvas, a);
    }, updateClasses: function updateClasses(a, b) {
      r.updateClasses(this.canvas, a, b);
    }, setType: function setType(a, b, c) {
      this.clearTypes(), this._jsPlumb.types = i(a) || [], l(this, b, c);
    }, getType: function getType() {
      return this._jsPlumb.types;
    }, reapplyTypes: function reapplyTypes(a, b) {
      l(this, a, b);
    }, hasType: function hasType(a) {
      return -1 != this._jsPlumb.types.indexOf(a);
    }, addType: function addType(a, b, c) {
      var d = i(a),
          e = !1;if (null != d) {
        for (var f = 0, g = d.length; g > f; f++) {
          this.hasType(d[f]) || (this._jsPlumb.types.push(d[f]), e = !0);
        }e && l(this, b, c);
      }
    }, removeType: function removeType(a, b, c) {
      var d = i(a),
          e = !1,
          f = function (a) {
        var b = this._jsPlumb.types.indexOf(a);return -1 != b ? (n(this, b), this._jsPlumb.types.splice(b, 1), !0) : !1;
      }.bind(this);if (null != d) {
        for (var g = 0, h = d.length; h > g; g++) {
          e = f(d[g]) || e;
        }e && l(this, b, c);
      }
    }, clearTypes: function clearTypes(a, b) {
      for (var c = this._jsPlumb.types.length, d = 0; c > d; d++) {
        n(this, 0), this._jsPlumb.types.splice(0, 1);
      }l(this, a, b);
    }, toggleType: function toggleType(a, b, c) {
      var d = i(a);if (null != d) {
        for (var e = 0, f = d.length; f > e; e++) {
          var g = this._jsPlumb.types.indexOf(d[e]);-1 != g ? (n(this, g), this._jsPlumb.types.splice(g, 1)) : this._jsPlumb.types.push(d[e]);
        }l(this, b, c);
      }
    }, applyType: function applyType(a, b) {
      if (this.setPaintStyle(a.paintStyle, b), this.setHoverPaintStyle(a.hoverPaintStyle, b), a.parameters) for (var c in a.parameters) {
        this.setParameter(c, a.parameters[c]);
      }this._jsPlumb.paintStyleInUse = this.getPaintStyle();
    }, setPaintStyle: function setPaintStyle(a, b) {
      this._jsPlumb.paintStyle = a, this._jsPlumb.paintStyleInUse = this._jsPlumb.paintStyle, f(this), b || this.repaint();
    }, getPaintStyle: function getPaintStyle() {
      return this._jsPlumb.paintStyle;
    }, setHoverPaintStyle: function setHoverPaintStyle(a, b) {
      this._jsPlumb.hoverPaintStyle = a, f(this), b || this.repaint();
    }, getHoverPaintStyle: function getHoverPaintStyle() {
      return this._jsPlumb.hoverPaintStyle;
    }, destroy: function destroy(a) {
      (a || null == this.typeId) && (this.cleanupListeners(), this.clone = null, this._jsPlumb = null);
    }, isHover: function isHover() {
      return this._jsPlumb.hover;
    }, setHover: function setHover(a, b, c) {
      if (this._jsPlumb && !this._jsPlumb.instance.currentlyDragging && !this._jsPlumb.instance.isHoverSuspended()) {
        if (this._jsPlumb.hover = a, null != this.canvas) {
          if (null != this._jsPlumb.instance.hoverClass) {
            var d = a ? "addClass" : "removeClass";this._jsPlumb.instance[d](this.canvas, this._jsPlumb.instance.hoverClass);
          }null != this._jsPlumb.hoverClass && this._jsPlumb.instance[d](this.canvas, this._jsPlumb.hoverClass);
        }null != this._jsPlumb.hoverPaintStyle && (this._jsPlumb.paintStyleInUse = a ? this._jsPlumb.hoverPaintStyle : this._jsPlumb.paintStyle, this._jsPlumb.instance.isSuspendDrawing() || (c = c || e(), this.repaint({ timestamp: c, recalc: !1 }))), this.getAttachedElements && !b && h(this, a, e(), this);
      }
    } });var o = 0,
      p = function p() {
    var a = o + 1;return o++, a;
  },
      q = b.jsPlumbInstance = function (f) {
    this.version = "2.3.2", f && r.extend(this.Defaults, f), this.logEnabled = this.Defaults.LogEnabled, this._connectionTypes = {}, this._endpointTypes = {}, d.EventGenerator.apply(this);var h = this,
        i = p(),
        j = h.bind,
        l = {},
        n = 1,
        o = function o(a) {
      if (null == a) return null;if (3 == a.nodeType || 8 == a.nodeType) return { el: a, text: !0 };var b = h.getElement(a);return { el: b, id: d.isString(a) && null == b ? a : Z(b) };
    };this.getInstanceIndex = function () {
      return i;
    }, this.setZoom = function (a, b) {
      return n = a, h.fire("zoom", n), b && h.repaintEverything(), !0;
    }, this.getZoom = function () {
      return n;
    };for (var q in this.Defaults) {
      l[q] = this.Defaults[q];
    }var s,
        t = [];this.unbindContainer = function () {
      if (null != s && t.length > 0) for (var a = 0; a < t.length; a++) {
        h.off(s, t[a][0], t[a][1]);
      }
    }, this.setContainer = function (a) {
      this.unbindContainer(), a = this.getElement(a), this.select().each(function (b) {
        b.moveParent(a);
      }), this.selectEndpoints().each(function (b) {
        b.moveParent(a);
      });var b = s;s = a, t.length = 0;for (var c = { endpointclick: "endpointClick", endpointdblclick: "endpointDblClick" }, d = function d(a, b, _d2) {
        var e = b.srcElement || b.target,
            f = (e && e.parentNode ? e.parentNode._jsPlumb : null) || (e ? e._jsPlumb : null) || (e && e.parentNode && e.parentNode.parentNode ? e.parentNode.parentNode._jsPlumb : null);if (f) {
          f.fire(a, f, b);var g = _d2 ? c[_d2 + a] || a : a;h.fire(g, f.component || f, b);
        }
      }, e = function e(a, b, c) {
        t.push([a, c]), h.on(s, a, b, c);
      }, f = function f(a) {
        e(a, ".jtk-connector", function (b) {
          d(a, b);
        }), e(a, ".jtk-endpoint", function (b) {
          d(a, b, "endpoint");
        }), e(a, ".jtk-overlay", function (b) {
          d(a, b);
        });
      }, i = 0; i < g.length; i++) {
        f(g[i]);
      }for (var j in z) {
        var k = z[j].el;k.parentNode === b && (b.removeChild(k), s.appendChild(k));
      }
    }, this.getContainer = function () {
      return s;
    }, this.bind = function (a, b) {
      "ready" === a && v ? b() : j.apply(h, [a, b]);
    }, h.importDefaults = function (a) {
      for (var b in a) {
        h.Defaults[b] = a[b];
      }return a.Container && h.setContainer(a.Container), h;
    }, h.restoreDefaults = function () {
      return h.Defaults = r.extend({}, l), h;
    };var u = null,
        v = !1,
        w = [],
        x = {},
        y = {},
        z = {},
        A = {},
        B = {},
        C = {},
        D = !1,
        E = [],
        F = !1,
        G = null,
        H = this.Defaults.Scope,
        I = 1,
        J = function J() {
      return "" + I++;
    },
        K = function (a, b) {
      s ? s.appendChild(a) : b ? this.getElement(b).appendChild(a) : this.appendToRoot(a);
    }.bind(this),
        L = function L(a, b, c, d) {
      if (!F) {
        var f,
            g = Z(a),
            i = h.getDragManager();i && (f = i.getElementsForDraggable(g)), null == c && (c = e());var j = rb({ elId: g, offset: b, recalc: !1, timestamp: c });if (f && j && j.o) for (var k in f) {
          rb({ elId: f[k].id, offset: { left: j.o.left + f[k].offset.left, top: j.o.top + f[k].offset.top }, recalc: !1, timestamp: c });
        }if (h.anchorManager.redraw(g, b, c, null, d), f) for (var l in f) {
          h.anchorManager.redraw(f[l].id, b, c, f[l].offset, d, !0);
        }
      }
    },
        M = function M(a) {
      return y[a];
    },
        N = function N(a, b, c, e, f) {
      if (!r.headless) {
        var g = null == b ? !1 : b;if (g && r.isDragSupported(a, h)) {
          var i = c || h.Defaults.DragOptions;if (i = r.extend({}, i), r.isAlreadyDraggable(a, h)) c.force && h.initDraggable(a, i);else {
            var j = r.dragEvents.drag,
                k = r.dragEvents.stop,
                l = r.dragEvents.start,
                m = !1;qb(e, a), i[l] = d.wrap(i[l], function () {
              return h.setHoverSuspended(!0), h.select({ source: a }).addClass(h.elementDraggingClass + " " + h.sourceElementDraggingClass, !0), h.select({ target: a }).addClass(h.elementDraggingClass + " " + h.targetElementDraggingClass, !0), h.setConnectionBeingDragged(!0), i.canDrag ? c.canDrag() : void 0;
            }, !1), i[j] = d.wrap(i[j], function () {
              var b = h.getUIPosition(arguments, h.getZoom());null != b && (L(a, b, null, !0), m && h.addClass(a, "jtk-dragged"), m = !0);
            }), i[k] = d.wrap(i[k], function () {
              for (var a, b = arguments[0].selection, c = function c(b) {
                null != b[1] && (a = h.getUIPosition([{ el: b[2].el, pos: [b[1].left, b[1].top] }]), L(b[2].el, a)), h.removeClass(b[0], "jtk-dragged"), h.select({ source: b[2].el }).removeClass(h.elementDraggingClass + " " + h.sourceElementDraggingClass, !0), h.select({ target: b[2].el }).removeClass(h.elementDraggingClass + " " + h.targetElementDraggingClass, !0), h.getDragManager().dragEnded(b[2].el);
              }, d = 0; d < b.length; d++) {
                c(b[d]);
              }m = !1, h.setHoverSuspended(!1), h.setConnectionBeingDragged(!1);
            });var n = Z(a);C[n] = !0;var o = C[n];i.disabled = null == o ? !1 : !o, h.initDraggable(a, i), h.getDragManager().register(a), f && h.fire("elementDraggable", { el: a, options: i });
          }
        }
      }
    },
        O = function O(a, b) {
      for (var c = a.scope.split(/\s/), d = b.scope.split(/\s/), e = 0; e < c.length; e++) {
        for (var f = 0; f < d.length; f++) {
          if (d[f] == c[e]) return !0;
        }
      }return !1;
    },
        P = function (a, b) {
      var c = r.extend({}, a);if (b && r.extend(c, b), c.source && (c.source.endpoint ? c.sourceEndpoint = c.source : c.source = h.getElement(c.source)), c.target && (c.target.endpoint ? c.targetEndpoint = c.target : c.target = h.getElement(c.target)), a.uuids && (c.sourceEndpoint = M(a.uuids[0]), c.targetEndpoint = M(a.uuids[1])), c.sourceEndpoint && c.sourceEndpoint.isFull()) return d.log(h, "could not add connection; source endpoint is full"), void 0;if (c.targetEndpoint && c.targetEndpoint.isFull()) return d.log(h, "could not add connection; target endpoint is full"), void 0;if (!c.type && c.sourceEndpoint && (c.type = c.sourceEndpoint.connectionType), c.sourceEndpoint && c.sourceEndpoint.connectorOverlays) {
        c.overlays = c.overlays || [];for (var e = 0, f = c.sourceEndpoint.connectorOverlays.length; f > e; e++) {
          c.overlays.push(c.sourceEndpoint.connectorOverlays[e]);
        }
      }c.sourceEndpoint && c.sourceEndpoint.scope && (c.scope = c.sourceEndpoint.scope), !c["pointer-events"] && c.sourceEndpoint && c.sourceEndpoint.connectorPointerEvents && (c["pointer-events"] = c.sourceEndpoint.connectorPointerEvents);var g = function g(a, b) {
        var c = r.extend({}, a);for (var d in b) {
          b[d] && (c[d] = b[d]);
        }return c;
      },
          i = function i(a, b, d) {
        return h.addEndpoint(a, g(b, { anchor: c.anchors ? c.anchors[d] : c.anchor, endpoint: c.endpoints ? c.endpoints[d] : c.endpoint, paintStyle: c.endpointStyles ? c.endpointStyles[d] : c.endpointStyle, hoverPaintStyle: c.endpointHoverStyles ? c.endpointHoverStyles[d] : c.endpointHoverStyle }));
      },
          j = function j(a, b, d, e) {
        if (c[a] && !c[a].endpoint && !c[a + "Endpoint"] && !c.newConnection) {
          var f = Z(c[a]),
              g = d[f];if (g = g ? g[e] : null) {
            if (!g.enabled) return !1;var h = null != g.endpoint && g.endpoint._jsPlumb ? g.endpoint : i(c[a], g.def, b);if (h.isFull()) return !1;c[a + "Endpoint"] = h, !c.scope && g.def.scope && (c.scope = g.def.scope), h._doNotDeleteOnDetach = !1, h._deleteOnDetach = !0, g.uniqueEndpoint && (g.endpoint ? h.finalEndpoint = g.endpoint : (g.endpoint = h, h._deleteOnDetach = !1, h._doNotDeleteOnDetach = !0));
          }
        }
      };return j("source", 0, this.sourceEndpointDefinitions, c.type || "default") !== !1 && j("target", 1, this.targetEndpointDefinitions, c.type || "default") !== !1 ? (c.sourceEndpoint && c.targetEndpoint && (O(c.sourceEndpoint, c.targetEndpoint) || (c = null)), c) : void 0;
    }.bind(h),
        Q = function Q(a) {
      var b = h.Defaults.ConnectionType || h.getDefaultConnectionType();a._jsPlumb = h, a.newConnection = Q, a.newEndpoint = S, a.endpointsByUUID = y, a.endpointsByElement = x, a.finaliseConnection = R, a.id = "con_" + J();var c = new b(a);return c.isDetachable() && (c.endpoints[0].initDraggable("_jsPlumbSource"), c.endpoints[1].initDraggable("_jsPlumbTarget")), c;
    },
        R = h.finaliseConnection = function (a, b, c, d) {
      if (b = b || {}, a.suspendedEndpoint || w.push(a), a.pending = null, a.endpoints[0].isTemporarySource = !1, d !== !1 && h.anchorManager.newConnection(a), L(a.source), !b.doNotFireConnectionEvent && b.fireEvent !== !1) {
        var e = { connection: a, source: a.source, target: a.target, sourceId: a.sourceId, targetId: a.targetId, sourceEndpoint: a.endpoints[0], targetEndpoint: a.endpoints[1] };h.fire("connection", e, c);
      }
    },
        S = function S(a, b) {
      var c = h.Defaults.EndpointType || r.Endpoint,
          d = r.extend({}, a);d._jsPlumb = h, d.newConnection = Q, d.newEndpoint = S, d.endpointsByUUID = y, d.endpointsByElement = x, d.fireDetachEvent = ab, d.elementId = b || Z(d.source);var e = new c(d);return e.id = "ep_" + J(), qb(d.elementId, d.source), r.headless || h.getDragManager().endpointAdded(d.source, b), e;
    },
        T = function T(a, b, c) {
      var d = x[a];if (d && d.length) for (var e = 0, f = d.length; f > e; e++) {
        for (var g = 0, h = d[e].connections.length; h > g; g++) {
          var i = b(d[e].connections[g]);if (i) return;
        }c && c(d[e]);
      }
    },
        U = function U(a, b) {
      return r.each(a, function (a) {
        h.isDragSupported(a) && (C[h.getAttribute(a, "id")] = b, h.setElementDraggable(a, b));
      });
    },
        V = function V(a, b, c) {
      b = "block" === b;var d = null;c && (d = function d(a) {
        a.setVisible(b, !0, !0);
      });var e = o(a);T(e.id, function (a) {
        if (b && c) {
          var d = a.sourceId === e.id ? 1 : 0;a.endpoints[d].isVisible() && a.setVisible(!0);
        } else a.setVisible(b);
      }, d);
    },
        W = function W(a) {
      var b;return r.each(a, function (a) {
        var c = h.getAttribute(a, "id");return b = null == C[c] ? !1 : C[c], b = !b, C[c] = b, h.setDraggable(a, b), b;
      }.bind(this)), b;
    },
        X = function X(a, b) {
      var c = null;b && (c = function c(a) {
        var b = a.isVisible();a.setVisible(!b);
      }), T(a, function (a) {
        var b = a.isVisible();a.setVisible(!b);
      }, c);
    },
        Y = function Y(a) {
      var b = A[a];return b ? { o: b, s: E[a] } : rb({ elId: a });
    },
        Z = function Z(a, b, c) {
      if (d.isString(a)) return a;if (null == a) return null;var e = h.getAttribute(a, "id");return e && "undefined" !== e || (2 == arguments.length && void 0 !== arguments[1] ? e = b : (1 == arguments.length || 3 == arguments.length && !arguments[2]) && (e = "jsPlumb_" + i + "_" + J()), c || h.setAttribute(a, "id", e)), e;
    };this.setConnectionBeingDragged = function (a) {
      D = a;
    }, this.isConnectionBeingDragged = function () {
      return D;
    }, this.getManagedElements = function () {
      return z;
    }, this.connectorClass = "jtk-connector", this.connectorOutlineClass = "jtk-connector-outline", this.editableConnectorClass = "jtk-connector-editable", this.connectedClass = "jtk-connected", this.hoverClass = "jtk-hover", this.endpointClass = "jtk-endpoint", this.endpointConnectedClass = "jtk-endpoint-connected", this.endpointFullClass = "jtk-endpoint-full", this.endpointDropAllowedClass = "jtk-endpoint-drop-allowed", this.endpointDropForbiddenClass = "jtk-endpoint-drop-forbidden", this.overlayClass = "jtk-overlay", this.draggingClass = "jtk-dragging", this.elementDraggingClass = "jtk-element-dragging", this.sourceElementDraggingClass = "jtk-source-element-dragging", this.targetElementDraggingClass = "jtk-target-element-dragging", this.endpointAnchorClassPrefix = "jtk-endpoint-anchor", this.hoverSourceClass = "jtk-source-hover", this.hoverTargetClass = "jtk-target-hover", this.dragSelectClass = "jtk-drag-select", this.Anchors = {}, this.Connectors = { svg: {} }, this.Endpoints = { svg: {} }, this.Overlays = { svg: {} }, this.ConnectorRenderers = {}, this.SVG = "svg", this.addEndpoint = function (a, b, c) {
      c = c || {};var e = r.extend({}, c);r.extend(e, b), e.endpoint = e.endpoint || h.Defaults.Endpoint, e.paintStyle = e.paintStyle || h.Defaults.EndpointStyle;for (var f = [], g = d.isArray(a) || null != a.length && !d.isString(a) ? a : [a], i = 0, j = g.length; j > i; i++) {
        e.source = h.getElement(g[i]), ob(e.source);var k = Z(e.source),
            l = S(e, k),
            m = qb(k, e.source).info.o;d.addToList(x, k, l), F || l.paint({ anchorLoc: l.anchor.compute({ xy: [m.left, m.top], wh: E[k], element: l, timestamp: G }), timestamp: G }), f.push(l), l._doNotDeleteOnDetach = !0;
      }return 1 == f.length ? f[0] : f;
    }, this.addEndpoints = function (a, b, c) {
      for (var e = [], f = 0, g = b.length; g > f; f++) {
        var i = h.addEndpoint(a, b[f], c);d.isArray(i) ? Array.prototype.push.apply(e, i) : e.push(i);
      }return e;
    }, this.animate = function (a, b, c) {
      if (!this.animationSupported) return !1;c = c || {};var e = h.getElement(a),
          f = Z(e),
          g = r.animEvents.step,
          i = r.animEvents.complete;c[g] = d.wrap(c[g], function () {
        h.revalidate(f);
      }), c[i] = d.wrap(c[i], function () {
        h.revalidate(f);
      }), h.doAnimate(e, b, c);
    }, this.checkCondition = function (a) {
      var b = h.getListener(a),
          c = !0;if (b && b.length > 0) {
        var e = Array.prototype.slice.call(arguments, 1);try {
          for (var f = 0, g = b.length; g > f; f++) {
            c = c && b[f].apply(b[f], e);
          }
        } catch (i) {
          d.log(h, "cannot check condition [" + a + "]" + i);
        }
      }return c;
    }, this.connect = function (a, b) {
      var c,
          e = P(a, b);if (e) {
        if (null == e.source && null == e.sourceEndpoint) return d.log("Cannot establish connection - source does not exist"), void 0;if (null == e.target && null == e.targetEndpoint) return d.log("Cannot establish connection - target does not exist"), void 0;ob(e.source), c = Q(e), R(c, e);
      }return c;
    };var $ = [{ el: "source", elId: "sourceId", epDefs: "sourceEndpointDefinitions" }, { el: "target", elId: "targetId", epDefs: "targetEndpointDefinitions" }],
        _ = function (a, b, c, d) {
      var e,
          f,
          g,
          h = $[c],
          i = a[h.elId],
          j = (a[h.el], a.endpoints[c]),
          k = { index: c, originalSourceId: 0 === c ? i : a.sourceId, newSourceId: a.sourceId, originalTargetId: 1 == c ? i : a.targetId, newTargetId: a.targetId, connection: a };if (b.constructor == r.Endpoint) e = b, e.addConnection(a), b = e.element;else if (f = Z(b), g = this[h.epDefs][f], f === a[h.elId]) e = null;else if (g) for (var l in g) {
        if (!g[l].enabled) return;e = null != g[l].endpoint && g[l].endpoint._jsPlumb ? g[l].endpoint : this.addEndpoint(b, g[l].def), g[l].uniqueEndpoint && (g[l].endpoint = e), e._doNotDeleteOnDetach = !1, e._deleteOnDetach = !0, e.addConnection(a);
      } else e = a.makeEndpoint(0 === c, b, f), e._doNotDeleteOnDetach = !1, e._deleteOnDetach = !0;return null != e && (j.detachFromConnection(a), a.endpoints[c] = e, a[h.el] = e.element, a[h.elId] = e.elementId, k[0 === c ? "newSourceId" : "newTargetId"] = e.elementId, bb(k), d || a.repaint()), k.element = b, k;
    }.bind(this);this.setSource = function (a, b, c) {
      var d = _(a, b, 0, c);this.anchorManager.sourceChanged(d.originalSourceId, d.newSourceId, a, d.el);
    }, this.setTarget = function (a, b, c) {
      var d = _(a, b, 1, c);this.anchorManager.updateOtherEndpoint(d.originalSourceId, d.originalTargetId, d.newTargetId, a);
    }, this.deleteEndpoint = function (a, b, c) {
      var d = "string" == typeof a ? y[a] : a;return d && h.deleteObject({ endpoint: d, dontUpdateHover: b, deleteAttachedObjects: c }), h;
    }, this.deleteEveryEndpoint = function () {
      var a = h.setSuspendDrawing(!0);for (var b in x) {
        var c = x[b];if (c && c.length) for (var d = 0, e = c.length; e > d; d++) {
          h.deleteEndpoint(c[d], !0);
        }
      }return x = {}, z = {}, y = {}, A = {}, B = {}, h.anchorManager.reset(), h.getDragManager().reset(), a || h.setSuspendDrawing(!1), h;
    };var ab = function ab(a, b, c) {
      var d = h.Defaults.ConnectionType || h.getDefaultConnectionType(),
          e = a.constructor == d,
          f = e ? { connection: a, source: a.source, target: a.target, sourceId: a.sourceId, targetId: a.targetId, sourceEndpoint: a.endpoints[0], targetEndpoint: a.endpoints[1] } : a;b && h.fire("connectionDetached", f, c), h.fire("internal.connectionDetached", f, c), h.anchorManager.connectionDetached(f);
    },
        bb = h.fireMoveEvent = function (a, b) {
      h.fire("connectionMoved", a, b);
    };this.unregisterEndpoint = function (a) {
      a._jsPlumb.uuid && (y[a._jsPlumb.uuid] = null), h.anchorManager.deleteEndpoint(a);for (var b in x) {
        var c = x[b];if (c) {
          for (var d = [], e = 0, f = c.length; f > e; e++) {
            c[e] != a && d.push(c[e]);
          }x[b] = d;
        }x[b].length < 1 && delete x[b];
      }
    }, this.detach = function () {
      if (0 !== arguments.length) {
        var a = h.Defaults.ConnectionType || h.getDefaultConnectionType(),
            b = arguments[0].constructor == a,
            c = 2 == arguments.length ? b ? arguments[1] || {} : arguments[0] : arguments[0],
            e = c.fireEvent !== !1,
            f = c.forceDetach,
            g = b ? arguments[0] : c.connection,
            i = b ? null : c.deleteAttachedObjects;if (g) (f || d.functionChain(!0, !1, [[g.endpoints[0], "isDetachAllowed", [g]], [g.endpoints[1], "isDetachAllowed", [g]], [g, "isDetachAllowed", [g]], [h, "checkCondition", ["beforeDetach", g]]])) && g.endpoints[0].detach({ connection: g, ignoreTarget: !1, forceDetach: !0, fireEvent: e, deleteAttachedObjects: i });else {
          var j = r.extend({}, c);if (j.uuids) M(j.uuids[0]).detachFrom(M(j.uuids[1]), e);else if (j.sourceEndpoint && j.targetEndpoint) j.sourceEndpoint.detachFrom(j.targetEndpoint);else {
            var k = Z(h.getElement(j.source)),
                l = Z(h.getElement(j.target));T(k, function (a) {
              (a.sourceId == k && a.targetId == l || a.targetId == k && a.sourceId == l) && h.checkCondition("beforeDetach", a) && a.endpoints[0].detach({ connection: a, ignoreTarget: !1, forceDetach: !0, fireEvent: e });
            });
          }
        }
      }
    }, this.detachAllConnections = function (a, b) {
      b = b || {}, a = h.getElement(a);var c = Z(a),
          d = x[c];if (d && d.length) for (var e = 0, f = d.length; f > e; e++) {
        d[e].detachAll(b.fireEvent !== !1, b.forceDetach);
      }return h;
    }, this.detachEveryConnection = function (a) {
      return a = a || {}, h.batch(function () {
        for (var b in x) {
          var c = x[b];if (c && c.length) for (var d = 0, e = c.length; e > d; d++) {
            c[d].detachAll(a.fireEvent !== !1, a.forceDetach);
          }
        }w.length = 0;
      }), h;
    }, this.deleteObject = function (a) {
      var b = { endpoints: {}, connections: {}, endpointCount: 0, connectionCount: 0 },
          c = (a.fireEvent !== !1, a.deleteAttachedObjects !== !1),
          e = function e(d) {
        if (null != d && null == b.connections[d.id] && (a.dontUpdateHover || null == d._jsPlumb || d.setHover(!1), b.connections[d.id] = d, b.connectionCount++, c)) for (var e = 0; e < d.endpoints.length; e++) {
          d.endpoints[e]._deleteOnDetach && f(d.endpoints[e]);
        }
      },
          f = function f(d) {
        if (null != d && null == b.endpoints[d.id] && (a.dontUpdateHover || null == d._jsPlumb || d.setHover(!1), b.endpoints[d.id] = d, b.endpointCount++, c)) for (var f = 0; f < d.connections.length; f++) {
          var g = d.connections[f];e(g);
        }
      };a.connection ? e(a.connection) : f(a.endpoint);for (var g in b.connections) {
        var i = b.connections[g];if (i._jsPlumb) {
          d.removeWithFunction(w, function (a) {
            return i.id == a.id;
          }), ab(i, a.fireEvent === !1 ? !1 : !i.pending, a.originalEvent);var j = null == a.deleteAttachedObjects ? null : !a.deleteAttachedObjects;i.endpoints[0].detachFromConnection(i, null, j), i.endpoints[1].detachFromConnection(i, null, j), i.cleanup(!0), i.destroy(!0);
        }
      }for (var k in b.endpoints) {
        var l = b.endpoints[k];l._jsPlumb && (h.unregisterEndpoint(l), l.cleanup(!0), l.destroy(!0));
      }return b;
    }, this.draggable = function (a, b) {
      var c;return k(function (a) {
        c = o(a), c.el && N(c.el, !0, b, c.id, !0);
      }, a), h;
    }, this.droppable = function (a, b) {
      var c;return b = b || {}, b.allowLoopback = !1, k(function (a) {
        c = o(a), c.el && h.initDroppable(c.el, b);
      }, a), h;
    };var cb = function cb(a, b, c, d) {
      for (var e = 0, f = a.length; f > e; e++) {
        a[e][b].apply(a[e], c);
      }return d(a);
    },
        db = function db(a, b, c) {
      for (var d = [], e = 0, f = a.length; f > e; e++) {
        d.push([a[e][b].apply(a[e], c), a[e]]);
      }return d;
    },
        eb = function eb(a, b, c) {
      return function () {
        return cb(a, b, arguments, c);
      };
    },
        fb = function fb(a, b) {
      return function () {
        return db(a, b, arguments);
      };
    },
        gb = function gb(a, b) {
      var c = [];if (a) if ("string" == typeof a) {
        if ("*" === a) return a;c.push(a);
      } else if (b) c = a;else if (a.length) for (var d = 0, e = a.length; e > d; d++) {
        c.push(o(a[d]).id);
      } else c.push(o(a).id);return c;
    },
        hb = function hb(a, b, c) {
      return "*" === a ? !0 : a.length > 0 ? -1 != a.indexOf(b) : !c;
    };this.getConnections = function (a, b) {
      a ? a.constructor == String && (a = { scope: a }) : a = {};for (var c = a.scope || h.getDefaultScope(), d = gb(c, !0), e = gb(a.source), f = gb(a.target), g = !b && d.length > 1 ? {} : [], i = function i(a, c) {
        if (!b && d.length > 1) {
          var e = g[a];null == e && (e = g[a] = []), e.push(c);
        } else g.push(c);
      }, j = 0, k = w.length; k > j; j++) {
        var l = w[j],
            m = l.proxies && l.proxies[0] ? l.proxies[0].originalEp.elementId : l.sourceId,
            n = l.proxies && l.proxies[1] ? l.proxies[1].originalEp.elementId : l.targetId;hb(d, l.scope) && hb(e, m) && hb(f, n) && i(l.scope, l);
      }return g;
    };var ib = function ib(a, b) {
      return function (c) {
        for (var d = 0, e = a.length; e > d; d++) {
          c(a[d]);
        }return b(a);
      };
    },
        jb = function jb(a) {
      return function (b) {
        return a[b];
      };
    },
        kb = function kb(a, b) {
      var c,
          d,
          e = { length: a.length, each: ib(a, b), get: jb(a) },
          f = ["setHover", "removeAllOverlays", "setLabel", "addClass", "addOverlay", "removeOverlay", "removeOverlays", "showOverlay", "hideOverlay", "showOverlays", "hideOverlays", "setPaintStyle", "setHoverPaintStyle", "setSuspendEvents", "setParameter", "setParameters", "setVisible", "repaint", "addType", "toggleType", "removeType", "removeClass", "setType", "bind", "unbind"],
          g = ["getLabel", "getOverlay", "isHover", "getParameter", "getParameters", "getPaintStyle", "getHoverPaintStyle", "isVisible", "hasType", "getType", "isSuspendEvents"];for (c = 0, d = f.length; d > c; c++) {
        e[f[c]] = eb(a, f[c], b);
      }for (c = 0, d = g.length; d > c; c++) {
        e[g[c]] = fb(a, g[c]);
      }return e;
    },
        lb = function lb(a) {
      var b = kb(a, lb);return r.extend(b, { setDetachable: eb(a, "setDetachable", lb), setReattach: eb(a, "setReattach", lb), setConnector: eb(a, "setConnector", lb), detach: function detach() {
          for (var b = 0, c = a.length; c > b; b++) {
            h.detach(a[b]);
          }
        }, isDetachable: fb(a, "isDetachable"), isReattach: fb(a, "isReattach") });
    },
        mb = function mb(a) {
      var b = kb(a, mb);return r.extend(b, { setEnabled: eb(a, "setEnabled", mb), setAnchor: eb(a, "setAnchor", mb), isEnabled: fb(a, "isEnabled"), detachAll: function detachAll() {
          for (var b = 0, c = a.length; c > b; b++) {
            a[b].detachAll();
          }
        }, remove: function remove() {
          for (var b = 0, c = a.length; c > b; b++) {
            h.deleteObject({ endpoint: a[b] });
          }
        } });
    };this.select = function (a) {
      return a = a || {}, a.scope = a.scope || "*", lb(a.connections || h.getConnections(a, !0));
    }, this.selectEndpoints = function (a) {
      a = a || {}, a.scope = a.scope || "*";var b = !a.element && !a.source && !a.target,
          c = b ? "*" : gb(a.element),
          d = b ? "*" : gb(a.source),
          e = b ? "*" : gb(a.target),
          f = gb(a.scope, !0),
          g = [];for (var h in x) {
        var i = hb(c, h, !0),
            j = hb(d, h, !0),
            k = "*" != d,
            l = hb(e, h, !0),
            m = "*" != e;if (i || j || l) a: for (var n = 0, o = x[h].length; o > n; n++) {
          var p = x[h][n];if (hb(f, p.scope, !0)) {
            var q = k && d.length > 0 && !p.isSource,
                r = m && e.length > 0 && !p.isTarget;if (q || r) continue a;g.push(p);
          }
        }
      }return mb(g);
    }, this.getAllConnections = function () {
      return w;
    }, this.getDefaultScope = function () {
      return H;
    }, this.getEndpoint = M, this.getEndpoints = function (a) {
      return x[o(a).id];
    }, this.getDefaultEndpointType = function () {
      return r.Endpoint;
    }, this.getDefaultConnectionType = function () {
      return r.Connection;
    }, this.getId = Z, this.appendElement = K;var nb = !1;this.isHoverSuspended = function () {
      return nb;
    }, this.setHoverSuspended = function (a) {
      nb = a;
    }, this.hide = function (a, b) {
      return V(a, "none", b), h;
    }, this.idstamp = J, this.connectorsInitialized = !1, this.registerConnectorType = function (a, b) {
      c.push([a, b]);
    };var ob = function ob(a) {
      if (!s && a) {
        var b = h.getElement(a);b.offsetParent && h.setContainer(b.offsetParent);
      }
    },
        pb = function pb() {
      h.Defaults.Container && h.setContainer(h.Defaults.Container);
    },
        qb = h.manage = function (a, b, c) {
      return z[a] || (z[a] = { el: b, endpoints: [], connections: [] }, z[a].info = rb({ elId: a, timestamp: G }), c || h.fire("manageElement", { id: a, info: z[a].info, el: b })), z[a];
    },
        rb = this.updateOffset = function (a) {
      var b,
          c = a.timestamp,
          d = a.recalc,
          e = a.offset,
          f = a.elId;return F && !c && (c = G), !d && c && c === B[f] ? { o: a.offset || A[f], s: E[f] } : (d || !e && null == A[f] ? (b = z[f] ? z[f].el : null, null != b && (E[f] = h.getSize(b), A[f] = h.getOffset(b), B[f] = c)) : (A[f] = e || A[f], null == E[f] && (b = z[f].el, null != b && (E[f] = h.getSize(b))), B[f] = c), A[f] && !A[f].right && (A[f].right = A[f].left + E[f][0], A[f].bottom = A[f].top + E[f][1], A[f].width = E[f][0], A[f].height = E[f][1], A[f].centerx = A[f].left + A[f].width / 2, A[f].centery = A[f].top + A[f].height / 2), { o: A[f], s: E[f] });
    };this.init = function () {
      a = b.jsPlumb.getRenderModes();var e = function e(a, c, _e) {
        b.jsPlumb.Connectors[a][c] = function () {
          _e.apply(this, arguments), b.jsPlumb.ConnectorRenderers[a].apply(this, arguments);
        }, d.extend(b.jsPlumb.Connectors[a][c], [_e, b.jsPlumb.ConnectorRenderers[a]]);
      };if (!b.jsPlumb.connectorsInitialized) {
        for (var f = 0; f < c.length; f++) {
          for (var g = 0; g < a.length; g++) {
            e(a[g], c[f][1], c[f][0]);
          }
        }b.jsPlumb.connectorsInitialized = !0;
      }v || (pb(), h.anchorManager = new b.jsPlumb.AnchorManager({ jsPlumbInstance: h }), v = !0, h.fire("ready", h));
    }.bind(this), this.log = u, this.jsPlumbUIComponent = m, this.makeAnchor = function () {
      var a,
          c = function c(a, _c2) {
        if (b.jsPlumb.Anchors[a]) return new b.jsPlumb.Anchors[a](_c2);if (!h.Defaults.DoNotThrowErrors) throw { msg: "jsPlumb: unknown anchor type '" + a + "'" };
      };if (0 === arguments.length) return null;var e = arguments[0],
          f = arguments[1],
          g = (arguments[2], null);if (e.compute && e.getOrientation) return e;if ("string" == typeof e) g = c(arguments[0], { elementId: f, jsPlumbInstance: h });else if (d.isArray(e)) if (d.isArray(e[0]) || d.isString(e[0])) 2 == e.length && d.isObject(e[1]) ? d.isString(e[0]) ? (a = b.jsPlumb.extend({ elementId: f, jsPlumbInstance: h }, e[1]), g = c(e[0], a)) : (a = b.jsPlumb.extend({ elementId: f, jsPlumbInstance: h, anchors: e[0] }, e[1]), g = new b.jsPlumb.DynamicAnchor(a)) : g = new r.DynamicAnchor({ anchors: e, selector: null, elementId: f, jsPlumbInstance: h });else {
        var i = { x: e[0], y: e[1], orientation: e.length >= 4 ? [e[2], e[3]] : [0, 0], offsets: e.length >= 6 ? [e[4], e[5]] : [0, 0], elementId: f, jsPlumbInstance: h, cssClass: 7 == e.length ? e[6] : null };g = new b.jsPlumb.Anchor(i), g.clone = function () {
          return new b.jsPlumb.Anchor(i);
        };
      }return g.id || (g.id = "anchor_" + J()), g;
    }, this.makeAnchors = function (a, c, e) {
      for (var f = [], g = 0, i = a.length; i > g; g++) {
        "string" == typeof a[g] ? f.push(b.jsPlumb.Anchors[a[g]]({ elementId: c, jsPlumbInstance: e })) : d.isArray(a[g]) && f.push(h.makeAnchor(a[g], c, e));
      }return f;
    }, this.makeDynamicAnchor = function (a, c) {
      return new b.jsPlumb.DynamicAnchor({ anchors: a, selector: c, elementId: null, jsPlumbInstance: h });
    }, this.targetEndpointDefinitions = {}, this.sourceEndpointDefinitions = {};var sb = function sb(a, b, c, d, e) {
      for (var f = a.target || a.srcElement, g = !1, h = d.getSelector(b, c), i = 0; i < h.length; i++) {
        if (h[i] == f) {
          g = !0;break;
        }
      }return e ? !g : g;
    },
        tb = function tb(a, c, e, f, g) {
      var i = new m(c),
          j = c._jsPlumb.EndpointDropHandler({ jsPlumb: h, enabled: function enabled() {
          return a.def.enabled;
        }, isFull: function isFull() {
          var b = h.select({ target: a.id }).length;return a.def.maxConnections > 0 && b >= a.def.maxConnections;
        }, element: a.el, elementId: a.id, isSource: f, isTarget: g, addClass: function addClass(b) {
          h.addClass(a.el, b);
        }, removeClass: function removeClass(b) {
          h.removeClass(a.el, b);
        }, onDrop: function onDrop(a) {
          var b = a.endpoints[0];b.anchor.locked = !1;
        }, isDropAllowed: function isDropAllowed() {
          return i.isDropAllowed.apply(i, arguments);
        }, isRedrop: function isRedrop(b) {
          return null != b.suspendedElement && null != b.suspendedEndpoint && b.suspendedEndpoint.element === a.el;
        }, getEndpoint: function getEndpoint(d) {
          var e = a.def.endpoint;if (null == e || null == e._jsPlumb) {
            var f = h.deriveEndpointAndAnchorSpec(d.getType().join(" "), !0),
                g = f.endpoints ? b.jsPlumb.extend(c, { endpoint: a.def.def.endpoint || f.endpoints[1] }) : c;f.anchors && (g = b.jsPlumb.extend(g, { anchor: a.def.def.anchor || f.anchors[1] })), e = h.addEndpoint(a.el, g), e._mtNew = !0;
          }if (c.uniqueEndpoint && (a.def.endpoint = e), e._doNotDeleteOnDetach = !1, e._deleteOnDetach = !0, d.isDetachable() && e.initDraggable(), null != e.anchor.positionFinder) {
            var i = h.getUIPosition(arguments, h.getZoom()),
                j = h.getOffset(a.el),
                k = h.getSize(a.el),
                l = null == i ? [0, 0] : e.anchor.positionFinder(i, j, k, e.anchor.constructorParams);e.anchor.x = l[0], e.anchor.y = l[1];
          }return e;
        }, maybeCleanup: function maybeCleanup(a) {
          a._mtNew && 0 === a.connections.length ? h.deleteObject({ endpoint: a }) : delete a._mtNew;
        } }),
          k = b.jsPlumb.dragEvents.drop;return e.scope = e.scope || c.scope || h.Defaults.Scope, e[k] = d.wrap(e[k], j, !0), g && (e[b.jsPlumb.dragEvents.over] = function () {
        return !0;
      }), c.allowLoopback === !1 && (e.canDrop = function (b) {
        var c = b.getDragElement()._jsPlumbRelatedElement;return c != a.el;
      }), h.initDroppable(a.el, e, "internal"), j;
    };this.makeTarget = function (a, c, d) {
      var e = b.jsPlumb.extend({ _jsPlumb: this }, d);b.jsPlumb.extend(e, c);for (var f = e.maxConnections || -1, g = function (a) {
        var c = o(a),
            d = c.id,
            g = b.jsPlumb.extend({}, e.dropOptions || {}),
            h = e.connectionType || "default";this.targetEndpointDefinitions[d] = this.targetEndpointDefinitions[d] || {}, ob(d), c.el._isJsPlumbGroup && null == g.rank && (g.rank = -1);var i = { def: b.jsPlumb.extend({}, e), uniqueEndpoint: e.uniqueEndpoint, maxConnections: f, enabled: !0 };c.def = i, this.targetEndpointDefinitions[d][h] = i, tb(c, e, g, e.isSource === !0, !0), c.el._katavorioDrop[c.el._katavorioDrop.length - 1].targetDef = i;
      }.bind(this), h = a.length && a.constructor != String ? a : [a], i = 0, j = h.length; j > i; i++) {
        g(h[i]);
      }return this;
    }, this.unmakeTarget = function (a, b) {
      var c = o(a);return h.destroyDroppable(c.el, "internal"), b || delete this.targetEndpointDefinitions[c.id], this;
    }, this.makeSource = function (a, c, e) {
      var f = b.jsPlumb.extend({ _jsPlumb: this }, e);b.jsPlumb.extend(f, c);var g = f.connectionType || "default",
          i = h.deriveEndpointAndAnchorSpec(g);f.endpoint = f.endpoint || i.endpoints[0], f.anchor = f.anchor || i.anchors[0];for (var j = f.maxConnections || -1, k = f.onMaxConnections, l = function (a) {
        var c = a.id,
            e = this.getElement(a.el);this.sourceEndpointDefinitions[c] = this.sourceEndpointDefinitions[c] || {}, ob(c);var i = { def: b.jsPlumb.extend({}, f), uniqueEndpoint: f.uniqueEndpoint, maxConnections: j, enabled: !0 };this.sourceEndpointDefinitions[c][g] = i, a.def = i;var l = b.jsPlumb.dragEvents.stop,
            m = b.jsPlumb.dragEvents.drag,
            o = b.jsPlumb.extend({}, f.dragOptions || {}),
            p = o.drag,
            q = o.stop,
            r = null,
            s = !1;o.scope = o.scope || f.scope, o[m] = d.wrap(o[m], function () {
          p && p.apply(this, arguments), s = !1;
        }), o[l] = d.wrap(o[l], function () {
          if (q && q.apply(this, arguments), this.currentlyDragging = !1, null != r._jsPlumb) {
            var a = f.anchor || this.Defaults.Anchor,
                b = r.anchor,
                d = r.connections[0],
                e = this.makeAnchor(a, c, this),
                g = r.element;if (null != e.positionFinder) {
              var i = h.getOffset(g),
                  j = this.getSize(g),
                  k = { left: i.left + b.x * j[0], top: i.top + b.y * j[1] },
                  l = e.positionFinder(k, i, j, e.constructorParams);e.x = l[0], e.y = l[1];
            }r.setAnchor(e, !0), r.repaint(), this.repaint(r.elementId), null != d && this.repaint(d.targetId);
          }
        }.bind(this));var t = function (i) {
          if (3 !== i.which && 2 !== i.button) {
            var l = this.sourceEndpointDefinitions[c][g];if (l.enabled) {
              if (c = this.getId(this.getElement(a.el)), f.filter) {
                var m = d.isString(f.filter) ? sb(i, a.el, f.filter, this, f.filterExclude) : f.filter(i, a.el);if (m === !1) return;
              }var p = this.select({ source: c }).length;if (l.maxConnections >= 0 && p >= l.maxConnections) return k && k({ element: a.el, maxConnections: j }, i), !1;var q = b.jsPlumb.getPositionOnElement(i, e, n),
                  t = {};b.jsPlumb.extend(t, f), t.isTemporarySource = !0, t.anchor = [q[0], q[1], 0, 0], t.dragOptions = o, l.def.scope && (t.scope = l.def.scope), r = this.addEndpoint(c, t), s = !0, r._doNotDeleteOnDetach = !1, r._deleteOnDetach = !0, l.uniqueEndpoint && (l.endpoint ? r.finalEndpoint = l.endpoint : (l.endpoint = r, r._deleteOnDetach = !1, r._doNotDeleteOnDetach = !0));var u = function u() {
                h.off(r.canvas, "mouseup", u), h.off(a.el, "mouseup", u), s && (s = !1, h.deleteEndpoint(r));
              };h.on(r.canvas, "mouseup", u), h.on(a.el, "mouseup", u);var v = {};if (l.def.extract) for (var w in l.def.extract) {
                var x = (i.srcElement || i.target).getAttribute(w);x && (v[l.def.extract[w]] = x);
              }h.trigger(r.canvas, "mousedown", i, v), d.consume(i);
            }
          }
        }.bind(this);this.on(a.el, "mousedown", t), i.trigger = t, f.filter && (d.isString(f.filter) || d.isFunction(f.filter)) && h.setDragFilter(a.el, f.filter);var u = b.jsPlumb.extend({}, f.dropOptions || {});tb(a, f, u, !0, f.isTarget === !0);
      }.bind(this), m = a.length && a.constructor != String ? a : [a], p = 0, q = m.length; q > p; p++) {
        l(o(m[p]));
      }return this;
    }, this.unmakeSource = function (a, b, c) {
      var d = o(a);h.destroyDroppable(d.el, "internal");var e = this.sourceEndpointDefinitions[d.id];if (e) for (var f in e) {
        if (null == b || b === f) {
          var g = e[f].trigger;g && h.off(d.el, "mousedown", g), c || delete this.sourceEndpointDefinitions[d.id][f];
        }
      }return this;
    }, this.unmakeEverySource = function () {
      for (var a in this.sourceEndpointDefinitions) {
        h.unmakeSource(a, null, !0);
      }return this.sourceEndpointDefinitions = {}, this;
    };var ub = function (a, b, c) {
      b = d.isArray(b) ? b : [b];var e = Z(a);c = c || "default";for (var f = 0; f < b.length; f++) {
        var g = this[b[f]][e];if (g && g[c]) return g[c].def.scope || this.Defaults.Scope;
      }
    }.bind(this),
        vb = function (a, b, c, e) {
      c = d.isArray(c) ? c : [c];var f = Z(a);e = e || "default";for (var g = 0; g < c.length; g++) {
        var h = this[c[g]][f];h && h[e] && (h[e].def.scope = b);
      }
    }.bind(this);this.getScope = function (a) {
      return ub(a, ["sourceEndpointDefinitions", "targetEndpointDefinitions"]);
    }, this.getSourceScope = function (a) {
      return ub(a, "sourceEndpointDefinitions");
    }, this.getTargetScope = function (a) {
      return ub(a, "targetEndpointDefinitions");
    }, this.setScope = function (a, b, c) {
      this.setSourceScope(a, b, c), this.setTargetScope(a, b, c);
    }, this.setSourceScope = function (a, b, c) {
      vb(a, b, "sourceEndpointDefinitions", c), this.setDragScope(a, b);
    }, this.setTargetScope = function (a, b, c) {
      vb(a, b, "targetEndpointDefinitions", c), this.setDropScope(a, b);
    }, this.unmakeEveryTarget = function () {
      for (var a in this.targetEndpointDefinitions) {
        h.unmakeTarget(a, !0);
      }return this.targetEndpointDefinitions = {}, this;
    };var wb = function (a, b, c, e, f) {
      var g,
          i,
          j,
          k = "source" == a ? this.sourceEndpointDefinitions : this.targetEndpointDefinitions;if (f = f || "default", b.length && !d.isString(b)) {
        g = [];for (var l = 0, m = b.length; m > l; l++) {
          i = o(b[l]), k[i.id] && k[i.id][f] && (g[l] = k[i.id][f].enabled, j = e ? !g[l] : c, k[i.id][f].enabled = j, h[j ? "removeClass" : "addClass"](i.el, "jtk-" + a + "-disabled"));
        }
      } else {
        i = o(b);var n = i.id;k[n] && k[n][f] && (g = k[n][f].enabled, j = e ? !g : c, k[n][f].enabled = j, h[j ? "removeClass" : "addClass"](i.el, "jtk-" + a + "-disabled"));
      }return g;
    }.bind(this),
        xb = function (a, b) {
      return d.isString(a) || !a.length ? b.apply(this, [a]) : a.length ? b.apply(this, [a[0]]) : void 0;
    }.bind(this);this.toggleSourceEnabled = function (a, b) {
      return wb("source", a, null, !0, b), this.isSourceEnabled(a, b);
    }, this.setSourceEnabled = function (a, b, c) {
      return wb("source", a, b, null, c);
    }, this.isSource = function (a, b) {
      return b = b || "default", xb(a, function (a) {
        var c = this.sourceEndpointDefinitions[o(a).id];return null != c && null != c[b];
      }.bind(this));
    }, this.isSourceEnabled = function (a, b) {
      return b = b || "default", xb(a, function (a) {
        var c = this.sourceEndpointDefinitions[o(a).id];return c && c[b] && c[b].enabled === !0;
      }.bind(this));
    }, this.toggleTargetEnabled = function (a, b) {
      return wb("target", a, null, !0, b), this.isTargetEnabled(a, b);
    }, this.isTarget = function (a, b) {
      return b = b || "default", xb(a, function (a) {
        var c = this.targetEndpointDefinitions[o(a).id];return null != c && null != c[b];
      }.bind(this));
    }, this.isTargetEnabled = function (a, b) {
      return b = b || "default", xb(a, function (a) {
        var c = this.targetEndpointDefinitions[o(a).id];return c && c[b] && c[b].enabled === !0;
      }.bind(this));
    }, this.setTargetEnabled = function (a, b, c) {
      return wb("target", a, b, null, c);
    }, this.ready = function (a) {
      h.bind("ready", a);
    };var yb = function yb(a, b) {
      if ("object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) && a.length) for (var c = 0, d = a.length; d > c; c++) {
        b(a[c]);
      } else b(a);return h;
    };this.repaint = function (a, b, c) {
      return yb(a, function (a) {
        L(a, b, c);
      });
    }, this.revalidate = function (a, b, c) {
      return yb(a, function (a) {
        var d = c ? a : h.getId(a);h.updateOffset({ elId: d, recalc: !0, timestamp: b }), h.repaint(a);
      });
    }, this.repaintEverything = function () {
      var a,
          b = e();for (a in x) {
        h.updateOffset({ elId: a, recalc: !0, timestamp: b });
      }for (a in x) {
        L(a, null, b);
      }return this;
    }, this.removeAllEndpoints = function (a, b, c) {
      c = c || [];var d = function d(a) {
        var e,
            f,
            g = o(a),
            i = x[g.id];if (i) for (c.push(g), e = 0, f = i.length; f > e; e++) {
          h.deleteEndpoint(i[e], !1);
        }if (delete x[g.id], b && g.el && 3 != g.el.nodeType && 8 != g.el.nodeType) for (e = 0, f = g.el.childNodes.length; f > e; e++) {
          d(g.el.childNodes[e]);
        }
      };return d(a), this;
    };var zb = function zb(a, b) {
      h.removeAllEndpoints(a.id, !0, b);for (var c = function c(a) {
        h.getDragManager().elementRemoved(a.id), h.anchorManager.clearFor(a.id), h.anchorManager.removeFloatingConnection(a.id), h.isSource(a.el) && h.unmakeSource(a.el), h.isTarget(a.el) && h.unmakeTarget(a.el), h.destroyDraggable(a.el), h.destroyDroppable(a.el), delete h.floatingConnections[a.id], delete z[a.id], delete A[a.id], a.el && (h.removeElement(a.el), a.el._jsPlumb = null);
      }, d = 1; d < b.length; d++) {
        c(b[d]);
      }c(a);
    };this.remove = function (a, b) {
      var c = o(a),
          d = [];return c.text ? c.el.parentNode.removeChild(c.el) : c.id && h.batch(function () {
        zb(c, d);
      }, b === !1), h;
    }, this.empty = function (a, b) {
      var c = [],
          d = function d(a, b) {
        var e = o(a);if (e.text) e.el.parentNode.removeChild(e.el);else if (e.el) {
          for (; e.el.childNodes.length > 0;) {
            d(e.el.childNodes[0]);
          }b || zb(e, c);
        }
      };return h.batch(function () {
        d(a, !0);
      }, b === !1), h;
    }, this.reset = function () {
      h.silently(function () {
        nb = !1, h.removeAllGroups(), h.removeGroupManager(), h.deleteEveryEndpoint(), h.unbind(), this.targetEndpointDefinitions = {}, this.sourceEndpointDefinitions = {}, w.length = 0, this.doReset && this.doReset();
      }.bind(this));
    };var Ab = function Ab(a) {
      a.canvas && a.canvas.parentNode && a.canvas.parentNode.removeChild(a.canvas), a.cleanup(), a.destroy();
    };this.clear = function () {
      h.select().each(Ab), h.selectEndpoints().each(Ab), x = {}, y = {};
    }, this.setDefaultScope = function (a) {
      return H = a, h;
    }, this.setDraggable = U, this.deriveEndpointAndAnchorSpec = function (a, b) {
      for (var c = ((b ? "" : "default ") + a).split(/[\s]/), d = null, e = null, f = null, g = null, i = 0; i < c.length; i++) {
        var j = h.getType(c[i], "connection");j && (j.endpoints && (d = j.endpoints), j.endpoint && (e = j.endpoint), j.anchors && (g = j.anchors), j.anchor && (f = j.anchor));
      }return { endpoints: d ? d : [e, e], anchors: g ? g : [f, f] };
    }, this.setId = function (a, b, c) {
      var e;d.isString(a) ? e = a : (a = this.getElement(a), e = this.getId(a));var f = this.getConnections({ source: e, scope: "*" }, !0),
          g = this.getConnections({ target: e, scope: "*" }, !0);b = "" + b, c ? a = this.getElement(b) : (a = this.getElement(e), this.setAttribute(a, "id", b)), x[b] = x[e] || [];for (var h = 0, i = x[b].length; i > h; h++) {
        x[b][h].setElementId(b), x[b][h].setReferenceElement(a);
      }delete x[e], this.sourceEndpointDefinitions[b] = this.sourceEndpointDefinitions[e], delete this.sourceEndpointDefinitions[e], this.targetEndpointDefinitions[b] = this.targetEndpointDefinitions[e], delete this.targetEndpointDefinitions[e], this.anchorManager.changeId(e, b), this.getDragManager().changeId(e, b), z[b] = z[e], delete z[e];var j = function j(c, d, e) {
        for (var f = 0, g = c.length; g > f; f++) {
          c[f].endpoints[d].setElementId(b), c[f].endpoints[d].setReferenceElement(a), c[f][e + "Id"] = b, c[f][e] = a;
        }
      };j(f, 0, "source"), j(g, 1, "target"), this.repaint(b);
    }, this.setDebugLog = function (a) {
      u = a;
    }, this.setSuspendDrawing = function (a, b) {
      var c = F;return F = a, G = a ? new Date().getTime() : null, b && this.repaintEverything(), c;
    }, this.isSuspendDrawing = function () {
      return F;
    }, this.getSuspendedAt = function () {
      return G;
    }, this.batch = function (a, b) {
      var c = this.isSuspendDrawing();c || this.setSuspendDrawing(!0);try {
        a();
      } catch (e) {
        d.log("Function run while suspended failed", e);
      }c || this.setSuspendDrawing(!1, !b);
    }, this.doWhileSuspended = this.batch, this.getCachedData = Y, this.timestamp = e, this.show = function (a, b) {
      return V(a, "block", b), h;
    }, this.toggleVisible = X, this.toggleDraggable = W, this.addListener = this.bind;
  };d.extend(b.jsPlumbInstance, d.EventGenerator, { setAttribute: function setAttribute(a, b, c) {
      this.setAttribute(a, b, c);
    }, getAttribute: function getAttribute(a, c) {
      return this.getAttribute(b.jsPlumb.getElement(a), c);
    }, convertToFullOverlaySpec: function convertToFullOverlaySpec(a) {
      return d.isString(a) && (a = [a, {}]), a[1].id = a[1].id || d.uuid(), a;
    }, registerConnectionType: function registerConnectionType(a, c) {
      if (this._connectionTypes[a] = b.jsPlumb.extend({}, c), c.overlays) {
        for (var d = {}, e = 0; e < c.overlays.length; e++) {
          var f = this.convertToFullOverlaySpec(c.overlays[e]);d[f[1].id] = f;
        }this._connectionTypes[a].overlays = d;
      }
    }, registerConnectionTypes: function registerConnectionTypes(a) {
      for (var b in a) {
        this.registerConnectionType(b, a[b]);
      }
    }, registerEndpointType: function registerEndpointType(a, c) {
      if (this._endpointTypes[a] = b.jsPlumb.extend({}, c), c.overlays) {
        for (var d = {}, e = 0; e < c.overlays.length; e++) {
          var f = this.convertToFullOverlaySpec(c.overlays[e]);d[f[1].id] = f;
        }this._endpointTypes[a].overlays = d;
      }
    }, registerEndpointTypes: function registerEndpointTypes(a) {
      for (var b in a) {
        this.registerEndpointType(b, a[b]);
      }
    }, getType: function getType(a, b) {
      return "connection" === b ? this._connectionTypes[a] : this._endpointTypes[a];
    }, setIdChanged: function setIdChanged(a, b) {
      this.setId(a, b, !0);
    }, setParent: function setParent(a, b) {
      var c = this.getElement(a),
          d = this.getId(c),
          e = this.getElement(b),
          f = this.getId(e);c.parentNode.removeChild(c), e.appendChild(c), this.getDragManager().setParent(c, d, e, f);
    }, extend: function extend(a, b, c) {
      var d;if (c) for (d = 0; d < c.length; d++) {
        a[c[d]] = b[c[d]];
      } else for (d in b) {
        a[d] = b[d];
      }return a;
    }, floatingConnections: {}, getFloatingAnchorIndex: function getFloatingAnchorIndex(a) {
      return a.endpoints[0].isFloating() ? 0 : a.endpoints[1].isFloating() ? 1 : -1;
    } }), q.prototype.Defaults = { Anchor: "Bottom", Anchors: [null, null], ConnectionsDetachable: !0, ConnectionOverlays: [], Connector: "Bezier", Container: null, DoNotThrowErrors: !1, DragOptions: {}, DropOptions: {}, Endpoint: "Dot", EndpointOverlays: [], Endpoints: [null, null], EndpointStyle: { fill: "#456" }, EndpointStyles: [null, null], EndpointHoverStyle: null, EndpointHoverStyles: [null, null], HoverPaintStyle: null, LabelStyle: { color: "black" }, LogEnabled: !1, Overlays: [], MaxConnections: 1, PaintStyle: { "stroke-width": 4, stroke: "#456" }, ReattachConnections: !1, RenderMode: "svg", Scope: "jsPlumb_DefaultScope" };var r = new q();b.jsPlumb = r, r.getInstance = function (a, b) {
    var c = new q(a);if (b) for (var d in b) {
      c[d] = b[d];
    }return c.init(), c;
  }, r.each = function (a, b) {
    if (null != a) if ("string" == typeof a) b(r.getElement(a));else if (null != a.length) for (var c = 0; c < a.length; c++) {
      b(r.getElement(a[c]));
    } else b(a);
  }, "undefined" != typeof exports && (exports.jsPlumb = r);
}.call("undefined" != typeof window ? window : undefined), function () {
  var a = this,
      b = a.jsPlumbUtil,
      c = function c(a, b) {
    if (null == b) return [0, 0];var c = h(b),
        d = g(c, 0);return [d[a + "X"], d[a + "Y"]];
  },
      d = c.bind(this, "page"),
      e = c.bind(this, "screen"),
      f = c.bind(this, "client"),
      g = function g(a, b) {
    return a.item ? a.item(b) : a[b];
  },
      h = function h(a) {
    return a.touches && a.touches.length > 0 ? a.touches : a.changedTouches && a.changedTouches.length > 0 ? a.changedTouches : a.targetTouches && a.targetTouches.length > 0 ? a.targetTouches : [a];
  },
      i = function i(a) {
    var b = {},
        c = [],
        d = {},
        e = {},
        f = {};this.register = function (g) {
      var h = a.getId(g),
          i = a.getOffset(g);b[h] || (b[h] = g, c.push(g), d[h] = {});var j = function j(b) {
        if (b) for (var c = 0; c < b.childNodes.length; c++) {
          if (3 != b.childNodes[c].nodeType && 8 != b.childNodes[c].nodeType) {
            var g = jsPlumb.getElement(b.childNodes[c]),
                k = a.getId(b.childNodes[c], null, !0);if (k && e[k] && e[k] > 0) {
              var l = a.getOffset(g);d[h][k] = { id: k, offset: { left: l.left - i.left, top: l.top - i.top } }, f[k] = h;
            }j(b.childNodes[c]);
          }
        }
      };j(g);
    }, this.updateOffsets = function (b, c) {
      if (null != b) {
        c = c || {};var e = jsPlumb.getElement(b),
            g = a.getId(e),
            h = d[g],
            i = a.getOffset(e);if (h) for (var j in h) {
          if (h.hasOwnProperty(j)) {
            var k = jsPlumb.getElement(j),
                l = c[j] || a.getOffset(k);if (null == k.offsetParent && null != d[g][j]) continue;d[g][j] = { id: j, offset: { left: l.left - i.left, top: l.top - i.top } }, f[j] = g;
          }
        }
      }
    }, this.endpointAdded = function (c, g) {
      g = g || a.getId(c);var h = document.body,
          i = c.parentNode;for (e[g] = e[g] ? e[g] + 1 : 1; null != i && i != h;) {
        var j = a.getId(i, null, !0);if (j && b[j]) {
          var k = a.getOffset(i);if (null == d[j][g]) {
            var l = a.getOffset(c);d[j][g] = { id: g, offset: { left: l.left - k.left, top: l.top - k.top } }, f[g] = j;
          }break;
        }i = i.parentNode;
      }
    }, this.endpointDeleted = function (a) {
      if (e[a.elementId] && (e[a.elementId]--, e[a.elementId] <= 0)) for (var b in d) {
        d.hasOwnProperty(b) && d[b] && (delete d[b][a.elementId], delete f[a.elementId]);
      }
    }, this.changeId = function (a, b) {
      d[b] = d[a], d[a] = {}, f[b] = f[a], f[a] = null;
    }, this.getElementsForDraggable = function (a) {
      return d[a];
    }, this.elementRemoved = function (a) {
      var b = f[a];b && (delete d[b][a], delete f[a]);
    }, this.reset = function () {
      b = {}, c = [], d = {}, e = {};
    }, this.dragEnded = function (b) {
      if (null != b.offsetParent) {
        var c = a.getId(b),
            d = f[c];d && this.updateOffsets(d);
      }
    }, this.setParent = function (b, c, e, g, h) {
      var i = f[c];d[g] || (d[g] = {});var j = a.getOffset(e),
          k = h || a.getOffset(b);i && d[i] && delete d[i][c], d[g][c] = { id: c, offset: { left: k.left - j.left, top: k.top - j.top } }, f[c] = g;
    }, this.clearParent = function (a, b) {
      var c = f[b];c && (delete d[c][b], delete f[b]);
    }, this.revalidateParent = function (b, c, d) {
      var e = f[c];if (e) {
        var g = {};g[c] = d, this.updateOffsets(e, g), a.revalidate(e);
      }
    }, this.getDragAncestor = function (b) {
      var c = jsPlumb.getElement(b),
          d = a.getId(c),
          e = f[d];return e ? jsPlumb.getElement(e) : null;
    };
  },
      j = function j(a) {
    return null == a ? null : a.replace(/^\s\s*/, "").replace(/\s\s*$/, "");
  },
      k = function k(a, b) {
    b = j(b), "undefined" != typeof a.className.baseVal ? a.className.baseVal = b : a.className = b;
  },
      l = function l(a) {
    return "undefined" == typeof a.className.baseVal ? a.className : a.className.baseVal;
  },
      m = function m(a, c, d) {
    c = null == c ? [] : b.isArray(c) ? c : c.split(/\s+/), d = null == d ? [] : b.isArray(d) ? d : d.split(/\s+/);var e = l(a),
        f = e.split(/\s+/),
        g = function g(a, b) {
      for (var c = 0; c < b.length; c++) {
        if (a) -1 == f.indexOf(b[c]) && f.push(b[c]);else {
          var d = f.indexOf(b[c]);-1 != d && f.splice(d, 1);
        }
      }
    };g(!0, c), g(!1, d), k(a, f.join(" "));
  };a.jsPlumb.extend(a.jsPlumbInstance.prototype, { headless: !1, pageLocation: d, screenLocation: e, clientLocation: f, getDragManager: function getDragManager() {
      return null == this.dragManager && (this.dragManager = new i(this)), this.dragManager;
    }, recalculateOffsets: function recalculateOffsets(a) {
      this.getDragManager().updateOffsets(a);
    }, createElement: function createElement(a, b, c, d) {
      return this.createElementNS(null, a, b, c, d);
    }, createElementNS: function createElementNS(a, b, c, d, e) {
      var f,
          g = null == a ? document.createElement(b) : document.createElementNS(a, b);c = c || {};for (f in c) {
        g.style[f] = c[f];
      }d && (g.className = d), e = e || {};for (f in e) {
        g.setAttribute(f, "" + e[f]);
      }return g;
    }, getAttribute: function getAttribute(a, b) {
      return null != a.getAttribute ? a.getAttribute(b) : null;
    }, setAttribute: function setAttribute(a, b, c) {
      null != a.setAttribute && a.setAttribute(b, c);
    }, setAttributes: function setAttributes(a, b) {
      for (var c in b) {
        b.hasOwnProperty(c) && a.setAttribute(c, b[c]);
      }
    }, appendToRoot: function appendToRoot(a) {
      document.body.appendChild(a);
    }, getRenderModes: function getRenderModes() {
      return ["svg"];
    }, getClass: l, addClass: function addClass(a, b) {
      jsPlumb.each(a, function (a) {
        m(a, b);
      });
    }, hasClass: function hasClass(a, b) {
      return a = jsPlumb.getElement(a), a.classList ? a.classList.contains(b) : -1 != l(a).indexOf(b);
    }, removeClass: function removeClass(a, b) {
      jsPlumb.each(a, function (a) {
        m(a, null, b);
      });
    }, updateClasses: function updateClasses(a, b, c) {
      jsPlumb.each(a, function (a) {
        m(a, b, c);
      });
    }, setClass: function setClass(a, b) {
      jsPlumb.each(a, function (a) {
        k(a, b);
      });
    }, setPosition: function setPosition(a, b) {
      a.style.left = b.left + "px", a.style.top = b.top + "px";
    }, getPosition: function getPosition(a) {
      var b = function b(_b2) {
        var c = a.style[_b2];return c ? c.substring(0, c.length - 2) : 0;
      };return { left: b("left"), top: b("top") };
    }, getStyle: function getStyle(a, b) {
      return "undefined" != typeof window.getComputedStyle ? getComputedStyle(a, null).getPropertyValue(b) : a.currentStyle[b];
    }, getSelector: function getSelector(a, b) {
      var c = null;return c = 1 == arguments.length ? null != a.nodeType ? a : document.querySelectorAll(a) : a.querySelectorAll(b);
    }, getOffset: function getOffset(a, b, c) {
      a = jsPlumb.getElement(a), c = c || this.getContainer();for (var d = { left: a.offsetLeft, top: a.offsetTop }, e = b || null != c && a != c && a.offsetParent != c ? a.offsetParent : null, f = function (a) {
        null != a && a !== document.body && (a.scrollTop > 0 || a.scrollLeft > 0) && (d.left -= a.scrollLeft, d.top -= a.scrollTop);
      }.bind(this); null != e;) {
        d.left += e.offsetLeft, d.top += e.offsetTop, f(e), e = b ? e.offsetParent : e.offsetParent == c ? null : e.offsetParent;
      }if (null != c && !b && (c.scrollTop > 0 || c.scrollLeft > 0)) {
        var g = null != a.offsetParent ? this.getStyle(a.offsetParent, "position") : "static",
            h = this.getStyle(a, "position");"absolute" !== h && "fixed" !== h && "absolute" !== g && "fixed" != g && (d.left -= c.scrollLeft, d.top -= c.scrollTop);
      }return d;
    }, getPositionOnElement: function getPositionOnElement(a, b, c) {
      var d = "undefined" != typeof b.getBoundingClientRect ? b.getBoundingClientRect() : { left: 0, top: 0, width: 0, height: 0 },
          e = document.body,
          f = document.documentElement,
          g = window.pageYOffset || f.scrollTop || e.scrollTop,
          h = window.pageXOffset || f.scrollLeft || e.scrollLeft,
          i = f.clientTop || e.clientTop || 0,
          j = f.clientLeft || e.clientLeft || 0,
          k = 0,
          l = 0,
          m = d.top + g - i + k * c,
          n = d.left + h - j + l * c,
          o = jsPlumb.pageLocation(a),
          p = d.width || b.offsetWidth * c,
          q = d.height || b.offsetHeight * c,
          r = (o[0] - n) / p,
          s = (o[1] - m) / q;return [r, s];
    }, getAbsolutePosition: function getAbsolutePosition(a) {
      var b = function b(_b3) {
        var c = a.style[_b3];return c ? parseFloat(c.substring(0, c.length - 2)) : void 0;
      };return [b("left"), b("top")];
    }, setAbsolutePosition: function setAbsolutePosition(a, b, c, d) {
      c ? this.animate(a, { left: "+=" + (b[0] - c[0]), top: "+=" + (b[1] - c[1]) }, d) : (a.style.left = b[0] + "px", a.style.top = b[1] + "px");
    }, getSize: function getSize(a) {
      return [a.offsetWidth, a.offsetHeight];
    }, getWidth: function getWidth(a) {
      return a.offsetWidth;
    }, getHeight: function getHeight(a) {
      return a.offsetHeight;
    }, getRenderMode: function getRenderMode() {
      return "svg";
    } });
}.call("undefined" != typeof window ? window : undefined), function () {
  "use strict";
  var a = this,
      b = a.jsPlumb,
      c = a.jsPlumbUtil,
      d = "__label",
      e = function e(a, c) {
    var e = { cssClass: c.cssClass, labelStyle: a.labelStyle, id: d, component: a, _jsPlumb: a._jsPlumb.instance },
        f = b.extend(e, c);return new b.Overlays[a._jsPlumb.instance.getRenderMode()].Label(f);
  },
      f = function f(a, d) {
    var e = null;if (c.isArray(d)) {
      var f = d[0],
          g = b.extend({ component: a, _jsPlumb: a._jsPlumb.instance }, d[1]);3 == d.length && b.extend(g, d[2]), e = new b.Overlays[a._jsPlumb.instance.getRenderMode()][f](g);
    } else e = d.constructor == String ? new b.Overlays[a._jsPlumb.instance.getRenderMode()][d]({ component: a, _jsPlumb: a._jsPlumb.instance }) : d;return e.id = e.id || c.uuid(), a.cacheTypeItem("overlay", e, e.id), a._jsPlumb.overlays[e.id] = e, e;
  };b.OverlayCapableJsPlumbUIComponent = function (b) {
    a.jsPlumbUIComponent.apply(this, arguments), this._jsPlumb.overlays = {}, this._jsPlumb.overlayPositions = {}, b.label && (this.getDefaultType().overlays[d] = ["Label", { label: b.label, location: b.labelLocation || this.defaultLabelLocation || .5, labelStyle: b.labelStyle || this._jsPlumb.instance.Defaults.LabelStyle, id: d }]), this.setListenerComponent = function (a) {
      if (this._jsPlumb) for (var b in this._jsPlumb.overlays) {
        this._jsPlumb.overlays[b].setListenerComponent(a);
      }
    };
  }, b.OverlayCapableJsPlumbUIComponent.applyType = function (a, b) {
    if (b.overlays) {
      var c,
          d = {};for (c in b.overlays) {
        var e = a._jsPlumb.overlays[b.overlays[c][1].id];if (e) e.updateFrom(b.overlays[c][1]), d[b.overlays[c][1].id] = !0;else {
          var f = a.getCachedTypeItem("overlay", b.overlays[c][1].id);null != f ? (f.reattach(a._jsPlumb.instance), f.setVisible(!0), f.updateFrom(b.overlays[c][1]), a._jsPlumb.overlays[f.id] = f) : f = a.addOverlay(b.overlays[c], !0), d[f.id] = !0;
        }
      }for (c in a._jsPlumb.overlays) {
        null == d[a._jsPlumb.overlays[c].id] && a.removeOverlay(a._jsPlumb.overlays[c].id, !0);
      }
    }
  }, c.extend(b.OverlayCapableJsPlumbUIComponent, a.jsPlumbUIComponent, { setHover: function setHover(a) {
      if (this._jsPlumb && !this._jsPlumb.instance.isConnectionBeingDragged()) for (var b in this._jsPlumb.overlays) {
        this._jsPlumb.overlays[b][a ? "addClass" : "removeClass"](this._jsPlumb.instance.hoverClass);
      }
    }, addOverlay: function addOverlay(a, b) {
      var c = f(this, a);return b || this.repaint(), c;
    }, getOverlay: function getOverlay(a) {
      return this._jsPlumb.overlays[a];
    }, getOverlays: function getOverlays() {
      return this._jsPlumb.overlays;
    }, hideOverlay: function hideOverlay(a) {
      var b = this.getOverlay(a);b && b.hide();
    }, hideOverlays: function hideOverlays() {
      for (var a in this._jsPlumb.overlays) {
        this._jsPlumb.overlays[a].hide();
      }
    }, showOverlay: function showOverlay(a) {
      var b = this.getOverlay(a);b && b.show();
    }, showOverlays: function showOverlays() {
      for (var a in this._jsPlumb.overlays) {
        this._jsPlumb.overlays[a].show();
      }
    }, removeAllOverlays: function removeAllOverlays(a) {
      for (var b in this._jsPlumb.overlays) {
        this._jsPlumb.overlays[b].cleanup && this._jsPlumb.overlays[b].cleanup();
      }this._jsPlumb.overlays = {}, this._jsPlumb.overlayPositions = null, a || this.repaint();
    }, removeOverlay: function removeOverlay(a, b) {
      var c = this._jsPlumb.overlays[a];c && (c.setVisible(!1), !b && c.cleanup && c.cleanup(), delete this._jsPlumb.overlays[a], this._jsPlumb.overlayPositions && delete this._jsPlumb.overlayPositions[a]);
    }, removeOverlays: function removeOverlays() {
      for (var a = 0, b = arguments.length; b > a; a++) {
        this.removeOverlay(arguments[a]);
      }
    }, moveParent: function moveParent(a) {
      if (this.bgCanvas && (this.bgCanvas.parentNode.removeChild(this.bgCanvas), a.appendChild(this.bgCanvas)), this.canvas && this.canvas.parentNode) {
        this.canvas.parentNode.removeChild(this.canvas), a.appendChild(this.canvas);for (var b in this._jsPlumb.overlays) {
          if (this._jsPlumb.overlays[b].isAppendedAtTopLevel) {
            var c = this._jsPlumb.overlays[b].getElement();c.parentNode.removeChild(c), a.appendChild(c);
          }
        }
      }
    }, getLabel: function getLabel() {
      var a = this.getOverlay(d);return null != a ? a.getLabel() : null;
    }, getLabelOverlay: function getLabelOverlay() {
      return this.getOverlay(d);
    }, setLabel: function setLabel(a) {
      var b = this.getOverlay(d);if (b) a.constructor == String || a.constructor == Function ? b.setLabel(a) : (a.label && b.setLabel(a.label), a.location && b.setLocation(a.location));else {
        var c = a.constructor == String || a.constructor == Function ? { label: a } : a;b = e(this, c), this._jsPlumb.overlays[d] = b;
      }this._jsPlumb.instance.isSuspendDrawing() || this.repaint();
    }, cleanup: function cleanup(a) {
      for (var b in this._jsPlumb.overlays) {
        this._jsPlumb.overlays[b].cleanup(a), this._jsPlumb.overlays[b].destroy(a);
      }a && (this._jsPlumb.overlays = {}, this._jsPlumb.overlayPositions = null);
    }, setVisible: function setVisible(a) {
      this[a ? "showOverlays" : "hideOverlays"]();
    }, setAbsoluteOverlayPosition: function setAbsoluteOverlayPosition(a, b) {
      this._jsPlumb.overlayPositions[a.id] = b;
    }, getAbsoluteOverlayPosition: function getAbsoluteOverlayPosition(a) {
      return this._jsPlumb.overlayPositions ? this._jsPlumb.overlayPositions[a.id] : null;
    }, _clazzManip: function _clazzManip(a, b, c) {
      if (!c) for (var d in this._jsPlumb.overlays) {
        this._jsPlumb.overlays[d][a + "Class"](b);
      }
    }, addClass: function addClass(a, b) {
      this._clazzManip("add", a, b);
    }, removeClass: function removeClass(a, b) {
      this._clazzManip("remove", a, b);
    } });
}.call("undefined" != typeof window ? window : undefined), function () {
  "use strict";
  var a = this,
      b = a.jsPlumb,
      c = a.jsPlumbUtil,
      d = function d(a, b, c) {
    var d = !1;return { drag: function drag() {
        if (d) return d = !1, !0;if (b.element) {
          var e = c.getUIPosition(arguments, c.getZoom());null != e && jsPlumb.setPosition(b.element, e), c.repaint(b.element, e), a.paint({ anchorPoint: a.anchor.getCurrentLocation({ element: a }) });
        }
      }, stopDrag: function stopDrag() {
        d = !0;
      } };
  },
      e = function e(a, b, c, d) {
    var e = jsPlumb.createElement("div", { position: "absolute" });b.appendElement(e);var f = b.getId(e);jsPlumb.setPosition(e, c), e.style.width = d[0] + "px", e.style.height = d[1] + "px", b.manage(f, e, !0), a.id = f, a.element = e;
  },
      f = function f(a, c, d, e, _f, g, h, i) {
    var j = new b.FloatingAnchor({ reference: c, referenceCanvas: e, jsPlumbInstance: g });return h({ paintStyle: a, endpoint: d, anchor: j, source: _f, scope: i });
  },
      g = ["connectorStyle", "connectorHoverStyle", "connectorOverlays", "connector", "connectionType", "connectorClass", "connectorHoverClass"],
      h = function h(a, b) {
    var c = 0;if (null != b) for (var d = 0; d < a.connections.length; d++) {
      if (a.connections[d].sourceId == b || a.connections[d].targetId == b) {
        c = d;break;
      }
    }return a.connections[c];
  };b.Endpoint = function (a) {
    var i = a._jsPlumb,
        j = a.newConnection,
        k = a.newEndpoint;this.idPrefix = "_jsplumb_e_", this.defaultLabelLocation = [.5, .5], this.defaultOverlayKeys = ["Overlays", "EndpointOverlays"], b.OverlayCapableJsPlumbUIComponent.apply(this, arguments), this.appendToDefaultType({ connectionType: a.connectionType, maxConnections: null == a.maxConnections ? this._jsPlumb.instance.Defaults.MaxConnections : a.maxConnections, paintStyle: a.endpointStyle || a.paintStyle || a.style || this._jsPlumb.instance.Defaults.EndpointStyle || b.Defaults.EndpointStyle, hoverPaintStyle: a.endpointHoverStyle || a.hoverPaintStyle || this._jsPlumb.instance.Defaults.EndpointHoverStyle || b.Defaults.EndpointHoverStyle, connectorStyle: a.connectorStyle, connectorHoverStyle: a.connectorHoverStyle, connectorClass: a.connectorClass, connectorHoverClass: a.connectorHoverClass, connectorOverlays: a.connectorOverlays, connector: a.connector, connectorTooltip: a.connectorTooltip }), this._jsPlumb.enabled = !(a.enabled === !1), this._jsPlumb.visible = !0, this.element = b.getElement(a.source), this._jsPlumb.uuid = a.uuid, this._jsPlumb.floatingEndpoint = null;var l = null;this._jsPlumb.uuid && (a.endpointsByUUID[this._jsPlumb.uuid] = this), this.elementId = a.elementId, this.dragProxy = a.dragProxy, this._jsPlumb.connectionCost = a.connectionCost, this._jsPlumb.connectionsDirected = a.connectionsDirected, this._jsPlumb.currentAnchorClass = "", this._jsPlumb.events = {};var m = function () {
      var a = i.endpointAnchorClassPrefix + "-" + this._jsPlumb.currentAnchorClass;this._jsPlumb.currentAnchorClass = this.anchor.getCssClass();var c = i.endpointAnchorClassPrefix + (this._jsPlumb.currentAnchorClass ? "-" + this._jsPlumb.currentAnchorClass : "");this.removeClass(a), this.addClass(c), b.updateClasses(this.element, c, a);
    }.bind(this);this.prepareAnchor = function (a) {
      var b = this._jsPlumb.instance.makeAnchor(a, this.elementId, i);return b.bind("anchorChanged", function (a) {
        this.fire("anchorChanged", { endpoint: this, anchor: a }), m();
      }.bind(this)), b;
    }, this.setPreparedAnchor = function (a, b) {
      return this._jsPlumb.instance.continuousAnchorFactory.clear(this.elementId), this.anchor = a, m(), b || this._jsPlumb.instance.repaint(this.elementId), this;
    }, this.setAnchor = function (a, b) {
      var c = this.prepareAnchor(a);return this.setPreparedAnchor(c, b), this;
    };var n = function (a) {
      if (this.connections.length > 0) for (var b = 0; b < this.connections.length; b++) {
        this.connections[b].setHover(a, !1);
      } else this.setHover(a);
    }.bind(this);this.bind("mouseover", function () {
      n(!0);
    }), this.bind("mouseout", function () {
      n(!1);
    }), a._transient || this._jsPlumb.instance.anchorManager.add(this, this.elementId), this.prepareEndpoint = function (d, e) {
      var f,
          g = function g(a, c) {
        var d = i.getRenderMode();if (b.Endpoints[d][a]) return new b.Endpoints[d][a](c);if (!i.Defaults.DoNotThrowErrors) throw { msg: "jsPlumb: unknown endpoint type '" + a + "'" };
      },
          h = { _jsPlumb: this._jsPlumb.instance, cssClass: a.cssClass, container: a.container, tooltip: a.tooltip, connectorTooltip: a.connectorTooltip, endpoint: this };
      return c.isString(d) ? f = g(d, h) : c.isArray(d) ? (h = c.merge(d[1], h), f = g(d[0], h)) : f = d.clone(), f.clone = function () {
        return c.isString(d) ? g(d, h) : c.isArray(d) ? (h = c.merge(d[1], h), g(d[0], h)) : void 0;
      }.bind(this), f.typeId = e, f;
    }, this.setEndpoint = function (a) {
      var b = this.prepareEndpoint(a);this.setPreparedEndpoint(b, !0);
    }, this.setPreparedEndpoint = function (a) {
      null != this.endpoint && (this.endpoint.cleanup(), this.endpoint.destroy()), this.endpoint = a, this.type = this.endpoint.type, this.canvas = this.endpoint.canvas;
    }, b.extend(this, a, g), this.isSource = a.isSource || !1, this.isTemporarySource = a.isTemporarySource || !1, this.isTarget = a.isTarget || !1, this.connections = a.connections || [], this.connectorPointerEvents = a["connector-pointer-events"], this.scope = a.scope || i.getDefaultScope(), this.timestamp = null, this.reattachConnections = a.reattach || i.Defaults.ReattachConnections, this.connectionsDetachable = i.Defaults.ConnectionsDetachable, (a.connectionsDetachable === !1 || a.detachable === !1) && (this.connectionsDetachable = !1), this.dragAllowedWhenFull = a.dragAllowedWhenFull !== !1, a.onMaxConnections && this.bind("maxConnections", a.onMaxConnections), this.addConnection = function (a) {
      this.connections.push(a), this[(this.connections.length > 0 ? "add" : "remove") + "Class"](i.endpointConnectedClass), this[(this.isFull() ? "add" : "remove") + "Class"](i.endpointFullClass);
    }, this.detachFromConnection = function (a, b, c) {
      b = null == b ? this.connections.indexOf(a) : b, b >= 0 && (this.connections.splice(b, 1), this[(this.connections.length > 0 ? "add" : "remove") + "Class"](i.endpointConnectedClass), this[(this.isFull() ? "add" : "remove") + "Class"](i.endpointFullClass)), (this._forceDeleteOnDetach || !c && this._deleteOnDetach) && 0 === this.connections.length && i.deleteObject({ endpoint: this, fireEvent: !1, deleteAttachedObjects: c !== !0 });
    }, this.detach = function (a) {
      var b = a.connectionIndex,
          c = a.connection,
          d = a.ignoreTarget,
          e = a.fireEvent,
          f = a.originalEvent,
          g = a.endpointBeingDeleted,
          h = a.forceDetach,
          j = null == b ? this.connections.indexOf(c) : b,
          k = !1;return e = e !== !1, j >= 0 && (h || c._forceDetach || c.isDetachable() && c.isDetachAllowed(c) && this.isDetachAllowed(c) && i.checkCondition("beforeDetach", c, g)) && (i.deleteObject({ connection: c, fireEvent: !d && e, originalEvent: f, deleteAttachedObjects: a.deleteAttachedObjects }), k = !0), k;
    }, this.detachAll = function (a, b) {
      for (var c = []; this.connections.length > 0;) {
        var d = this.detach({ connection: this.connections[0], ignoreTarget: !1, forceDetach: b === !0, fireEvent: a !== !1, originalEvent: null, endpointBeingDeleted: this, connectionIndex: 0 });d || (c.push(this.connections[0]), this.connections.splice(0, 1));
      }return this.connections = c, this;
    }, this.detachFrom = function (a, b, c) {
      for (var d = [], e = 0; e < this.connections.length; e++) {
        (this.connections[e].endpoints[1] == a || this.connections[e].endpoints[0] == a) && d.push(this.connections[e]);
      }for (var f = 0; f < d.length; f++) {
        this.detach({ connection: d[f], ignoreTarget: !1, forceDetach: !0, fireEvent: b, originalEvent: c });
      }return this;
    }, this.getElement = function () {
      return this.element;
    }, this.setElement = function (d) {
      var e = this._jsPlumb.instance.getId(d),
          f = this.elementId;return c.removeWithFunction(a.endpointsByElement[this.elementId], function (a) {
        return a.id == this.id;
      }.bind(this)), this.element = b.getElement(d), this.elementId = i.getId(this.element), i.anchorManager.rehomeEndpoint(this, f, this.element), i.dragManager.endpointAdded(this.element), c.addToList(a.endpointsByElement, e, this), this;
    }, this.makeInPlaceCopy = function () {
      var b = this.anchor.getCurrentLocation({ element: this }),
          c = this.anchor.getOrientation(this),
          d = this.anchor.getCssClass(),
          e = { bind: function bind() {}, compute: function compute() {
          return [b[0], b[1]];
        }, getCurrentLocation: function getCurrentLocation() {
          return [b[0], b[1]];
        }, getOrientation: function getOrientation() {
          return c;
        }, getCssClass: function getCssClass() {
          return d;
        } };return k({ dropOptions: a.dropOptions, anchor: e, source: this.element, paintStyle: this.getPaintStyle(), endpoint: a.hideOnDrag ? "Blank" : this.endpoint, _transient: !0, scope: this.scope, reference: this });
    }, this.connectorSelector = function () {
      var a = this.connections[0];return a ? a : this.connections.length < this._jsPlumb.maxConnections || -1 == this._jsPlumb.maxConnections ? null : a;
    }, this.setStyle = this.setPaintStyle, this.paint = function (a) {
      a = a || {};var b = a.timestamp,
          c = !(a.recalc === !1);if (!b || this.timestamp !== b) {
        var d = i.updateOffset({ elId: this.elementId, timestamp: b }),
            e = a.offset ? a.offset.o : d.o;if (null != e) {
          var f = a.anchorPoint,
              g = a.connectorPaintStyle;if (null == f) {
            var j = a.dimensions || d.s,
                k = { xy: [e.left, e.top], wh: j, element: this, timestamp: b };if (c && this.anchor.isDynamic && this.connections.length > 0) {
              var l = h(this, a.elementWithPrecedence),
                  m = l.endpoints[0] == this ? 1 : 0,
                  n = 0 === m ? l.sourceId : l.targetId,
                  o = i.getCachedData(n),
                  p = o.o,
                  q = o.s;k.txy = [p.left, p.top], k.twh = q, k.tElement = l.endpoints[m];
            }f = this.anchor.compute(k);
          }this.endpoint.compute(f, this.anchor.getOrientation(this), this._jsPlumb.paintStyleInUse, g || this.paintStyleInUse), this.endpoint.paint(this._jsPlumb.paintStyleInUse, this.anchor), this.timestamp = b;for (var r in this._jsPlumb.overlays) {
            if (this._jsPlumb.overlays.hasOwnProperty(r)) {
              var s = this._jsPlumb.overlays[r];s.isVisible() && (this._jsPlumb.overlayPlacements[r] = s.draw(this.endpoint, this._jsPlumb.paintStyleInUse), s.paint(this._jsPlumb.overlayPlacements[r]));
            }
          }
        }
      }
    }, this.getTypeDescriptor = function () {
      return "endpoint";
    }, this.isVisible = function () {
      return this._jsPlumb.visible;
    }, this.repaint = this.paint;var o = !1;this.initDraggable = function () {
      if (!o && b.isDragSupported(this.element)) {
        var g,
            h = { id: null, element: null },
            m = null,
            n = !1,
            p = null,
            q = d(this, h, i),
            r = a.dragOptions || {},
            s = {},
            t = b.dragEvents.start,
            u = b.dragEvents.stop,
            v = b.dragEvents.drag,
            w = b.dragEvents.beforeStart,
            x = function x(a) {
          g = a.e.payload || {};
        },
            y = function () {
          m = this.connectorSelector();var d = !0;this.isEnabled() || (d = !1), null != m || this.isSource || this.isTemporarySource || (d = !1), !this.isSource || !this.isFull() || null != m && this.dragAllowedWhenFull || (d = !1), null == m || m.isDetachable(this) || (d = !1);var l = i.checkCondition(null == m ? "beforeDrag" : "beforeStartDetach", { endpoint: this, source: this.element, sourceId: this.elementId, connection: m });if (l === !1 ? d = !1 : "object" == (typeof l === "undefined" ? "undefined" : _typeof(l)) ? b.extend(l, g || {}) : l = g || {}, d === !1) return i.stopDrag && i.stopDrag(this.canvas), q.stopDrag(), !1;for (var o = 0; o < this.connections.length; o++) {
            this.connections[o].setHover(!1);
          }this.addClass("endpointDrag"), i.setConnectionBeingDragged(!0), m && !this.isFull() && this.isSource && (m = null), i.updateOffset({ elId: this.elementId });var r = this._jsPlumb.instance.getOffset(this.canvas),
              s = this.canvas,
              t = this._jsPlumb.instance.getSize(this.canvas);e(h, i, r, t), i.setAttributes(this.canvas, { dragId: h.id, elId: this.elementId });var u = this.dragProxy || this.endpoint;if (null == this.dragProxy && null != this.connectionType) {
            var v = this._jsPlumb.instance.deriveEndpointAndAnchorSpec(this.connectionType);v.endpoints[1] && (u = v.endpoints[1]);
          }var w = this._jsPlumb.instance.makeAnchor("Center");w.isFloating = !0, this._jsPlumb.floatingEndpoint = f(this.getPaintStyle(), w, u, this.canvas, h.element, i, k, this.scope);var x = this._jsPlumb.floatingEndpoint.anchor;if (null == m) this.setHover(!1, !1), m = j({ sourceEndpoint: this, targetEndpoint: this._jsPlumb.floatingEndpoint, source: this.element, target: h.element, anchors: [this.anchor, this._jsPlumb.floatingEndpoint.anchor], paintStyle: a.connectorStyle, hoverPaintStyle: a.connectorHoverStyle, connector: a.connector, overlays: a.connectorOverlays, type: this.connectionType, cssClass: this.connectorClass, hoverClass: this.connectorHoverClass, scope: a.scope, data: l }), m.pending = !0, m.addClass(i.draggingClass), this._jsPlumb.floatingEndpoint.addClass(i.draggingClass), this._jsPlumb.floatingEndpoint.anchor = x, i.fire("connectionDrag", m), i.anchorManager.newConnection(m);else {
            n = !0, m.setHover(!1);var y = m.endpoints[0].id == this.id ? 0 : 1;this.detachFromConnection(m, null, !0);var z = i.getDragScope(s);i.setAttribute(this.canvas, "originalScope", z), i.fire("connectionDrag", m), 0 === y ? (p = [m.source, m.sourceId, s, z], i.anchorManager.sourceChanged(m.endpoints[y].elementId, h.id, m, h.element)) : (p = [m.target, m.targetId, s, z], m.target = h.element, m.targetId = h.id, i.anchorManager.updateOtherEndpoint(m.sourceId, m.endpoints[y].elementId, m.targetId, m)), m.suspendedEndpoint = m.endpoints[y], m.suspendedElement = m.endpoints[y].getElement(), m.suspendedElementId = m.endpoints[y].elementId, m.suspendedElementType = 0 === y ? "source" : "target", m.suspendedEndpoint.setHover(!1), this._jsPlumb.floatingEndpoint.referenceEndpoint = m.suspendedEndpoint, m.endpoints[y] = this._jsPlumb.floatingEndpoint, m.addClass(i.draggingClass), this._jsPlumb.floatingEndpoint.addClass(i.draggingClass);
          }i.floatingConnections[h.id] = m, c.addToList(a.endpointsByElement, h.id, this._jsPlumb.floatingEndpoint), i.currentlyDragging = !0;
        }.bind(this),
            z = function () {
          if (i.setConnectionBeingDragged(!1), m && null != m.endpoints) {
            var a = i.getDropEvent(arguments),
                b = i.getFloatingAnchorIndex(m);if (m.endpoints[0 === b ? 1 : 0].anchor.locked = !1, m.removeClass(i.draggingClass), this._jsPlumb && (m.deleteConnectionNow || m.endpoints[b] == this._jsPlumb.floatingEndpoint) && n && m.suspendedEndpoint) {
              0 === b ? (m.floatingElement = m.source, m.floatingId = m.sourceId, m.floatingEndpoint = m.endpoints[0], m.floatingIndex = 0, m.source = p[0], m.sourceId = p[1]) : (m.floatingElement = m.target, m.floatingId = m.targetId, m.floatingEndpoint = m.endpoints[1], m.floatingIndex = 1, m.target = p[0], m.targetId = p[1]);var c = this._jsPlumb.floatingEndpoint;i.setDragScope(p[2], p[3]), m.endpoints[b] = m.suspendedEndpoint, m.isReattach() || m._forceReattach || m._forceDetach || !m.endpoints[0 === b ? 1 : 0].detach({ connection: m, ignoreTarget: !1, forceDetach: !1, fireEvent: !0, originalEvent: a, endpointBeingDeleted: !0 }) ? (m.setHover(!1), m._forceDetach = null, m._forceReattach = null, this._jsPlumb.floatingEndpoint.detachFromConnection(m), m.suspendedEndpoint.addConnection(m), 1 == b ? i.anchorManager.updateOtherEndpoint(m.sourceId, m.floatingId, m.targetId, m) : i.anchorManager.sourceChanged(m.floatingId, m.sourceId, m, m.source), i.repaint(p[1])) : i.deleteObject({ endpoint: c });
            }this.deleteAfterDragStop ? i.deleteObject({ endpoint: this }) : this._jsPlumb && this.paint({ recalc: !1 }), i.fire("connectionDragStop", m, a), m.pending && i.fire("connectionAborted", m, a), i.currentlyDragging = !1, m.suspendedElement = null, m.suspendedEndpoint = null, m = null;
          }h && h.element && i.remove(h.element, !1, !1), l && i.deleteObject({ endpoint: l }), this._jsPlumb && (this.canvas.style.visibility = "visible", this.anchor.locked = !1, this._jsPlumb.floatingEndpoint = null);
        }.bind(this);r = b.extend(s, r), r.scope = this.scope || r.scope, r[w] = c.wrap(r[w], x, !1), r[t] = c.wrap(r[t], y, !1), r[v] = c.wrap(r[v], q.drag), r[u] = c.wrap(r[u], z), r.multipleDrop = !1, r.canDrag = function () {
          return this.isSource || this.isTemporarySource || this.connections.length > 0;
        }.bind(this), i.initDraggable(this.canvas, r, "internal"), this.canvas._jsPlumbRelatedElement = this.element, o = !0;
      }
    };var p = a.endpoint || this._jsPlumb.instance.Defaults.Endpoint || b.Defaults.Endpoint;this.setEndpoint(p, !0);var q = a.anchor ? a.anchor : a.anchors ? a.anchors : i.Defaults.Anchor || "Top";this.setAnchor(q, !0);var r = ["default", a.type || ""].join(" ");this.addType(r, a.data, !0), this.canvas = this.endpoint.canvas, this.canvas._jsPlumb = this, this.initDraggable();var s = function (d, e, f, g) {
      if (b.isDropSupported(this.element)) {
        var h = a.dropOptions || i.Defaults.DropOptions || b.Defaults.DropOptions;h = b.extend({}, h), h.scope = h.scope || this.scope;var j = b.dragEvents.drop,
            k = b.dragEvents.over,
            l = b.dragEvents.out,
            m = this,
            n = i.EndpointDropHandler({ getEndpoint: function getEndpoint() {
            return m;
          }, jsPlumb: i, enabled: function enabled() {
            return null != f ? f.isEnabled() : !0;
          }, isFull: function isFull() {
            return f.isFull();
          }, element: this.element, elementId: this.elementId, isSource: this.isSource, isTarget: this.isTarget, addClass: function addClass(a) {
            m.addClass(a);
          }, removeClass: function removeClass(a) {
            m.removeClass(a);
          }, isDropAllowed: function isDropAllowed() {
            return m.isDropAllowed.apply(m, arguments);
          }, reference: g, isRedrop: function isRedrop(a, b) {
            return a.suspendedEndpoint && b.reference && a.suspendedEndpoint.id === b.reference.id;
          } });h[j] = c.wrap(h[j], n, !0), h[k] = c.wrap(h[k], function () {
          var a = b.getDragObject(arguments),
              c = i.getAttribute(b.getElement(a), "dragId"),
              d = i.floatingConnections[c];if (null != d) {
            var e = i.getFloatingAnchorIndex(d),
                f = this.isTarget && 0 !== e || d.suspendedEndpoint && this.referenceEndpoint && this.referenceEndpoint.id == d.suspendedEndpoint.id;if (f) {
              var g = i.checkCondition("checkDropAllowed", { sourceEndpoint: d.endpoints[e], targetEndpoint: this, connection: d });this[(g ? "add" : "remove") + "Class"](i.endpointDropAllowedClass), this[(g ? "remove" : "add") + "Class"](i.endpointDropForbiddenClass), d.endpoints[e].anchor.over(this.anchor, this);
            }
          }
        }.bind(this)), h[l] = c.wrap(h[l], function () {
          var a = b.getDragObject(arguments),
              c = null == a ? null : i.getAttribute(b.getElement(a), "dragId"),
              d = c ? i.floatingConnections[c] : null;if (null != d) {
            var e = i.getFloatingAnchorIndex(d),
                f = this.isTarget && 0 !== e || d.suspendedEndpoint && this.referenceEndpoint && this.referenceEndpoint.id == d.suspendedEndpoint.id;f && (this.removeClass(i.endpointDropAllowedClass), this.removeClass(i.endpointDropForbiddenClass), d.endpoints[e].anchor.out());
          }
        }.bind(this)), i.initDroppable(d, h, "internal", e);
      }
    }.bind(this);return this.anchor.isFloating || s(this.canvas, !(a._transient || this.anchor.isFloating), this, a.reference), this;
  }, c.extend(b.Endpoint, b.OverlayCapableJsPlumbUIComponent, { setVisible: function setVisible(a, b, c) {
      if (this._jsPlumb.visible = a, this.canvas && (this.canvas.style.display = a ? "block" : "none"), this[a ? "showOverlays" : "hideOverlays"](), !b) for (var d = 0; d < this.connections.length; d++) {
        if (this.connections[d].setVisible(a), !c) {
          var e = this === this.connections[d].endpoints[0] ? 1 : 0;1 == this.connections[d].endpoints[e].connections.length && this.connections[d].endpoints[e].setVisible(a, !0, !0);
        }
      }
    }, getAttachedElements: function getAttachedElements() {
      return this.connections;
    }, applyType: function applyType(a, c) {
      this.setPaintStyle(a.endpointStyle || a.paintStyle, c), this.setHoverPaintStyle(a.endpointHoverStyle || a.hoverPaintStyle, c), null != a.maxConnections && (this._jsPlumb.maxConnections = a.maxConnections), a.scope && (this.scope = a.scope), b.extend(this, a, g), null != a.cssClass && this.canvas && this._jsPlumb.instance.addClass(this.canvas, a.cssClass), b.OverlayCapableJsPlumbUIComponent.applyType(this, a);
    }, isEnabled: function isEnabled() {
      return this._jsPlumb.enabled;
    }, setEnabled: function setEnabled(a) {
      this._jsPlumb.enabled = a;
    }, cleanup: function cleanup() {
      var a = this._jsPlumb.instance.endpointAnchorClassPrefix + (this._jsPlumb.currentAnchorClass ? "-" + this._jsPlumb.currentAnchorClass : "");b.removeClass(this.element, a), this.anchor = null, this.endpoint.cleanup(!0), this.endpoint.destroy(), this.endpoint = null, this._jsPlumb.instance.destroyDraggable(this.canvas, "internal"), this._jsPlumb.instance.destroyDroppable(this.canvas, "internal");
    }, setHover: function setHover(a) {
      this.endpoint && this._jsPlumb && !this._jsPlumb.instance.isConnectionBeingDragged() && this.endpoint.setHover(a);
    }, isFull: function isFull() {
      return 0 === this._jsPlumb.maxConnections ? !0 : !(this.isFloating() || this._jsPlumb.maxConnections < 0 || this.connections.length < this._jsPlumb.maxConnections);
    }, isFloating: function isFloating() {
      return null != this.anchor && this.anchor.isFloating;
    }, isConnectedTo: function isConnectedTo(a) {
      var b = !1;if (a) for (var c = 0; c < this.connections.length; c++) {
        if (this.connections[c].endpoints[1] == a || this.connections[c].endpoints[0] == a) {
          b = !0;break;
        }
      }return b;
    }, getConnectionCost: function getConnectionCost() {
      return this._jsPlumb.connectionCost;
    }, setConnectionCost: function setConnectionCost(a) {
      this._jsPlumb.connectionCost = a;
    }, areConnectionsDirected: function areConnectionsDirected() {
      return this._jsPlumb.connectionsDirected;
    }, setConnectionsDirected: function setConnectionsDirected(a) {
      this._jsPlumb.connectionsDirected = a;
    }, setElementId: function setElementId(a) {
      this.elementId = a, this.anchor.elementId = a;
    }, setReferenceElement: function setReferenceElement(a) {
      this.element = b.getElement(a);
    }, setDragAllowedWhenFull: function setDragAllowedWhenFull(a) {
      this.dragAllowedWhenFull = a;
    }, equals: function equals(a) {
      return this.anchor.equals(a.anchor);
    }, getUuid: function getUuid() {
      return this._jsPlumb.uuid;
    }, computeAnchor: function computeAnchor(a) {
      return this.anchor.compute(a);
    } }), a.jsPlumbInstance.prototype.EndpointDropHandler = function (a) {
    return function (b) {
      var d = a.jsPlumb;a.removeClass(d.endpointDropAllowedClass), a.removeClass(d.endpointDropForbiddenClass);var e = d.getDropEvent(arguments),
          f = d.getDragObject(arguments),
          g = d.getAttribute(f, "dragId"),
          h = (d.getAttribute(f, "elId"), d.getAttribute(f, "originalScope")),
          i = d.floatingConnections[g];if (null != i) {
        var j = null != i.suspendedEndpoint;if (!j || null != i.suspendedEndpoint._jsPlumb) {
          var k = a.getEndpoint(i);if (null != k) {
            if (a.isRedrop(i, a)) return i._forceReattach = !0, i.setHover(!1), a.maybeCleanup && a.maybeCleanup(k), void 0;var l = d.getFloatingAnchorIndex(i);if (0 === l && !a.isSource || 1 === l && !a.isTarget) return a.maybeCleanup && a.maybeCleanup(k), void 0;a.onDrop && a.onDrop(i), h && d.setDragScope(f, h);var m = a.isFull(b);if (m && k.fire("maxConnections", { endpoint: this, connection: i, maxConnections: k._jsPlumb.maxConnections }, e), !m && a.enabled()) {
              var n = !0;0 === l ? (i.floatingElement = i.source, i.floatingId = i.sourceId, i.floatingEndpoint = i.endpoints[0], i.floatingIndex = 0, i.source = a.element, i.sourceId = a.elementId) : (i.floatingElement = i.target, i.floatingId = i.targetId, i.floatingEndpoint = i.endpoints[1], i.floatingIndex = 1, i.target = a.element, i.targetId = a.elementId), j && i.suspendedEndpoint.id != k.id && (i.isDetachAllowed(i) && i.endpoints[l].isDetachAllowed(i) && i.suspendedEndpoint.isDetachAllowed(i) && d.checkCondition("beforeDetach", i) || (n = !1));var o = function (a) {
                i.endpoints[l].detachFromConnection(i), i.suspendedEndpoint && i.suspendedEndpoint.detachFromConnection(i), i.endpoints[l] = k, k.addConnection(i);var b = k.getParameters();for (var f in b) {
                  i.setParameter(f, b[f]);
                }if (j) {
                  var g = i.suspendedEndpoint.elementId;d.fireMoveEvent({ index: l, originalSourceId: 0 === l ? g : i.sourceId, newSourceId: 0 === l ? k.elementId : i.sourceId, originalTargetId: 1 == l ? g : i.targetId, newTargetId: 1 == l ? k.elementId : i.targetId, originalSourceEndpoint: 0 === l ? i.suspendedEndpoint : i.endpoints[0], newSourceEndpoint: 0 === l ? k : i.endpoints[0], originalTargetEndpoint: 1 == l ? i.suspendedEndpoint : i.endpoints[1], newTargetEndpoint: 1 == l ? k : i.endpoints[1], connection: i }, e);
                } else b.draggable && d.initDraggable(this.element, dragOptions, "internal", d);if (1 == l ? d.anchorManager.updateOtherEndpoint(i.sourceId, i.floatingId, i.targetId, i) : d.anchorManager.sourceChanged(i.floatingId, i.sourceId, i, i.source), i.endpoints[0].finalEndpoint) {
                  var h = i.endpoints[0];h.detachFromConnection(i), i.endpoints[0] = i.endpoints[0].finalEndpoint, i.endpoints[0].addConnection(i);
                }c.isObject(a) && i.mergeData(a), d.finaliseConnection(i, null, e, !1), i.setHover(!1);
              }.bind(this),
                  p = function p() {
                i.suspendedEndpoint && (i.endpoints[l] = i.suspendedEndpoint, i.setHover(!1), i._forceDetach = !0, 0 === l ? (i.source = i.suspendedEndpoint.element, i.sourceId = i.suspendedEndpoint.elementId) : (i.target = i.suspendedEndpoint.element, i.targetId = i.suspendedEndpoint.elementId), i.suspendedEndpoint.addConnection(i), 1 == l ? d.anchorManager.updateOtherEndpoint(i.sourceId, i.floatingId, i.targetId, i) : d.anchorManager.sourceChanged(i.floatingId, i.sourceId, i, i.source), d.repaint(i.sourceId), i._forceDetach = !1);
              };if (n = n && a.isDropAllowed(i.sourceId, i.targetId, i.scope, i, k)) return o(n), !0;p();
            }a.maybeCleanup && a.maybeCleanup(k), d.currentlyDragging = !1;
          }
        }
      }
    };
  };
}.call("undefined" != typeof window ? window : undefined), function () {
  "use strict";
  var a = this,
      b = a.jsPlumb,
      c = a.jsPlumbUtil,
      d = function d(a, c, _d3, e, f) {
    if (!a.Defaults.DoNotThrowErrors && null == b.Connectors[c][_d3]) throw { msg: "jsPlumb: unknown connector type '" + _d3 + "'" };return new b.Connectors[c][_d3](e, f);
  },
      e = function e(a, b, c) {
    return a ? c.makeAnchor(a, b, c) : null;
  },
      f = function f(a, b, d, e) {
    null != b && (b._jsPlumbConnections = b._jsPlumbConnections || {}, e ? delete b._jsPlumbConnections[a.id] : b._jsPlumbConnections[a.id] = !0, c.isEmpty(b._jsPlumbConnections) ? d.removeClass(b, d.connectedClass) : d.addClass(b, d.connectedClass));
  };b.Connection = function (a) {
    var d = a.newEndpoint;this.id = a.id, this.connector = null, this.idPrefix = "_jsplumb_c_", this.defaultLabelLocation = .5, this.defaultOverlayKeys = ["Overlays", "ConnectionOverlays"], this.previousConnection = a.previousConnection, this.source = b.getElement(a.source), this.target = b.getElement(a.target), a.sourceEndpoint && (this.source = a.sourceEndpoint.getElement()), a.targetEndpoint && (this.target = a.targetEndpoint.getElement()), b.OverlayCapableJsPlumbUIComponent.apply(this, arguments), this.sourceId = this._jsPlumb.instance.getId(this.source), this.targetId = this._jsPlumb.instance.getId(this.target), this.scope = a.scope, this.endpoints = [], this.endpointStyles = [];var e = this._jsPlumb.instance;e.manage(this.sourceId, this.source), e.manage(this.targetId, this.target), this._jsPlumb.visible = !0, this._jsPlumb.editable = a.editable === !0, this._jsPlumb.params = { cssClass: a.cssClass, container: a.container, "pointer-events": a["pointer-events"], editorParams: a.editorParams, overlays: a.overlays }, this._jsPlumb.lastPaintedAt = null, this.bind("mouseover", function () {
      this.setHover(!0);
    }.bind(this)), this.bind("mouseout", function () {
      this.setHover(!1);
    }.bind(this)), this.editableRequested = a.editable !== !1, this.setEditable = function (a) {
      return this.connector ? this.connector.setEditable(a) : !1;
    }, this.isEditable = function () {
      return this.connector ? this.connector.isEditable() : !1;
    }, this.isEditing = function () {
      return this.connector ? this.connector.isEditing() : !1;
    }, this.makeEndpoint = function (b, c, f, g) {
      return f = f || this._jsPlumb.instance.getId(c), this.prepareEndpoint(e, d, this, g, b ? 0 : 1, a, c, f);
    }, a.type && (a.endpoints = a.endpoints || this._jsPlumb.instance.deriveEndpointAndAnchorSpec(a.type).endpoints);var f = this.makeEndpoint(!0, this.source, this.sourceId, a.sourceEndpoint),
        g = this.makeEndpoint(!1, this.target, this.targetId, a.targetEndpoint);f && c.addToList(a.endpointsByElement, this.sourceId, f), g && c.addToList(a.endpointsByElement, this.targetId, g), this.scope || (this.scope = this.endpoints[0].scope), null != a.deleteEndpointsOnDetach ? (this.endpoints[0]._deleteOnDetach = a.deleteEndpointsOnDetach, this.endpoints[1]._deleteOnDetach = a.deleteEndpointsOnDetach) : (this.endpoints[0]._doNotDeleteOnDetach || (this.endpoints[0]._deleteOnDetach = !0), this.endpoints[1]._doNotDeleteOnDetach || (this.endpoints[1]._deleteOnDetach = !0));var h = e.Defaults.ConnectionsDetachable;a.detachable === !1 && (h = !1), this.endpoints[0].connectionsDetachable === !1 && (h = !1), this.endpoints[1].connectionsDetachable === !1 && (h = !1);var i = a.reattach || this.endpoints[0].reattachConnections || this.endpoints[1].reattachConnections || e.Defaults.ReattachConnections;this.appendToDefaultType({ detachable: h, reattach: i, paintStyle: this.endpoints[0].connectorStyle || this.endpoints[1].connectorStyle || a.paintStyle || e.Defaults.PaintStyle || b.Defaults.PaintStyle, hoverPaintStyle: this.endpoints[0].connectorHoverStyle || this.endpoints[1].connectorHoverStyle || a.hoverPaintStyle || e.Defaults.HoverPaintStyle || b.Defaults.HoverPaintStyle });var j = e.getSuspendedAt();if (!e.isSuspendDrawing()) {
      var k = e.getCachedData(this.sourceId),
          l = k.o,
          m = k.s,
          n = e.getCachedData(this.targetId),
          o = n.o,
          p = n.s,
          q = j || e.timestamp(),
          r = this.endpoints[0].anchor.compute({ xy: [l.left, l.top], wh: m, element: this.endpoints[0], elementId: this.endpoints[0].elementId, txy: [o.left, o.top], twh: p, tElement: this.endpoints[1], timestamp: q });this.endpoints[0].paint({ anchorLoc: r, timestamp: q }), r = this.endpoints[1].anchor.compute({ xy: [o.left, o.top], wh: p, element: this.endpoints[1], elementId: this.endpoints[1].elementId, txy: [l.left, l.top], twh: m, tElement: this.endpoints[0], timestamp: q }), this.endpoints[1].paint({ anchorLoc: r, timestamp: q });
    }this.getTypeDescriptor = function () {
      return "connection";
    }, this.getAttachedElements = function () {
      return this.endpoints;
    }, this.isDetachable = function () {
      return this._jsPlumb.detachable === !0;
    }, this.setDetachable = function (a) {
      this._jsPlumb.detachable = a === !0;
    }, this.isReattach = function () {
      return this._jsPlumb.reattach === !0 || this.endpoints[0].reattachConnections === !0 || this.endpoints[1].reattachConnections === !0;
    }, this.setReattach = function (a) {
      this._jsPlumb.reattach = a === !0;
    }, this._jsPlumb.cost = a.cost || this.endpoints[0].getConnectionCost(), this._jsPlumb.directed = a.directed, null == a.directed && (this._jsPlumb.directed = this.endpoints[0].areConnectionsDirected());var s = b.extend({}, this.endpoints[1].getParameters());b.extend(s, this.endpoints[0].getParameters()), b.extend(s, this.getParameters()), this.setParameters(s), this.setConnector(this.endpoints[0].connector || this.endpoints[1].connector || a.connector || e.Defaults.Connector || b.Defaults.Connector, !0), a.geometry && this.connector.setGeometry(a.geometry);var t = null != a.data && c.isObject(a.data) ? a.data : {};this.getData = function () {
      return t;
    }, this.setData = function (a) {
      t = a || {};
    }, this.mergeData = function (a) {
      t = b.extend(t, a);
    };var u = ["default", this.endpoints[0].connectionType, this.endpoints[1].connectionType, a.type].join(" ");/[^\s]/.test(u) && this.addType(u, a.data, !0), this.updateConnectedClass();
  }, c.extend(b.Connection, b.OverlayCapableJsPlumbUIComponent, { applyType: function applyType(a, c, d) {
      null != a.detachable && this.setDetachable(a.detachable), null != a.reattach && this.setReattach(a.reattach), a.scope && (this.scope = a.scope), null != a.cssClass && this.canvas && this._jsPlumb.instance.addClass(this.canvas, a.cssClass);var e = null;a.anchor ? (e = this.getCachedTypeItem("anchors", d.anchor), null == e && (e = [this._jsPlumb.instance.makeAnchor(a.anchor), this._jsPlumb.instance.makeAnchor(a.anchor)], this.cacheTypeItem("anchors", e, d.anchor))) : a.anchors && (e = this.getCachedTypeItem("anchors", d.anchors), null == e && (e = [this._jsPlumb.instance.makeAnchor(a.anchors[0]), this._jsPlumb.instance.makeAnchor(a.anchors[1])], this.cacheTypeItem("anchors", e, d.anchors))), null != e && (this.endpoints[0].anchor = e[0], this.endpoints[1].anchor = e[1], this.endpoints[1].anchor.isDynamic && this._jsPlumb.instance.repaint(this.endpoints[1].elementId)), b.OverlayCapableJsPlumbUIComponent.applyType(this, a);
    }, addClass: function addClass(a, b) {
      b && (this.endpoints[0].addClass(a), this.endpoints[1].addClass(a), this.suspendedEndpoint && this.suspendedEndpoint.addClass(a)), this.connector && this.connector.addClass(a);
    }, removeClass: function removeClass(a, b) {
      b && (this.endpoints[0].removeClass(a), this.endpoints[1].removeClass(a), this.suspendedEndpoint && this.suspendedEndpoint.removeClass(a)), this.connector && this.connector.removeClass(a);
    }, isVisible: function isVisible() {
      return this._jsPlumb.visible;
    }, setVisible: function setVisible(a) {
      this._jsPlumb.visible = a, this.connector && this.connector.setVisible(a), this.repaint();
    }, cleanup: function cleanup() {
      this.updateConnectedClass(!0), this.endpoints = null, this.source = null, this.target = null, null != this.connector && (this.connector.cleanup(!0), this.connector.destroy(!0)), this.connector = null;
    }, updateConnectedClass: function updateConnectedClass(a) {
      this._jsPlumb && (f(this, this.source, this._jsPlumb.instance, a), f(this, this.target, this._jsPlumb.instance, a));
    }, setHover: function setHover(b) {
      this.connector && this._jsPlumb && !this._jsPlumb.instance.isConnectionBeingDragged() && (this.connector.setHover(b), a.jsPlumb[b ? "addClass" : "removeClass"](this.source, this._jsPlumb.instance.hoverSourceClass), a.jsPlumb[b ? "addClass" : "removeClass"](this.target, this._jsPlumb.instance.hoverTargetClass));
    }, getUuids: function getUuids() {
      return [this.endpoints[0].getUuid(), this.endpoints[1].getUuid()];
    }, getCost: function getCost() {
      return this._jsPlumb ? this._jsPlumb.cost : -1 / 0;
    }, setCost: function setCost(a) {
      this._jsPlumb.cost = a;
    }, isDirected: function isDirected() {
      return this._jsPlumb.directed === !0;
    }, getConnector: function getConnector() {
      return this.connector;
    }, getGeometry: function getGeometry() {
      return this.connector ? this.connector.getGeometry() : null;
    }, setGeometry: function setGeometry(a) {
      this.connector && this.connector.setGeometry(a);
    }, prepareConnector: function prepareConnector(a, b) {
      var e,
          f = { _jsPlumb: this._jsPlumb.instance, cssClass: (this._jsPlumb.params.cssClass || "") + (this.isEditable() ? this._jsPlumb.instance.editableConnectorClass : ""), container: this._jsPlumb.params.container, "pointer-events": this._jsPlumb.params["pointer-events"], editable: this.editableRequested },
          g = this._jsPlumb.instance.getRenderMode();return c.isString(a) ? e = d(this._jsPlumb.instance, g, a, f, this) : c.isArray(a) && (e = 1 == a.length ? d(this._jsPlumb.instance, g, a[0], f, this) : d(this._jsPlumb.instance, g, a[0], c.merge(a[1], f), this)), null != b && (e.typeId = b), e;
    }, setPreparedConnector: function setPreparedConnector(a, b, c, d) {
      var e,
          f = "";if (null != this.connector && (e = this.connector, f = e.getClass(), this.connector.cleanup(), this.connector.destroy()), this.connector = a, d && this.cacheTypeItem("connector", a, d), this.canvas = this.connector.canvas, this.bgCanvas = this.connector.bgCanvas, this.addClass(f), this.canvas && (this.canvas._jsPlumb = this), this.bgCanvas && (this.bgCanvas._jsPlumb = this), null != e) for (var g = this.getOverlays(), h = 0; h < g.length; h++) {
        g[h].transfer && g[h].transfer(this.connector);
      }c || this.setListenerComponent(this.connector), b || this.repaint();
    }, setConnector: function setConnector(a, b, c, d) {
      var e = this.prepareConnector(a, d);this.setPreparedConnector(e, b, c, d);
    }, paint: function paint(a) {
      if (!this._jsPlumb.instance.isSuspendDrawing() && this._jsPlumb.visible) {
        a = a || {};var b = a.timestamp,
            c = !1,
            d = c ? this.sourceId : this.targetId,
            e = c ? this.targetId : this.sourceId,
            f = c ? 0 : 1,
            g = c ? 1 : 0;if (null == b || b != this._jsPlumb.lastPaintedAt) {
          var h = this._jsPlumb.instance.updateOffset({ elId: e }).o,
              i = this._jsPlumb.instance.updateOffset({ elId: d }).o,
              j = this.endpoints[g],
              k = this.endpoints[f],
              l = j.anchor.getCurrentLocation({ xy: [h.left, h.top], wh: [h.width, h.height], element: j, timestamp: b }),
              m = k.anchor.getCurrentLocation({ xy: [i.left, i.top], wh: [i.width, i.height], element: k, timestamp: b });this.connector.resetBounds(), this.connector.compute({ sourcePos: l, targetPos: m, sourceEndpoint: this.endpoints[g], targetEndpoint: this.endpoints[f], "stroke-width": this._jsPlumb.paintStyleInUse.strokeWidth, sourceInfo: h, targetInfo: i });var n = { minX: 1 / 0, minY: 1 / 0, maxX: -1 / 0, maxY: -1 / 0 };for (var o in this._jsPlumb.overlays) {
            if (this._jsPlumb.overlays.hasOwnProperty(o)) {
              var p = this._jsPlumb.overlays[o];p.isVisible() && (this._jsPlumb.overlayPlacements[o] = p.draw(this.connector, this._jsPlumb.paintStyleInUse, this.getAbsoluteOverlayPosition(p)), n.minX = Math.min(n.minX, this._jsPlumb.overlayPlacements[o].minX), n.maxX = Math.max(n.maxX, this._jsPlumb.overlayPlacements[o].maxX), n.minY = Math.min(n.minY, this._jsPlumb.overlayPlacements[o].minY), n.maxY = Math.max(n.maxY, this._jsPlumb.overlayPlacements[o].maxY));
            }
          }var q = parseFloat(this._jsPlumb.paintStyleInUse.strokeWidth || 1) / 2,
              r = parseFloat(this._jsPlumb.paintStyleInUse.strokeWidth || 0),
              s = { xmin: Math.min(this.connector.bounds.minX - (q + r), n.minX), ymin: Math.min(this.connector.bounds.minY - (q + r), n.minY), xmax: Math.max(this.connector.bounds.maxX + (q + r), n.maxX), ymax: Math.max(this.connector.bounds.maxY + (q + r), n.maxY) };this.connector.paint(this._jsPlumb.paintStyleInUse, null, s);for (var t in this._jsPlumb.overlays) {
            if (this._jsPlumb.overlays.hasOwnProperty(t)) {
              var u = this._jsPlumb.overlays[t];u.isVisible() && u.paint(this._jsPlumb.overlayPlacements[t], s);
            }
          }
        }this._jsPlumb.lastPaintedAt = b;
      }
    }, repaint: function repaint(a) {
      a = a || {}, this.paint({ elId: this.sourceId, recalc: !(a.recalc === !1), timestamp: a.timestamp });
    }, prepareEndpoint: function prepareEndpoint(a, c, d, f, g, h, i, j) {
      var k;if (f) d.endpoints[g] = f, f.addConnection(d);else {
        h.endpoints || (h.endpoints = [null, null]);var l = h.endpoints[g] || h.endpoint || a.Defaults.Endpoints[g] || b.Defaults.Endpoints[g] || a.Defaults.Endpoint || b.Defaults.Endpoint;h.endpointStyles || (h.endpointStyles = [null, null]), h.endpointHoverStyles || (h.endpointHoverStyles = [null, null]);var m = h.endpointStyles[g] || h.endpointStyle || a.Defaults.EndpointStyles[g] || b.Defaults.EndpointStyles[g] || a.Defaults.EndpointStyle || b.Defaults.EndpointStyle;null == m.fill && null != h.paintStyle && (m.fill = h.paintStyle.stroke), null == m.outlineStroke && null != h.paintStyle && (m.outlineStroke = h.paintStyle.outlineStroke), null == m.outlineWidth && null != h.paintStyle && (m.outlineWidth = h.paintStyle.outlineWidth);var n = h.endpointHoverStyles[g] || h.endpointHoverStyle || a.Defaults.EndpointHoverStyles[g] || b.Defaults.EndpointHoverStyles[g] || a.Defaults.EndpointHoverStyle || b.Defaults.EndpointHoverStyle;null != h.hoverPaintStyle && (null == n && (n = {}), null == n.fill && (n.fill = h.hoverPaintStyle.stroke));var o = h.anchors ? h.anchors[g] : h.anchor ? h.anchor : e(a.Defaults.Anchors[g], j, a) || e(b.Defaults.Anchors[g], j, a) || e(a.Defaults.Anchor, j, a) || e(b.Defaults.Anchor, j, a),
            p = h.uuids ? h.uuids[g] : null;k = c({ paintStyle: m, hoverPaintStyle: n, endpoint: l, connections: [d], uuid: p, anchor: o, source: i, scope: h.scope, reattach: h.reattach || a.Defaults.ReattachConnections, detachable: h.detachable || a.Defaults.ConnectionsDetachable }), d.endpoints[g] = k, h.drawEndpoints === !1 && k.setVisible(!1, !0, !0);
      }return k;
    } });
}.call("undefined" != typeof window ? window : undefined), function () {
  "use strict";
  var a = this,
      b = a.jsPlumbUtil,
      c = a.jsPlumb;c.AnchorManager = function (a) {
    var d = {},
        e = {},
        f = {},
        g = {},
        h = { HORIZONTAL: "horizontal", VERTICAL: "vertical", DIAGONAL: "diagonal", IDENTITY: "identity" },
        i = ["left", "top", "right", "bottom"],
        j = {},
        k = this,
        l = {},
        m = a.jsPlumbInstance,
        n = {},
        o = function o(a, b, c, d, e, f) {
      if (a === b) return { orientation: h.IDENTITY, a: ["top", "top"] };var g = Math.atan2(d.centery - c.centery, d.centerx - c.centerx),
          j = Math.atan2(c.centery - d.centery, c.centerx - d.centerx),
          k = [],
          l = {};!function (a, b) {
        for (var c = 0; c < a.length; c++) {
          l[a[c]] = { left: [b[c].left, b[c].centery], right: [b[c].right, b[c].centery], top: [b[c].centerx, b[c].top], bottom: [b[c].centerx, b[c].bottom] };
        }
      }(["source", "target"], [c, d]);for (var m = 0; m < i.length; m++) {
        for (var n = 0; n < i.length; n++) {
          k.push({ source: i[m], target: i[n], dist: Biltong.lineLength(l.source[i[m]], l.target[i[n]]) });
        }
      }k.sort(function (a, b) {
        return a.dist < b.dist ? -1 : a.dist > b.dist ? 1 : 0;
      });for (var o = k[0].source, p = k[0].target, q = 0; q < k.length && (o = !e.isContinuous || e.isEdgeSupported(k[q].source) ? k[q].source : null, p = !f.isContinuous || f.isEdgeSupported(k[q].target) ? k[q].target : null, null == o || null == p); q++) {}return { a: [o, p], theta: g, theta2: j };
    },
        p = function p(a, b, c, d, e, f, g) {
      for (var h = [], i = b[e ? 0 : 1] / (d.length + 1), j = 0; j < d.length; j++) {
        var k = (j + 1) * i,
            l = f * b[e ? 1 : 0];g && (k = b[e ? 0 : 1] - k);var m = e ? k : l,
            n = c[0] + m,
            o = m / b[0],
            p = e ? l : k,
            q = c[1] + p,
            r = p / b[1];h.push([n, q, o, r, d[j][1], d[j][2]]);
      }return h;
    },
        q = function q(a) {
      return function (b, c) {
        var d = !0;return d = a ? b[0][0] < c[0][0] : b[0][0] > c[0][0], d === !1 ? -1 : 1;
      };
    },
        r = function r(a, b) {
      var c = a[0][0] < 0 ? -Math.PI - a[0][0] : Math.PI - a[0][0],
          d = b[0][0] < 0 ? -Math.PI - b[0][0] : Math.PI - b[0][0];return c > d ? 1 : -1;
    },
        s = { top: function top(a, b) {
        return a[0] > b[0] ? 1 : -1;
      }, right: q(!0), bottom: q(!0), left: r },
        t = function t(a, b) {
      return a.sort(b);
    },
        u = function u(a, b) {
      var c = m.getCachedData(a),
          d = c.s,
          f = c.o,
          h = function h(b, c, d, f, _h, i, j) {
        if (f.length > 0) for (var k = t(f, s[b]), l = "right" === b || "top" === b, m = p(b, c, d, k, _h, i, l), n = function n(a, b) {
          e[a.id] = [b[0], b[1], b[2], b[3]], g[a.id] = j;
        }, o = 0; o < m.length; o++) {
          var q = m[o][4],
              r = q.endpoints[0].elementId === a,
              u = q.endpoints[1].elementId === a;r && n(q.endpoints[0], m[o]), u && n(q.endpoints[1], m[o]);
        }
      };h("bottom", d, [f.left, f.top], b.bottom, !0, 1, [0, 1]), h("top", d, [f.left, f.top], b.top, !0, 0, [0, -1]), h("left", d, [f.left, f.top], b.left, !1, 0, [-1, 0]), h("right", d, [f.left, f.top], b.right, !1, 1, [1, 0]);
    };this.reset = function () {
      d = {}, j = {}, l = {};
    }, this.addFloatingConnection = function (a, b) {
      n[a] = b;
    }, this.removeFloatingConnection = function (a) {
      delete n[a];
    }, this.newConnection = function (a) {
      var d = a.sourceId,
          e = a.targetId,
          f = a.endpoints,
          g = !0,
          h = function h(_h2, i, k, l, m) {
        d == e && k.isContinuous && (a._jsPlumb.instance.removeElement(f[1].canvas), g = !1), b.addToList(j, l, [m, i, k.constructor == c.DynamicAnchor]);
      };h(0, f[0], f[0].anchor, e, a), g && h(1, f[1], f[1].anchor, d, a);
    };var v = function v(a) {
      !function (a, c) {
        if (a) {
          var d = function d(a) {
            return a[4] == c;
          };b.removeWithFunction(a.top, d), b.removeWithFunction(a.left, d), b.removeWithFunction(a.bottom, d), b.removeWithFunction(a.right, d);
        }
      }(l[a.elementId], a.id);
    };this.connectionDetached = function (a, c) {
      var d = a.connection || a,
          e = a.sourceId,
          f = a.targetId,
          g = d.endpoints,
          h = function h(a, c, d, e, f) {
        b.removeWithFunction(j[e], function (a) {
          return a[0].id == f.id;
        });
      };h(1, g[1], g[1].anchor, e, d), h(0, g[0], g[0].anchor, f, d), d.floatingId && (h(d.floatingIndex, d.floatingEndpoint, d.floatingEndpoint.anchor, d.floatingId, d), v(d.floatingEndpoint)), v(d.endpoints[0]), v(d.endpoints[1]), c || (k.redraw(d.sourceId), d.targetId !== d.sourceId && k.redraw(d.targetId));
    }, this.add = function (a, c) {
      b.addToList(d, c, a);
    }, this.changeId = function (a, b) {
      j[b] = j[a], d[b] = d[a], delete j[a], delete d[a];
    }, this.getConnectionsFor = function (a) {
      return j[a] || [];
    }, this.getEndpointsFor = function (a) {
      return d[a] || [];
    }, this.deleteEndpoint = function (a) {
      b.removeWithFunction(d[a.elementId], function (b) {
        return b.id == a.id;
      }), v(a);
    }, this.clearFor = function (a) {
      delete d[a], d[a] = [];
    };var w = function w(c, d, e, f, g, h, i, j, k, l, m, n) {
      var o,
          p,
          q = -1,
          r = -1,
          s = f.endpoints[i],
          t = s.id,
          u = [1, 0][i],
          v = [[d, e], f, g, h, t],
          w = c[k],
          x = s._continuousAnchorEdge ? c[s._continuousAnchorEdge] : null;if (x) {
        var y = b.findWithFunction(x, function (a) {
          return a[4] == t;
        });if (-1 != y) for (x.splice(y, 1), o = 0; o < x.length; o++) {
          p = x[o][1], b.addWithFunction(m, p, function (a) {
            return a.id == p.id;
          }), b.addWithFunction(n, x[o][1].endpoints[i], function (a) {
            return a.id == p.endpoints[i].id;
          }), b.addWithFunction(n, x[o][1].endpoints[u], function (a) {
            return a.id == p.endpoints[u].id;
          });
        }
      }for (o = 0; o < w.length; o++) {
        p = w[o][1], 1 == a.idx && w[o][3] === h && -1 == r && (r = o), b.addWithFunction(m, p, function (a) {
          return a.id == p.id;
        }), b.addWithFunction(n, w[o][1].endpoints[i], function (a) {
          return a.id == p.endpoints[i].id;
        }), b.addWithFunction(n, w[o][1].endpoints[u], function (a) {
          return a.id == p.endpoints[u].id;
        });
      }if (-1 != q) w[q] = v;else {
        var z = j ? -1 != r ? r : 0 : w.length;w.splice(z, 0, v);
      }s._continuousAnchorEdge = k;
    };this.updateOtherEndpoint = function (a, d, e, f) {
      var g = b.findWithFunction(j[a], function (a) {
        return a[0].id === f.id;
      }),
          h = b.findWithFunction(j[d], function (a) {
        return a[0].id === f.id;
      });-1 != g && (j[a][g][0] = f, j[a][g][1] = f.endpoints[1], j[a][g][2] = f.endpoints[1].anchor.constructor == c.DynamicAnchor), h > -1 && (j[d].splice(h, 1), b.addToList(j, e, [f, f.endpoints[0], f.endpoints[0].anchor.constructor == c.DynamicAnchor])), f.updateConnectedClass();
    }, this.sourceChanged = function (a, d, e, f) {
      if (a !== d) {
        e.sourceId = d, e.source = f, b.removeWithFunction(j[a], function (a) {
          return a[0].id === e.id;
        });var g = b.findWithFunction(j[e.targetId], function (a) {
          return a[0].id === e.id;
        });g > -1 && (j[e.targetId][g][0] = e, j[e.targetId][g][1] = e.endpoints[0], j[e.targetId][g][2] = e.endpoints[0].anchor.constructor == c.DynamicAnchor), b.addToList(j, d, [e, e.endpoints[1], e.endpoints[1].anchor.constructor == c.DynamicAnchor]), e.endpoints[1].anchor.isContinuous && (e.source === e.target ? e._jsPlumb.instance.removeElement(e.endpoints[1].canvas) : null == e.endpoints[1].canvas.parentNode && e._jsPlumb.instance.appendElement(e.endpoints[1].canvas)), e.updateConnectedClass();
      }
    }, this.rehomeEndpoint = function (a, b, c) {
      var e = d[b] || [],
          f = m.getId(c);if (f !== b) {
        var g = e.indexOf(a);if (g > -1) {
          var h = e.splice(g, 1)[0];k.add(h, f);
        }
      }for (var i = 0; i < a.connections.length; i++) {
        a.connections[i].sourceId == b ? k.sourceChanged(b, a.elementId, a.connections[i], a.element) : a.connections[i].targetId == b && (a.connections[i].targetId = a.elementId, a.connections[i].target = a.element, k.updateOtherEndpoint(a.connections[i].sourceId, b, a.elementId, a.connections[i]));
      }
    }, this.redraw = function (a, e, f, g, h, i) {
      if (!m.isSuspendDrawing()) {
        var k = d[a] || [],
            p = j[a] || [],
            q = [],
            r = [],
            s = [];f = f || m.timestamp(), g = g || { left: 0, top: 0 }, e && (e = { left: e.left + g.left, top: e.top + g.top });for (var t = m.updateOffset({ elId: a, offset: e, recalc: !1, timestamp: f }), v = {}, x = 0; x < p.length; x++) {
          var y = p[x][0],
              z = y.sourceId,
              A = y.targetId,
              B = y.endpoints[0].anchor.isContinuous,
              C = y.endpoints[1].anchor.isContinuous;if (B || C) {
            var D = z + "_" + A,
                E = v[D],
                F = y.sourceId == a ? 1 : 0;B && !l[z] && (l[z] = { top: [], right: [], bottom: [], left: [] }), C && !l[A] && (l[A] = { top: [], right: [], bottom: [], left: [] }), a != A && m.updateOffset({ elId: A, timestamp: f }), a != z && m.updateOffset({ elId: z, timestamp: f });var G = m.getCachedData(A),
                H = m.getCachedData(z);A == z && (B || C) ? (w(l[z], -Math.PI / 2, 0, y, !1, A, 0, !1, "top", z, q, r), w(l[A], -Math.PI / 2, 0, y, !1, z, 1, !1, "top", A, q, r)) : (E || (E = o(z, A, H.o, G.o, y.endpoints[0].anchor, y.endpoints[1].anchor), v[D] = E), B && w(l[z], E.theta, 0, y, !1, A, 0, !1, E.a[0], z, q, r), C && w(l[A], E.theta2, -1, y, !0, z, 1, !0, E.a[1], A, q, r)), B && b.addWithFunction(s, z, function (a) {
              return a === z;
            }), C && b.addWithFunction(s, A, function (a) {
              return a === A;
            }), b.addWithFunction(q, y, function (a) {
              return a.id == y.id;
            }), (B && 0 === F || C && 1 === F) && b.addWithFunction(r, y.endpoints[F], function (a) {
              return a.id == y.endpoints[F].id;
            });
          }
        }for (x = 0; x < k.length; x++) {
          0 === k[x].connections.length && k[x].anchor.isContinuous && (l[a] || (l[a] = { top: [], right: [], bottom: [], left: [] }), w(l[a], -Math.PI / 2, 0, { endpoints: [k[x], k[x]], paint: function paint() {} }, !1, a, 0, !1, k[x].anchor.getDefaultFace(), a, q, r), b.addWithFunction(s, a, function (b) {
            return b === a;
          }));
        }for (x = 0; x < s.length; x++) {
          u(s[x], l[s[x]]);
        }for (x = 0; x < k.length; x++) {
          k[x].paint({ timestamp: f, offset: t, dimensions: t.s, recalc: i !== !0 });
        }for (x = 0; x < r.length; x++) {
          var I = m.getCachedData(r[x].elementId);r[x].paint({ timestamp: f, offset: I, dimensions: I.s });
        }for (x = 0; x < p.length; x++) {
          var J = p[x][1];if (J.anchor.constructor == c.DynamicAnchor) {
            J.paint({ elementWithPrecedence: a, timestamp: f }), b.addWithFunction(q, p[x][0], function (a) {
              return a.id == p[x][0].id;
            });for (var K = 0; K < J.connections.length; K++) {
              J.connections[K] !== p[x][0] && b.addWithFunction(q, J.connections[K], function (a) {
                return a.id == J.connections[K].id;
              });
            }
          } else J.anchor.constructor == c.Anchor && b.addWithFunction(q, p[x][0], function (a) {
            return a.id == p[x][0].id;
          });
        }var L = n[a];for (L && L.paint({ timestamp: f, recalc: !1, elId: a }), x = 0; x < q.length; x++) {
          q[x].paint({ elId: a, timestamp: f, recalc: !1, clearEdits: h });
        }
      }
    };var x = function x(a) {
      b.EventGenerator.apply(this), this.type = "Continuous", this.isDynamic = !0, this.isContinuous = !0;for (var c = a.faces || ["top", "right", "bottom", "left"], d = !(a.clockwise === !1), h = {}, i = { top: "bottom", right: "left", left: "right", bottom: "top" }, j = { top: "right", right: "bottom", left: "top", bottom: "left" }, k = { top: "left", right: "top", left: "bottom", bottom: "right" }, l = d ? j : k, m = d ? k : j, n = a.cssClass || "", o = 0; o < c.length; o++) {
        h[c[o]] = !0;
      }this.getDefaultFace = function () {
        return 0 === c.length ? "top" : c[0];
      }, this.verifyEdge = function (a) {
        return h[a] ? a : h[i[a]] ? i[a] : h[l[a]] ? l[a] : h[m[a]] ? m[a] : a;
      }, this.isEdgeSupported = function (a) {
        return h[a] === !0;
      }, this.compute = function (a) {
        return f[a.element.id] || e[a.element.id] || [0, 0];
      }, this.getCurrentLocation = function (a) {
        return f[a.element.id] || e[a.element.id] || [0, 0];
      }, this.getOrientation = function (a) {
        return g[a.id] || [0, 0];
      }, this.clearUserDefinedLocation = function () {
        delete f[a.elementId];
      }, this.setUserDefinedLocation = function (b) {
        f[a.elementId] = b;
      }, this.getCssClass = function () {
        return n;
      };
    };m.continuousAnchorFactory = { get: function get(a) {
        return new x(a);
      }, clear: function clear(a) {
        delete f[a], delete e[a];
      } };
  }, c.Anchor = function (a) {
    this.x = a.x || 0, this.y = a.y || 0, this.elementId = a.elementId, this.cssClass = a.cssClass || "", this.userDefinedLocation = null, this.orientation = a.orientation || [0, 0], this.lastReturnValue = null, this.offsets = a.offsets || [0, 0], this.timestamp = null, b.EventGenerator.apply(this), this.compute = function (a) {
      var b = a.xy,
          c = a.wh,
          d = a.timestamp;return a.clearUserDefinedLocation && (this.userDefinedLocation = null), d && d === this.timestamp ? this.lastReturnValue : (this.lastReturnValue = null != this.userDefinedLocation ? this.userDefinedLocation : [b[0] + this.x * c[0] + this.offsets[0], b[1] + this.y * c[1] + this.offsets[1]], this.timestamp = d, this.lastReturnValue);
    }, this.getCurrentLocation = function (a) {
      return a = a || {}, null == this.lastReturnValue || null != a.timestamp && this.timestamp != a.timestamp ? this.compute(a) : this.lastReturnValue;
    };
  }, b.extend(c.Anchor, b.EventGenerator, { equals: function equals(a) {
      if (!a) return !1;var b = a.getOrientation(),
          c = this.getOrientation();return this.x == a.x && this.y == a.y && this.offsets[0] == a.offsets[0] && this.offsets[1] == a.offsets[1] && c[0] == b[0] && c[1] == b[1];
    }, getUserDefinedLocation: function getUserDefinedLocation() {
      return this.userDefinedLocation;
    }, setUserDefinedLocation: function setUserDefinedLocation(a) {
      this.userDefinedLocation = a;
    }, clearUserDefinedLocation: function clearUserDefinedLocation() {
      this.userDefinedLocation = null;
    }, getOrientation: function getOrientation() {
      return this.orientation;
    }, getCssClass: function getCssClass() {
      return this.cssClass;
    } }), c.FloatingAnchor = function (a) {
    c.Anchor.apply(this, arguments);var b = a.reference,
        d = a.referenceCanvas,
        e = c.getSize(d),
        f = 0,
        g = 0,
        h = null,
        i = null;this.orientation = null, this.x = 0, this.y = 0, this.isFloating = !0, this.compute = function (a) {
      var b = a.xy,
          c = [b[0] + e[0] / 2, b[1] + e[1] / 2];return i = c, c;
    }, this.getOrientation = function (a) {
      if (h) return h;var c = b.getOrientation(a);return [-1 * Math.abs(c[0]) * f, -1 * Math.abs(c[1]) * g];
    }, this.over = function (a, b) {
      h = a.getOrientation(b);
    }, this.out = function () {
      h = null;
    }, this.getCurrentLocation = function (a) {
      return null == i ? this.compute(a) : i;
    };
  }, b.extend(c.FloatingAnchor, c.Anchor);var d = function d(a, b, _d4) {
    return a.constructor == c.Anchor ? a : b.makeAnchor(a, _d4, b);
  };c.DynamicAnchor = function (a) {
    c.Anchor.apply(this, arguments), this.isDynamic = !0, this.anchors = [], this.elementId = a.elementId, this.jsPlumbInstance = a.jsPlumbInstance;for (var b = 0; b < a.anchors.length; b++) {
      this.anchors[b] = d(a.anchors[b], this.jsPlumbInstance, this.elementId);
    }this.getAnchors = function () {
      return this.anchors;
    }, this.locked = !1;var e = this.anchors.length > 0 ? this.anchors[0] : null,
        f = e,
        g = this,
        h = function h(a, b, c, d, e) {
      var f = d[0] + a.x * e[0],
          g = d[1] + a.y * e[1],
          h = d[0] + e[0] / 2,
          i = d[1] + e[1] / 2;return Math.sqrt(Math.pow(b - f, 2) + Math.pow(c - g, 2)) + Math.sqrt(Math.pow(h - f, 2) + Math.pow(i - g, 2));
    },
        i = a.selector || function (a, b, c, d, e) {
      for (var f = c[0] + d[0] / 2, g = c[1] + d[1] / 2, i = -1, j = 1 / 0, k = 0; k < e.length; k++) {
        var l = h(e[k], f, g, a, b);j > l && (i = k + 0, j = l);
      }return e[i];
    };this.compute = function (a) {
      var b = a.xy,
          c = a.wh,
          d = a.txy,
          h = a.twh;this.timestamp = a.timestamp;var j = g.getUserDefinedLocation();return null != j ? j : this.locked || null == d || null == h ? e.compute(a) : (a.timestamp = null, e = i(b, c, d, h, this.anchors), this.x = e.x, this.y = e.y, e != f && this.fire("anchorChanged", e), f = e, e.compute(a));
    }, this.getCurrentLocation = function (a) {
      return this.getUserDefinedLocation() || (null != e ? e.getCurrentLocation(a) : null);
    }, this.getOrientation = function (a) {
      return null != e ? e.getOrientation(a) : [0, 0];
    }, this.over = function (a, b) {
      null != e && e.over(a, b);
    }, this.out = function () {
      null != e && e.out();
    }, this.getCssClass = function () {
      return e && e.getCssClass() || "";
    };
  }, b.extend(c.DynamicAnchor, c.Anchor);var e = function e(a, b, d, _e2, f, g) {
    c.Anchors[f] = function (c) {
      var h = c.jsPlumbInstance.makeAnchor([a, b, d, _e2, 0, 0], c.elementId, c.jsPlumbInstance);return h.type = f, g && g(h, c), h;
    };
  };e(.5, 0, 0, -1, "TopCenter"), e(.5, 1, 0, 1, "BottomCenter"), e(0, .5, -1, 0, "LeftMiddle"), e(1, .5, 1, 0, "RightMiddle"), e(.5, 0, 0, -1, "Top"), e(.5, 1, 0, 1, "Bottom"), e(0, .5, -1, 0, "Left"), e(1, .5, 1, 0, "Right"), e(.5, .5, 0, 0, "Center"), e(1, 0, 0, -1, "TopRight"), e(1, 1, 0, 1, "BottomRight"), e(0, 0, 0, -1, "TopLeft"), e(0, 1, 0, 1, "BottomLeft"), c.Defaults.DynamicAnchors = function (a) {
    return a.jsPlumbInstance.makeAnchors(["TopCenter", "RightMiddle", "BottomCenter", "LeftMiddle"], a.elementId, a.jsPlumbInstance);
  }, c.Anchors.AutoDefault = function (a) {
    var b = a.jsPlumbInstance.makeDynamicAnchor(c.Defaults.DynamicAnchors(a));return b.type = "AutoDefault", b;
  };var f = function f(a, b) {
    c.Anchors[a] = function (c) {
      var d = c.jsPlumbInstance.makeAnchor(["Continuous", { faces: b }], c.elementId, c.jsPlumbInstance);return d.type = a, d;
    };
  };c.Anchors.Continuous = function (a) {
    return a.jsPlumbInstance.continuousAnchorFactory.get(a);
  }, f("ContinuousLeft", ["left"]), f("ContinuousTop", ["top"]), f("ContinuousBottom", ["bottom"]), f("ContinuousRight", ["right"]), e(0, 0, 0, 0, "Assign", function (a, b) {
    var c = b.position || "Fixed";a.positionFinder = c.constructor == String ? b.jsPlumbInstance.AnchorPositionFinders[c] : c, a.constructorParams = b;
  }), a.jsPlumbInstance.prototype.AnchorPositionFinders = { Fixed: function Fixed(a, b, c) {
      return [(a.left - b.left) / c[0], (a.top - b.top) / c[1]];
    }, Grid: function Grid(a, b, c, d) {
      var e = a.left - b.left,
          f = a.top - b.top,
          g = c[0] / d.grid[0],
          h = c[1] / d.grid[1],
          i = Math.floor(e / g),
          j = Math.floor(f / h);return [(i * g + g / 2) / c[0], (j * h + h / 2) / c[1]];
    } }, c.Anchors.Perimeter = function (a) {
    a = a || {};var b = a.anchorCount || 60,
        c = a.shape;if (!c) throw new Error("no shape supplied to Perimeter Anchor type");var d = function d() {
      for (var a = .5, c = 2 * Math.PI / b, d = 0, e = [], f = 0; b > f; f++) {
        var g = a + a * Math.sin(d),
            h = a + a * Math.cos(d);e.push([g, h, 0, 0]), d += c;
      }return e;
    },
        e = function e(a) {
      for (var c = b / a.length, d = [], e = function e(a, _e3, f, g, h) {
        c = b * h;for (var i = (f - a) / c, j = (g - _e3) / c, k = 0; c > k; k++) {
          d.push([a + i * k, _e3 + j * k, 0, 0]);
        }
      }, f = 0; f < a.length; f++) {
        e.apply(null, a[f]);
      }return d;
    },
        f = function f(a) {
      for (var b = [], c = 0; c < a.length; c++) {
        b.push([a[c][0], a[c][1], a[c][2], a[c][3], 1 / a.length]);
      }return e(b);
    },
        g = function g() {
      return f([[0, 0, 1, 0], [1, 0, 1, 1], [1, 1, 0, 1], [0, 1, 0, 0]]);
    },
        h = { Circle: d, Ellipse: d, Diamond: function Diamond() {
        return f([[.5, 0, 1, .5], [1, .5, .5, 1], [.5, 1, 0, .5], [0, .5, .5, 0]]);
      }, Rectangle: g, Square: g, Triangle: function Triangle() {
        return f([[.5, 0, 1, 1], [1, 1, 0, 1], [0, 1, .5, 0]]);
      }, Path: function Path(a) {
        for (var b = a.points, c = [], d = 0, f = 0; f < b.length - 1; f++) {
          var g = Math.sqrt(Math.pow(b[f][2] - b[f][0]) + Math.pow(b[f][3] - b[f][1]));d += g, c.push([b[f][0], b[f][1], b[f + 1][0], b[f + 1][1], g]);
        }for (var h = 0; h < c.length; h++) {
          c[h][4] = c[h][4] / d;
        }return e(c);
      } },
        i = function i(a, b) {
      for (var c = [], d = b / 180 * Math.PI, e = 0; e < a.length; e++) {
        var f = a[e][0] - .5,
            g = a[e][1] - .5;c.push([.5 + (f * Math.cos(d) - g * Math.sin(d)), .5 + (f * Math.sin(d) + g * Math.cos(d)), a[e][2], a[e][3]]);
      }return c;
    };if (!h[c]) throw new Error("Shape [" + c + "] is unknown by Perimeter Anchor type");var j = h[c](a);a.rotation && (j = i(j, a.rotation));var k = a.jsPlumbInstance.makeDynamicAnchor(j);return k.type = "Perimeter", k;
  };
}.call("undefined" != typeof window ? window : undefined), function () {
  "use strict";
  var a = this,
      b = a.jsPlumb,
      c = a.jsPlumbUtil,
      d = a.Biltong;b.Segments = { AbstractSegment: function AbstractSegment(a) {
      this.params = a, this.findClosestPointOnPath = function () {
        return { d: 1 / 0, x: null, y: null, l: null };
      }, this.getBounds = function () {
        return { minX: Math.min(a.x1, a.x2), minY: Math.min(a.y1, a.y2), maxX: Math.max(a.x1, a.x2), maxY: Math.max(a.y1, a.y2) };
      };
    }, Straight: function Straight(a) {
      var c,
          e,
          f,
          g,
          h,
          i,
          j,
          k = (b.Segments.AbstractSegment.apply(this, arguments), function () {
        c = Math.sqrt(Math.pow(h - g, 2) + Math.pow(j - i, 2)), e = d.gradient({ x: g, y: i }, { x: h, y: j }), f = -1 / e;
      });this.type = "Straight", this.getLength = function () {
        return c;
      }, this.getGradient = function () {
        return e;
      }, this.getCoordinates = function () {
        return { x1: g, y1: i, x2: h, y2: j };
      }, this.setCoordinates = function (a) {
        g = a.x1, i = a.y1, h = a.x2, j = a.y2, k();
      }, this.setCoordinates({ x1: a.x1, y1: a.y1, x2: a.x2, y2: a.y2 }), this.getBounds = function () {
        return { minX: Math.min(g, h), minY: Math.min(i, j), maxX: Math.max(g, h), maxY: Math.max(i, j) };
      }, this.pointOnPath = function (a, b) {
        if (0 !== a || b) {
          if (1 != a || b) {
            var e = b ? a > 0 ? a : c + a : a * c;return d.pointOnLine({ x: g, y: i }, { x: h, y: j }, e);
          }return { x: h, y: j };
        }return { x: g, y: i };
      }, this.gradientAtPoint = function () {
        return e;
      }, this.pointAlongPathFrom = function (a, b, c) {
        var e = this.pointOnPath(a, c),
            f = 0 >= b ? { x: g, y: i } : { x: h, y: j };return 0 >= b && Math.abs(b) > 1 && (b *= -1), d.pointOnLine(e, f, b);
      };var l = function l(a, b, c) {
        return c >= Math.min(a, b) && c <= Math.max(a, b);
      },
          m = function m(a, b, c) {
        return Math.abs(c - a) < Math.abs(c - b) ? a : b;
      };this.findClosestPointOnPath = function (a, b) {
        var k = { d: 1 / 0, x: null, y: null, l: null, x1: g, x2: h, y1: i, y2: j };if (0 === e) k.y = i, k.x = l(g, h, a) ? a : m(g, h, a);else if (1 / 0 == e || e == -1 / 0) k.x = g, k.y = l(i, j, b) ? b : m(i, j, b);else {
          var n = i - e * g,
              o = b - f * a,
              p = (o - n) / (e - f),
              q = e * p + n;k.x = l(g, h, p) ? p : m(g, h, p), k.y = l(i, j, q) ? q : m(i, j, q);
        }var r = d.lineLength([k.x, k.y], [g, i]);return k.d = d.lineLength([a, b], [k.x, k.y]), k.l = r / c, k;
      };
    }, Arc: function Arc(a) {
      var c = (b.Segments.AbstractSegment.apply(this, arguments), function (b, c) {
        return d.theta([a.cx, a.cy], [b, c]);
      }),
          e = function e(a, b) {
        if (a.anticlockwise) {
          var c = a.startAngle < a.endAngle ? a.startAngle + f : a.startAngle,
              d = Math.abs(c - a.endAngle);return c - d * b;
        }var e = a.endAngle < a.startAngle ? a.endAngle + f : a.endAngle,
            g = Math.abs(e - a.startAngle);return a.startAngle + g * b;
      },
          f = 2 * Math.PI;this.radius = a.r, this.anticlockwise = a.ac, this.type = "Arc", a.startAngle && a.endAngle ? (this.startAngle = a.startAngle, this.endAngle = a.endAngle, this.x1 = a.cx + this.radius * Math.cos(a.startAngle), this.y1 = a.cy + this.radius * Math.sin(a.startAngle), this.x2 = a.cx + this.radius * Math.cos(a.endAngle), this.y2 = a.cy + this.radius * Math.sin(a.endAngle)) : (this.startAngle = c(a.x1, a.y1), this.endAngle = c(a.x2, a.y2), this.x1 = a.x1, this.y1 = a.y1, this.x2 = a.x2, this.y2 = a.y2), this.endAngle < 0 && (this.endAngle += f), this.startAngle < 0 && (this.startAngle += f);var g = this.endAngle < this.startAngle ? this.endAngle + f : this.endAngle;this.sweep = Math.abs(g - this.startAngle), this.anticlockwise && (this.sweep = f - this.sweep);var h = 2 * Math.PI * this.radius,
          i = this.sweep / f,
          j = h * i;this.getLength = function () {
        return j;
      }, this.getBounds = function () {
        return { minX: a.cx - a.r, maxX: a.cx + a.r, minY: a.cy - a.r, maxY: a.cy + a.r };
      };var k = 1e-10,
          l = function l(a) {
        var b = Math.floor(a),
            c = Math.ceil(a);return k > a - b ? b : k > c - a ? c : a;
      };this.pointOnPath = function (b, c) {
        if (0 === b) return { x: this.x1, y: this.y1, theta: this.startAngle };if (1 == b) return { x: this.x2, y: this.y2, theta: this.endAngle };c && (b /= j);var d = e(this, b),
            f = a.cx + a.r * Math.cos(d),
            g = a.cy + a.r * Math.sin(d);return { x: l(f), y: l(g), theta: d };
      }, this.gradientAtPoint = function (b, c) {
        var e = this.pointOnPath(b, c),
            f = d.normal([a.cx, a.cy], [e.x, e.y]);return this.anticlockwise || 1 / 0 != f && f != -1 / 0 || (f *= -1), f;
      }, this.pointAlongPathFrom = function (b, c, d) {
        var e = this.pointOnPath(b, d),
            f = 2 * (c / h) * Math.PI,
            g = this.anticlockwise ? -1 : 1,
            i = e.theta + g * f,
            j = a.cx + this.radius * Math.cos(i),
            k = a.cy + this.radius * Math.sin(i);return { x: j, y: k };
      };
    }, Bezier: function Bezier(c) {
      this.curve = [{ x: c.x1, y: c.y1 }, { x: c.cp1x, y: c.cp1y }, { x: c.cp2x, y: c.cp2y }, { x: c.x2, y: c.y2 }], b.Segments.AbstractSegment.apply(this, arguments), this.bounds = { minX: Math.min(c.x1, c.x2, c.cp1x, c.cp2x), minY: Math.min(c.y1, c.y2, c.cp1y, c.cp2y), maxX: Math.max(c.x1, c.x2, c.cp1x, c.cp2x), maxY: Math.max(c.y1, c.y2, c.cp1y, c.cp2y) }, this.type = "Bezier";var d = function d(b, c, _d5) {
        return _d5 && (c = a.jsBezier.locationAlongCurveFrom(b, c > 0 ? 0 : 1, c)), c;
      };this.pointOnPath = function (b, c) {
        return b = d(this.curve, b, c), a.jsBezier.pointOnCurve(this.curve, b);
      }, this.gradientAtPoint = function (b, c) {
        return b = d(this.curve, b, c), a.jsBezier.gradientAtPoint(this.curve, b);
      }, this.pointAlongPathFrom = function (b, c, e) {
        return b = d(this.curve, b, e), a.jsBezier.pointAlongCurveFrom(this.curve, b, c);
      }, this.getLength = function () {
        return a.jsBezier.getLength(this.curve);
      }, this.getBounds = function () {
        return this.bounds;
      };
    } }, b.SegmentRenderer = { getPath: function getPath(a) {
      return { Straight: function Straight() {
          var b = a.getCoordinates();return "M " + b.x1 + " " + b.y1 + " L " + b.x2 + " " + b.y2;
        }, Bezier: function Bezier() {
          var b = a.params;return "M " + b.x1 + " " + b.y1 + " C " + b.cp1x + " " + b.cp1y + " " + b.cp2x + " " + b.cp2y + " " + b.x2 + " " + b.y2;
        }, Arc: function Arc() {
          var b = a.params,
              c = a.sweep > Math.PI ? 1 : 0,
              d = a.anticlockwise ? 0 : 1;return "M" + a.x1 + " " + a.y1 + " A " + a.radius + " " + b.r + " 0 " + c + "," + d + " " + a.x2 + " " + a.y2;
        } }[a.type]();
    } };var e = function e() {
    this.resetBounds = function () {
      this.bounds = { minX: 1 / 0, minY: 1 / 0, maxX: -1 / 0, maxY: -1 / 0 };
    }, this.resetBounds();
  };b.Connectors.AbstractConnector = function (a) {
    e.apply(this, arguments);var f = [],
        g = 0,
        h = [],
        i = [],
        j = a.stub || 0,
        k = c.isArray(j) ? j[0] : j,
        l = c.isArray(j) ? j[1] : j,
        m = a.gap || 0,
        n = c.isArray(m) ? m[0] : m,
        o = c.isArray(m) ? m[1] : m,
        p = null,
        q = !1,
        r = null,
        s = null,
        t = a.editable !== !1 && null != b.ConnectorEditors && null != b.ConnectorEditors[this.type],
        u = this.setGeometry = function (a, b) {
      q = !b, s = a;
    },
        v = this.getGeometry = function () {
      return s;
    };this.getPathData = function () {
      for (var a = "", c = 0; c < f.length; c++) {
        a += b.SegmentRenderer.getPath(f[c]), a += " ";
      }return a;
    }, this.hasBeenEdited = function () {
      return q;
    }, this.isEditing = function () {
      return null != this.editor && this.editor.isActive();
    }, this.setEditable = function (a) {
      return t = a && null != b.ConnectorEditors && null != b.ConnectorEditors[this.type] && (null == this.overrideSetEditable || this.overrideSetEditable()) ? a : !1;
    }, this.isEditable = function () {
      return t;
    }, this.findSegmentForPoint = function (a, b) {
      for (var c = { d: 1 / 0, s: null, x: null, y: null, l: null }, d = 0; d < f.length; d++) {
        var e = f[d].findClosestPointOnPath(a, b);e.d < c.d && (c.d = e.d, c.l = e.l, c.x = e.x, c.y = e.y, c.s = f[d], c.x1 = e.x1, c.x2 = e.x2, c.y1 = e.y1, c.y2 = e.y2, c.index = d);
      }return c;
    };var w = function w() {
      for (var a = 0, b = 0; b < f.length; b++) {
        var c = f[b].getLength();i[b] = c / g, h[b] = [a, a += c / g];
      }
    },
        x = function x(a, b) {
      b && (a = a > 0 ? a / g : (g + a) / g);for (var c = h.length - 1, d = 1, e = 0; e < h.length; e++) {
        if (h[e][1] >= a) {
          c = e, d = 1 == a ? 1 : 0 === a ? 0 : (a - h[e][0]) / i[e];break;
        }
      }return { segment: f[c], proportion: d, index: c };
    },
        y = function y(a, c, d) {
      if (d.x1 != d.x2 || d.y1 != d.y2) {
        var e = new b.Segments[c](d);f.push(e), g += e.getLength(), a.updateBounds(e);
      }
    },
        z = function z() {
      g = f.length = h.length = i.length = 0;
    };this.setSegments = function (a) {
      p = [], g = 0;for (var b = 0; b < a.length; b++) {
        p.push(a[b]), g += a[b].getLength();
      }
    }, this.getLength = function () {
      return g;
    };var A = function A(a) {
      this.strokeWidth = a.strokeWidth;var b = d.quadrant(a.sourcePos, a.targetPos),
          c = a.targetPos[0] < a.sourcePos[0],
          e = a.targetPos[1] < a.sourcePos[1],
          f = a.strokeWidth || 1,
          g = a.sourceEndpoint.anchor.getOrientation(a.sourceEndpoint),
          h = a.targetEndpoint.anchor.getOrientation(a.targetEndpoint),
          i = c ? a.targetPos[0] : a.sourcePos[0],
          j = e ? a.targetPos[1] : a.sourcePos[1],
          m = Math.abs(a.targetPos[0] - a.sourcePos[0]),
          p = Math.abs(a.targetPos[1] - a.sourcePos[1]);if (0 === g[0] && 0 === g[1] || 0 === h[0] && 0 === h[1]) {
        var q = m > p ? 0 : 1,
            r = [1, 0][q];g = [], h = [], g[q] = a.sourcePos[q] > a.targetPos[q] ? -1 : 1, h[q] = a.sourcePos[q] > a.targetPos[q] ? 1 : -1, g[r] = 0, h[r] = 0;
      }var s = c ? m + n * g[0] : n * g[0],
          t = e ? p + n * g[1] : n * g[1],
          u = c ? o * h[0] : m + o * h[0],
          v = e ? o * h[1] : p + o * h[1],
          w = g[0] * h[0] + g[1] * h[1],
          x = { sx: s, sy: t, tx: u, ty: v, lw: f, xSpan: Math.abs(u - s), ySpan: Math.abs(v - t), mx: (s + u) / 2, my: (t + v) / 2, so: g, to: h, x: i, y: j, w: m, h: p, segment: b, startStubX: s + g[0] * k, startStubY: t + g[1] * k, endStubX: u + h[0] * l, endStubY: v + h[1] * l, isXGreaterThanStubTimes2: Math.abs(s - u) > k + l, isYGreaterThanStubTimes2: Math.abs(t - v) > k + l, opposite: -1 == w, perpendicular: 0 === w, orthogonal: 1 == w, sourceAxis: 0 === g[0] ? "y" : "x", points: [i, j, m, p, s, t, u, v] };return x.anchorOrientation = x.opposite ? "opposite" : x.orthogonal ? "orthogonal" : "perpendicular", x;
    };return this.getSegments = function () {
      return f;
    }, this.updateBounds = function (a) {
      var b = a.getBounds();this.bounds.minX = Math.min(this.bounds.minX, b.minX), this.bounds.maxX = Math.max(this.bounds.maxX, b.maxX), this.bounds.minY = Math.min(this.bounds.minY, b.minY), this.bounds.maxY = Math.max(this.bounds.maxY, b.maxY);
    }, this.pointOnPath = function (a, b) {
      var c = x(a, b);return c.segment && c.segment.pointOnPath(c.proportion, !1) || [0, 0];
    }, this.gradientAtPoint = function (a, b) {
      var c = x(a, b);return c.segment && c.segment.gradientAtPoint(c.proportion, !1) || 0;
    }, this.pointAlongPathFrom = function (a, b, c) {
      var d = x(a, c);return d.segment && d.segment.pointAlongPathFrom(d.proportion, b, !1) || [0, 0];
    }, this.compute = function (a) {
      r = A.call(this, a), z(), this._compute(r, a), this.x = r.points[0], this.y = r.points[1], this.w = r.points[2], this.h = r.points[3], this.segment = r.segment, w();
    }, { addSegment: y, prepareCompute: A, sourceStub: k, targetStub: l, maxStub: Math.max(k, l), sourceGap: n, targetGap: o, maxGap: Math.max(n, o), setGeometry: u, getGeometry: v };
  }, c.extend(b.Connectors.AbstractConnector, e), b.Endpoints.AbstractEndpoint = function (a) {
    e.apply(this, arguments);var b = this.compute = function () {
      var a = this._compute.apply(this, arguments);return this.x = a[0], this.y = a[1], this.w = a[2], this.h = a[3], this.bounds.minX = this.x, this.bounds.minY = this.y, this.bounds.maxX = this.x + this.w, this.bounds.maxY = this.y + this.h, a;
    };return { compute: b, cssClass: a.cssClass };
  }, c.extend(b.Endpoints.AbstractEndpoint, e), b.Endpoints.Dot = function (a) {
    this.type = "Dot", b.Endpoints.AbstractEndpoint.apply(this, arguments), a = a || {}, this.radius = a.radius || 10, this.defaultOffset = .5 * this.radius, this.defaultInnerRadius = this.radius / 3, this._compute = function (a, b, c) {
      this.radius = c.radius || this.radius;var d = a[0] - this.radius,
          e = a[1] - this.radius,
          f = 2 * this.radius,
          g = 2 * this.radius;if (c.stroke) {
        var h = c.strokeWidth || 1;d -= h, e -= h, f += 2 * h, g += 2 * h;
      }return [d, e, f, g, this.radius];
    };
  }, c.extend(b.Endpoints.Dot, b.Endpoints.AbstractEndpoint), b.Endpoints.Rectangle = function (a) {
    this.type = "Rectangle", b.Endpoints.AbstractEndpoint.apply(this, arguments), a = a || {}, this.width = a.width || 20, this.height = a.height || 20, this._compute = function (a, b, c) {
      var d = c.width || this.width,
          e = c.height || this.height,
          f = a[0] - d / 2,
          g = a[1] - e / 2;return [f, g, d, e];
    };
  }, c.extend(b.Endpoints.Rectangle, b.Endpoints.AbstractEndpoint);var f = function f() {
    b.jsPlumbUIComponent.apply(this, arguments), this._jsPlumb.displayElements = [];
  };c.extend(f, b.jsPlumbUIComponent, { getDisplayElements: function getDisplayElements() {
      return this._jsPlumb.displayElements;
    }, appendDisplayElement: function appendDisplayElement(a) {
      this._jsPlumb.displayElements.push(a);
    } }), b.Endpoints.Image = function (d) {
    this.type = "Image", f.apply(this, arguments), b.Endpoints.AbstractEndpoint.apply(this, arguments);var e = d.onload,
        g = d.src || d.url,
        h = d.cssClass ? " " + d.cssClass : "";this._jsPlumb.img = new Image(), this._jsPlumb.ready = !1, this._jsPlumb.initialized = !1, this._jsPlumb.deleted = !1, this._jsPlumb.widthToUse = d.width, this._jsPlumb.heightToUse = d.height, this._jsPlumb.endpoint = d.endpoint, this._jsPlumb.img.onload = function () {
      null != this._jsPlumb && (this._jsPlumb.ready = !0, this._jsPlumb.widthToUse = this._jsPlumb.widthToUse || this._jsPlumb.img.width, this._jsPlumb.heightToUse = this._jsPlumb.heightToUse || this._jsPlumb.img.height, e && e(this));
    }.bind(this), this._jsPlumb.endpoint.setImage = function (a, b) {
      var c = a.constructor == String ? a : a.src;e = b, this._jsPlumb.img.src = c, null != this.canvas && this.canvas.setAttribute("src", this._jsPlumb.img.src);
    }.bind(this), this._jsPlumb.endpoint.setImage(g, e), this._compute = function (a) {
      return this.anchorPoint = a, this._jsPlumb.ready ? [a[0] - this._jsPlumb.widthToUse / 2, a[1] - this._jsPlumb.heightToUse / 2, this._jsPlumb.widthToUse, this._jsPlumb.heightToUse] : [0, 0, 0, 0];
    }, this.canvas = b.createElement("img", { position: "absolute", margin: 0, padding: 0, outline: 0 }, this._jsPlumb.instance.endpointClass + h), this._jsPlumb.widthToUse && this.canvas.setAttribute("width", this._jsPlumb.widthToUse), this._jsPlumb.heightToUse && this.canvas.setAttribute("height", this._jsPlumb.heightToUse), this._jsPlumb.instance.appendElement(this.canvas), this.actuallyPaint = function () {
      if (!this._jsPlumb.deleted) {
        this._jsPlumb.initialized || (this.canvas.setAttribute("src", this._jsPlumb.img.src), this.appendDisplayElement(this.canvas), this._jsPlumb.initialized = !0);var a = this.anchorPoint[0] - this._jsPlumb.widthToUse / 2,
            b = this.anchorPoint[1] - this._jsPlumb.heightToUse / 2;c.sizeElement(this.canvas, a, b, this._jsPlumb.widthToUse, this._jsPlumb.heightToUse);
      }
    }, this.paint = function (b, c) {
      null != this._jsPlumb && (this._jsPlumb.ready ? this.actuallyPaint(b, c) : a.setTimeout(function () {
        this.paint(b, c);
      }.bind(this), 200));
    };
  }, c.extend(b.Endpoints.Image, [f, b.Endpoints.AbstractEndpoint], { cleanup: function cleanup(a) {
      a && (this._jsPlumb.deleted = !0, this.canvas && this.canvas.parentNode.removeChild(this.canvas), this.canvas = null);
    } }), b.Endpoints.Blank = function (a) {
    b.Endpoints.AbstractEndpoint.apply(this, arguments), this.type = "Blank", f.apply(this, arguments), this._compute = function (a) {
      return [a[0], a[1], 10, 0];
    };var d = a.cssClass ? " " + a.cssClass : "";this.canvas = b.createElement("div", { display: "block", width: "1px", height: "1px", background: "transparent", position: "absolute" }, this._jsPlumb.instance.endpointClass + d), this._jsPlumb.instance.appendElement(this.canvas), this.paint = function () {
      c.sizeElement(this.canvas, this.x, this.y, this.w, this.h);
    };
  }, c.extend(b.Endpoints.Blank, [b.Endpoints.AbstractEndpoint, f], { cleanup: function cleanup() {
      this.canvas && this.canvas.parentNode && this.canvas.parentNode.removeChild(this.canvas);
    } }), b.Endpoints.Triangle = function (a) {
    this.type = "Triangle", b.Endpoints.AbstractEndpoint.apply(this, arguments), a = a || {}, a.width = a.width || 55, a.height = a.height || 55, this.width = a.width, this.height = a.height, this._compute = function (a, b, c) {
      var d = c.width || self.width,
          e = c.height || self.height,
          f = a[0] - d / 2,
          g = a[1] - e / 2;return [f, g, d, e];
    };
  };var g = b.Overlays.AbstractOverlay = function (a) {
    this.visible = !0, this.isAppendedAtTopLevel = !0, this.component = a.component, this.loc = null == a.location ? .5 : a.location, this.endpointLoc = null == a.endpointLocation ? [.5, .5] : a.endpointLocation, this.visible = a.visible !== !1;
  };g.prototype = { cleanup: function cleanup(a) {
      a && (this.component = null, this.canvas = null, this.endpointLoc = null);
    }, reattach: function reattach() {}, setVisible: function setVisible(a) {
      this.visible = a, this.component.repaint();
    }, isVisible: function isVisible() {
      return this.visible;
    }, hide: function hide() {
      this.setVisible(!1);
    }, show: function show() {
      this.setVisible(!0);
    }, incrementLocation: function incrementLocation(a) {
      this.loc += a, this.component.repaint();
    }, setLocation: function setLocation(a) {
      this.loc = a, this.component.repaint();
    }, getLocation: function getLocation() {
      return this.loc;
    }, updateFrom: function updateFrom() {} }, b.Overlays.Arrow = function (a) {
    this.type = "Arrow", g.apply(this, arguments), this.isAppendedAtTopLevel = !1, a = a || {}, this.length = a.length || 20, this.width = a.width || 20, this.id = a.id;var e = (a.direction || 1) < 0 ? -1 : 1,
        f = a.paintStyle || { "stroke-width": 1 },
        h = a.foldback || .623;this.computeMaxSize = function () {
      return 1.5 * self.width;
    }, this.elementCreated = function (c) {
      if (this.path = c, a.events) for (var d in a.events) {
        b.on(c, d, a.events[d]);
      }
    }, this.draw = function (a, b) {
      var g, i, j, k, l;if (a.pointAlongPathFrom) {
        if (c.isString(this.loc) || this.loc > 1 || this.loc < 0) {
          var m = parseInt(this.loc, 10),
              n = this.loc < 0 ? 1 : 0;g = a.pointAlongPathFrom(n, m, !1), i = a.pointAlongPathFrom(n, m - e * this.length / 2, !1), j = d.pointOnLine(g, i, this.length);
        } else if (1 == this.loc) {
          if (g = a.pointOnPath(this.loc), i = a.pointAlongPathFrom(this.loc, -this.length), j = d.pointOnLine(g, i, this.length), -1 == e) {
            var o = j;j = g, g = o;
          }
        } else if (0 === this.loc) {
          if (j = a.pointOnPath(this.loc), i = a.pointAlongPathFrom(this.loc, this.length), g = d.pointOnLine(j, i, this.length), -1 == e) {
            var p = j;j = g, g = p;
          }
        } else g = a.pointAlongPathFrom(this.loc, e * this.length / 2), i = a.pointOnPath(this.loc), j = d.pointOnLine(g, i, this.length);k = d.perpendicularLineTo(g, j, this.width), l = d.pointOnLine(g, j, h * this.length);var q = { hxy: g, tail: k, cxy: l },
            r = f.stroke || b.stroke,
            s = f.fill || b.stroke,
            t = f.strokeWidth || b.strokeWidth;return { component: a, d: q, "stroke-width": t, stroke: r, fill: s, minX: Math.min(g.x, k[0].x, k[1].x), maxX: Math.max(g.x, k[0].x, k[1].x), minY: Math.min(g.y, k[0].y, k[1].y), maxY: Math.max(g.y, k[0].y, k[1].y) };
      }return { component: a, minX: 0, maxX: 0, minY: 0, maxY: 0 };
    };
  }, c.extend(b.Overlays.Arrow, g, { updateFrom: function updateFrom(a) {
      this.length = a.length || this.length, this.width = a.width || this.width, this.direction = null != a.direction ? a.direction : this.direction, this.foldback = a.foldback || this.foldback;
    } }), b.Overlays.PlainArrow = function (a) {
    a = a || {};var c = b.extend(a, { foldback: 1 });b.Overlays.Arrow.call(this, c), this.type = "PlainArrow";
  }, c.extend(b.Overlays.PlainArrow, b.Overlays.Arrow), b.Overlays.Diamond = function (a) {
    a = a || {};var c = a.length || 40,
        d = b.extend(a, { length: c / 2, foldback: 2 });b.Overlays.Arrow.call(this, d), this.type = "Diamond";
  }, c.extend(b.Overlays.Diamond, b.Overlays.Arrow);var h = function h(a, b) {
    return (null == a._jsPlumb.cachedDimensions || b) && (a._jsPlumb.cachedDimensions = a.getDimensions()), a._jsPlumb.cachedDimensions;
  },
      i = function i(a) {
    b.jsPlumbUIComponent.apply(this, arguments), g.apply(this, arguments);
    var d = this.fire;this.fire = function () {
      d.apply(this, arguments), this.component && this.component.fire.apply(this.component, arguments);
    }, this.detached = !1, this.id = a.id, this._jsPlumb.div = null, this._jsPlumb.initialised = !1, this._jsPlumb.component = a.component, this._jsPlumb.cachedDimensions = null, this._jsPlumb.create = a.create, this._jsPlumb.initiallyInvisible = a.visible === !1, this.getElement = function () {
      if (null == this._jsPlumb.div) {
        var c = this._jsPlumb.div = b.getElement(this._jsPlumb.create(this._jsPlumb.component));c.style.position = "absolute", c.className = this._jsPlumb.instance.overlayClass + " " + (this.cssClass ? this.cssClass : a.cssClass ? a.cssClass : ""), this._jsPlumb.instance.appendElement(c), this._jsPlumb.instance.getId(c), this.canvas = c;var d = "translate(-50%, -50%)";c.style.webkitTransform = d, c.style.mozTransform = d, c.style.msTransform = d, c.style.oTransform = d, c.style.transform = d, c._jsPlumb = this, a.visible === !1 && (c.style.display = "none");
      }return this._jsPlumb.div;
    }, this.draw = function (a, b, d) {
      var e = h(this);if (null != e && 2 == e.length) {
        var f = { x: 0, y: 0 };if (d) f = { x: d[0], y: d[1] };else if (a.pointOnPath) {
          var g = this.loc,
              i = !1;(c.isString(this.loc) || this.loc < 0 || this.loc > 1) && (g = parseInt(this.loc, 10), i = !0), f = a.pointOnPath(g, i);
        } else {
          var j = this.loc.constructor == Array ? this.loc : this.endpointLoc;f = { x: j[0] * a.w, y: j[1] * a.h };
        }var k = f.x - e[0] / 2,
            l = f.y - e[1] / 2;return { component: a, d: { minx: k, miny: l, td: e, cxy: f }, minX: k, maxX: k + e[0], minY: l, maxY: l + e[1] };
      }return { minX: 0, maxX: 0, minY: 0, maxY: 0 };
    };
  };c.extend(i, [b.jsPlumbUIComponent, g], { getDimensions: function getDimensions() {
      return [1, 1];
    }, setVisible: function setVisible(a) {
      this._jsPlumb.div && (this._jsPlumb.div.style.display = a ? "block" : "none", a && this._jsPlumb.initiallyInvisible && (h(this, !0), this.component.repaint(), this._jsPlumb.initiallyInvisible = !1));
    }, clearCachedDimensions: function clearCachedDimensions() {
      this._jsPlumb.cachedDimensions = null;
    }, cleanup: function cleanup(a) {
      a ? null != this._jsPlumb.div && (this._jsPlumb.div._jsPlumb = null, this._jsPlumb.instance.removeElement(this._jsPlumb.div)) : (this._jsPlumb && this._jsPlumb.div && this._jsPlumb.div.parentNode && this._jsPlumb.div.parentNode.removeChild(this._jsPlumb.div), this.detached = !0);
    }, reattach: function reattach(a) {
      null != this._jsPlumb.div && a.getContainer().appendChild(this._jsPlumb.div), this.detached = !1;
    }, computeMaxSize: function computeMaxSize() {
      var a = h(this);return Math.max(a[0], a[1]);
    }, paint: function paint(a) {
      this._jsPlumb.initialised || (this.getElement(), a.component.appendDisplayElement(this._jsPlumb.div), this._jsPlumb.initialised = !0, this.detached && this._jsPlumb.div.parentNode.removeChild(this._jsPlumb.div)), this._jsPlumb.div.style.left = a.component.x + a.d.minx + "px", this._jsPlumb.div.style.top = a.component.y + a.d.miny + "px";
    } }), b.Overlays.Custom = function () {
    this.type = "Custom", i.apply(this, arguments);
  }, c.extend(b.Overlays.Custom, i), b.Overlays.GuideLines = function () {
    var a = this;a.length = 50, a.strokeWidth = 5, this.type = "GuideLines", g.apply(this, arguments), b.jsPlumbUIComponent.apply(this, arguments), this.draw = function (b) {
      var c = b.pointAlongPathFrom(a.loc, a.length / 2),
          e = b.pointOnPath(a.loc),
          f = d.pointOnLine(c, e, a.length),
          g = d.perpendicularLineTo(c, f, 40),
          h = d.perpendicularLineTo(f, c, 20);return { connector: b, head: c, tail: f, headLine: h, tailLine: g, minX: Math.min(c.x, f.x, h[0].x, h[1].x), minY: Math.min(c.y, f.y, h[0].y, h[1].y), maxX: Math.max(c.x, f.x, h[0].x, h[1].x), maxY: Math.max(c.y, f.y, h[0].y, h[1].y) };
    };
  }, b.Overlays.Label = function (a) {
    this.labelStyle = a.labelStyle, this.cssClass = null != this.labelStyle ? this.labelStyle.cssClass : null;var c = b.extend({ create: function create() {
        return b.createElement("div");
      } }, a);if (b.Overlays.Custom.call(this, c), this.type = "Label", this.label = a.label || "", this.labelText = null, this.labelStyle) {
      var d = this.getElement();if (this.labelStyle.font = this.labelStyle.font || "12px sans-serif", d.style.font = this.labelStyle.font, d.style.color = this.labelStyle.color || "black", this.labelStyle.fill && (d.style.background = this.labelStyle.fill), this.labelStyle.borderWidth > 0) {
        var e = this.labelStyle.borderStyle ? this.labelStyle.borderStyle : "black";d.style.border = this.labelStyle.borderWidth + "px solid " + e;
      }this.labelStyle.padding && (d.style.padding = this.labelStyle.padding);
    }
  }, c.extend(b.Overlays.Label, b.Overlays.Custom, { cleanup: function cleanup(a) {
      a && (this.div = null, this.label = null, this.labelText = null, this.cssClass = null, this.labelStyle = null);
    }, getLabel: function getLabel() {
      return this.label;
    }, setLabel: function setLabel(a) {
      this.label = a, this.labelText = null, this.clearCachedDimensions(), this.update(), this.component.repaint();
    }, getDimensions: function getDimensions() {
      return this.update(), i.prototype.getDimensions.apply(this, arguments);
    }, update: function update() {
      if ("function" == typeof this.label) {
        var a = this.label(this);this.getElement().innerHTML = a.replace(/\r\n/g, "<br/>");
      } else null == this.labelText && (this.labelText = this.label, this.getElement().innerHTML = this.labelText.replace(/\r\n/g, "<br/>"));
    }, updateFrom: function updateFrom(a) {
      null != a.label && this.setLabel(a.label);
    } });
}.call("undefined" != typeof window ? window : undefined), function () {
  "use strict";
  var a = this,
      b = a.jsPlumb,
      c = function c(b) {
    var c = b._mottle;return c || (c = b._mottle = new a.Mottle()), c;
  };b.extend(a.jsPlumbInstance.prototype, { getEventManager: function getEventManager() {
      return c(this);
    }, on: function on() {
      return this.getEventManager().on.apply(this, arguments), this;
    }, off: function off() {
      return this.getEventManager().off.apply(this, arguments), this;
    } });
}.call("undefined" != typeof window ? window : undefined), function () {
  "use strict";
  var a = this,
      b = a.jsPlumbUtil,
      c = a.jsPlumbInstance,
      d = "jtk-group-collapsed",
      e = "jtk-group-expanded",
      f = "[jtk-group-content]",
      g = "elementDraggable",
      h = "stop",
      i = "revert",
      j = "_groupManager",
      k = "_jsPlumbGroup",
      l = "_jsPlumbGroupDrag",
      m = "group:addMember",
      n = "group:removeMember",
      o = "group:add",
      p = "group:remove",
      q = "group:expand",
      r = "group:collapse",
      s = function s(a) {
    function c(a) {
      delete a.proxies;var c,
          d = i[a.id];null != d && (c = function c(b) {
        return b.id === a.id;
      }, b.removeWithFunction(d.connections.source, c), b.removeWithFunction(d.connections.target, c), delete i[a.id]), d = j[a.id], null != d && (c = function c(b) {
        return b.id === a.id;
      }, b.removeWithFunction(d.connections.source, c), b.removeWithFunction(d.connections.target, c), delete j[a.id]);
    }function f(b, c) {
      for (var d = b.getMembers(), e = 0; e < d.length; e++) {
        a[c ? "show" : "hide"](d[e], !0);
      }
    }function g(b) {
      var c = b.getMembers(),
          d = a.getConnections({ source: c }, !0),
          e = a.getConnections({ target: c }, !0),
          f = {};b.connections.source.length = 0, b.connections.target.length = 0;var g = function g(a) {
        for (var c = 0; c < a.length; c++) {
          f[a[c].id] || (f[a[c].id] = !0, a[c].source._jsPlumbGroup === b ? (a[c].target._jsPlumbGroup !== b && b.connections.source.push(a[c]), i[a[c].id] = b) : a[c].target._jsPlumbGroup === b && (b.connections.target.push(a[c]), j[a[c].id] = b));
        }
      };g(d), g(e);
    }var h = {},
        i = {},
        j = {},
        l = this;a.bind("connection", function (a) {
      null != a.source[k] && null != a.target[k] && a.source[k] === a.target[k] ? (i[a.connection.id] = a.source[k], j[a.connection.id] = a.source[k]) : (null != a.source[k] && (b.suggest(a.source[k].connections.source, a.connection), i[a.connection.id] = a.source[k]), null != a.target[k] && (b.suggest(a.target[k].connections.target, a.connection), j[a.connection.id] = a.target[k]));
    }), a.bind("internal.connectionDetached", function (a) {
      c(a.connection);
    }), a.bind("connectionMoved", function (a) {
      var b = 0 === a.index ? i : j,
          c = b[a.connection.id];if (c) {
        var d = c.connections[0 === a.index ? "source" : "target"],
            e = d.indexOf(a.connection);-1 != e && d.splice(e, 1);
      }
    }), this.addGroup = function (b) {
      a.addClass(b.getEl(), e), h[b.id] = b, b.manager = this, g(b), a.fire(o, { group: b });
    }, this.addToGroup = function (b, c, d) {
      if (b = this.getGroup(b)) {
        var e = b.getEl();if (c._isJsPlumbGroup) return;var f = c._jsPlumbGroup;if (f !== b) {
          var g = a.getOffset(c, !0),
              h = b.collapsed ? a.getOffset(e, !0) : a.getOffset(b.getDragArea(), !0);null != f && (f.remove(c, d), l.updateConnectionsForGroup(f)), b.add(c, d);var i = function i(a, c) {
            var d = 0 == c ? 1 : 0;a.each(function (a) {
              a.setVisible(!1), a.endpoints[d].element._jsPlumbGroup === b ? (a.endpoints[d].setVisible(!1), l.expandConnection(a, d, b)) : (a.endpoints[c].setVisible(!1), l.collapseConnection(a, c, b));
            });
          };b.collapsed && (i(a.select({ source: c }), 0), i(a.select({ target: c }), 1));var j = a.getId(c);a.dragManager.setParent(c, j, e, a.getId(e), g);var k = { left: g.left - h.left, top: g.top - h.top };a.setPosition(c, k), a.dragManager.revalidateParent(c, j, g), l.updateConnectionsForGroup(b), a.revalidate(j), setTimeout(function () {
            a.fire(m, { group: b, el: c });
          }, 0);
        }
      }
    }, this.removeFromGroup = function (a, b, c) {
      a = this.getGroup(a), a && a.remove(b, null, c);
    }, this.getGroup = function (a) {
      var c = a;if (b.isString(a) && (c = h[a], null == c)) throw new TypeError("No such group [" + a + "]");return c;
    }, this.getGroups = function () {
      var a = [];for (var b in h) {
        a.push(h[b]);
      }return a;
    }, this.removeGroup = function (b, c, d, e) {
      b = this.getGroup(b), this.expandGroup(b, !0), b[c ? "removeAll" : "orphanAll"](d, e), a.remove(b.getEl()), delete h[b.id], delete a._groups[b.id], a.fire(p, { group: b });
    }, this.removeAllGroups = function (a, b, c) {
      for (var d in h) {
        this.removeGroup(h[d], a, b, c);
      }
    };var n = this.collapseConnection = function (b, c, d) {
      var e,
          f = d.getEl(),
          g = a.getId(f),
          h = b.endpoints[c].elementId,
          i = b.endpoints[0 === c ? 1 : 0].element;i[k] && !i[k].shouldProxy() && i[k].collapsed || (b.proxies = b.proxies || [], b.proxies[c] ? e = b.proxies[c].ep : (e = a.addEndpoint(f, { endpoint: d.getEndpoint(b, c), anchor: d.getAnchor(b, c), parameters: { isProxyEndpoint: !0 } }), e._forceDeleteOnDetach = !0), b.proxies[c] = { ep: e, originalEp: b.endpoints[c] }, 0 === c ? a.anchorManager.sourceChanged(h, g, b, f) : (a.anchorManager.updateOtherEndpoint(b.endpoints[0].elementId, h, g, b), b.target = f, b.targetId = g), b.proxies[c].originalEp.detachFromConnection(b, null, !0), e.connections = [b], b.endpoints[c] = e, b.setVisible(!0));
    };this.collapseGroup = function (b) {
      if (b = this.getGroup(b), null != b && !b.collapsed) {
        var c = b.getEl();if (f(b, !1), b.shouldProxy()) {
          var g = function g(a, c) {
            for (var d = 0; d < a.length; d++) {
              var e = a[d];n(e, c, b);
            }
          };g(b.connections.source, 0), g(b.connections.target, 1);
        }b.collapsed = !0, a.removeClass(c, e), a.addClass(c, d), a.revalidate(c), a.fire(r, { group: b });
      }
    };var s = this.expandConnection = function (b, c, d) {
      if (null != b.proxies && null != b.proxies[c]) {
        var e = a.getId(d.getEl()),
            f = b.proxies[c].originalEp.element,
            g = b.proxies[c].originalEp.elementId;b.endpoints[c] = b.proxies[c].originalEp, 0 === c ? a.anchorManager.sourceChanged(e, g, b, f) : (a.anchorManager.updateOtherEndpoint(b.endpoints[0].elementId, e, g, b), b.target = f, b.targetId = g), b.proxies[c].ep.detachFromConnection(b, null, !0), b.proxies[c].originalEp.addConnection(b), delete b.proxies[c];
      }
    };this.expandGroup = function (b, c) {
      if (b = this.getGroup(b), null != b && b.collapsed) {
        var g = b.getEl();if (f(b, !0), b.shouldProxy()) {
          var h = function h(a, c) {
            for (var d = 0; d < a.length; d++) {
              var e = a[d];s(e, c, b);
            }
          };h(b.connections.source, 0), h(b.connections.target, 1);
        }b.collapsed = !1, a.addClass(g, e), a.removeClass(g, d), a.revalidate(g), this.repaintGroup(b), c || a.fire(q, { group: b });
      }
    }, this.repaintGroup = function (b) {
      b = this.getGroup(b);for (var c = b.getMembers(), d = 0; d < c.length; d++) {
        a.revalidate(c[d]);
      }
    }, this.updateConnectionsForGroup = g, this.refreshAllGroups = function () {
      for (var b in h) {
        g(h[b]), a.dragManager.updateOffsets(a.getId(h[b].getEl()));
      }
    };
  },
      t = function t(c, d) {
    function e(a) {
      return a.offsetParent;
    }function j(a, b) {
      var d = e(a),
          f = c.getSize(d),
          g = c.getSize(a),
          h = b[0],
          i = h + g[0],
          j = b[1],
          k = j + g[1];return i > 0 && h < f[0] && k > 0 && j < f[1];
    }function o(a) {
      var b = c.getId(a),
          d = c.getOffset(a);a.parentNode.removeChild(a), c.getContainer().appendChild(a), c.setPosition(a, d), delete a._jsPlumbGroup, r(a), c.dragManager.clearParent(a, b);
    }function p(a) {
      j(a.el, a.pos) || (a.el._jsPlumbGroup.remove(a.el), A ? c.remove(a.el) : o(a.el));
    }function q(a) {
      var b = c.getId(a);c.revalidate(a), c.dragManager.revalidateParent(a, b);
    }function r(a) {
      a._katavorioDrag && ((A || z) && a._katavorioDrag.off(h, p), A || z || !y || (a._katavorioDrag.off(i, q), a._katavorioDrag.setRevert(null)));
    }function s(a) {
      a._katavorioDrag && ((A || z) && a._katavorioDrag.on(h, p), x && a._katavorioDrag.setConstrain(!0), w && a._katavorioDrag.setUseGhostProxy(!0), A || z || !y || (a._katavorioDrag.on(i, q), a._katavorioDrag.setRevert(function (a, b) {
        return !j(a, b);
      })));
    }var t = this,
        u = d.el;this.getEl = function () {
      return u;
    }, this.id = d.id || b.uuid(), u._isJsPlumbGroup = !0;var v = this.getDragArea = function () {
      var a = c.getSelector(u, f);return a && a.length > 0 ? a[0] : u;
    },
        w = d.ghost === !0,
        x = w || d.constrain === !0,
        y = d.revert !== !1,
        z = d.orphan === !0,
        A = d.prune === !0,
        B = d.dropOverride === !0,
        C = d.proxied !== !1,
        D = [];if (this.connections = { source: [], target: [], internal: [] }, this.getAnchor = function () {
      return d.anchor || "Continuous";
    }, this.getEndpoint = function () {
      return d.endpoint || ["Dot", { radius: 10 }];
    }, this.collapsed = !1, d.draggable !== !1) {
      var E = { stop: function stop(a) {
          c.fire("groupDragStop", jsPlumb.extend(a, { group: t }));
        }, scope: l };d.dragOptions && a.jsPlumb.extend(E, d.dragOptions), c.draggable(d.el, E);
    }d.droppable !== !1 && c.droppable(d.el, { drop: function drop(a) {
        var b = a.drag.el;if (!b._isJsPlumbGroup) {
          var d = b._jsPlumbGroup;if (d !== t) {
            if (null != d && d.overrideDrop(b, t)) return;c.getGroupManager().addToGroup(t, b, !1);
          }
        }
      } });var F = function F(a, b) {
      for (var c = null == a.nodeType ? a : [a], d = 0; d < c.length; d++) {
        b(c[d]);
      }
    };this.overrideDrop = function () {
      return B && (y || A || z);
    }, this.add = function (a, b) {
      var d = v();F(a, function (a) {
        if (null != a._jsPlumbGroup) {
          if (a._jsPlumbGroup === t) return;a._jsPlumbGroup.remove(a, !0, b, !1);
        }a._jsPlumbGroup = t, D.push(a), c.isAlreadyDraggable(a) && s(a), a.parentNode != d && d.appendChild(a), b || c.fire(m, { group: t, el: a });
      }), c.getGroupManager().updateConnectionsForGroup(t);
    }, this.remove = function (a, d, e, f) {
      F(a, function (a) {
        if (delete a._jsPlumbGroup, b.removeWithFunction(D, function (b) {
          return b === a;
        }), d) try {
          t.getDragArea().removeChild(a);
        } catch (f) {
          jsPlumbUtil.log("Could not remove element from Group " + f);
        }r(a), e || c.fire(n, { group: t, el: a });
      }), f || c.getGroupManager().updateConnectionsForGroup(t);
    }, this.removeAll = function (a, b) {
      for (var d = 0, e = D.length; e > d; d++) {
        t.remove(D[0], a, b, !0);
      }D.length = 0, c.getGroupManager().updateConnectionsForGroup(t);
    }, this.orphanAll = function () {
      for (var a = 0; a < D.length; a++) {
        o(D[a]);
      }D.length = 0;
    }, this.getMembers = function () {
      return D;
    }, u[k] = this, c.bind(g, function (a) {
      a.el._jsPlumbGroup == this && s(a.el);
    }.bind(this)), this.shouldProxy = function () {
      return C;
    }, c.getGroupManager().addGroup(this);
  };c.prototype.addGroup = function (a) {
    var b = this;if (b._groups = b._groups || {}, null != b._groups[a.id]) throw new TypeError("cannot create Group [" + a.id + "]; a Group with that ID exists");if (null != a.el[k]) throw new TypeError("cannot create Group [" + a.id + "]; the given element is already a Group");var c = new t(b, a);return b._groups[c.id] = c, c;
  }, c.prototype.addToGroup = function (a, b, c) {
    var d = function (b) {
      var d = this.getId(b);this.manage(d, b), this.getGroupManager().addToGroup(a, b, c);
    }.bind(this);if (Array.isArray(b)) for (var e = 0; e < b.length; e++) {
      d(b[e]);
    } else d(b);
  }, c.prototype.removeFromGroup = function (a, b, c) {
    this.getGroupManager().removeFromGroup(a, b, c);
  }, c.prototype.removeGroup = function (a, b, c, d) {
    this.getGroupManager().removeGroup(a, b, c, d);
  }, c.prototype.removeAllGroups = function (a, b, c) {
    this.getGroupManager().removeAllGroups(a, b, c);
  }, c.prototype.getGroup = function (a) {
    return this.getGroupManager().getGroup(a);
  }, c.prototype.getGroups = function () {
    return this.getGroupManager().getGroups();
  }, c.prototype.expandGroup = function (a) {
    this.getGroupManager().expandGroup(a);
  }, c.prototype.collapseGroup = function (a) {
    this.getGroupManager().collapseGroup(a);
  }, c.prototype.repaintGroup = function (a) {
    this.getGroupManager().repaintGroup(a);
  }, c.prototype.toggleGroup = function (a) {
    a = this.getGroupManager().getGroup(a), null != a && this.getGroupManager()[a.collapsed ? "expandGroup" : "collapseGroup"](a);
  }, c.prototype.getGroupManager = function () {
    var a = this[j];return null == a && (a = this[j] = new s(this)), a;
  }, c.prototype.removeGroupManager = function () {
    delete this[j];
  }, c.prototype.getGroupFor = function (a) {
    return a = this.getElement(a), a ? a[k] : void 0;
  };
}.call("undefined" != typeof window ? window : undefined), function () {
  "use strict";
  var a = this,
      b = a.jsPlumb,
      c = a.jsPlumbUtil,
      d = function d(a) {
    this.type = "Flowchart", a = a || {}, a.stub = null == a.stub ? 30 : a.stub;var c,
        d,
        e = b.Connectors.AbstractConnector.apply(this, arguments),
        f = null == a.midpoint ? .5 : a.midpoint,
        g = a.alwaysRespectStubs === !0,
        h = null,
        i = null,
        j = null != a.cornerRadius ? a.cornerRadius : 0,
        k = (a.loopbackRadius || 25, function (a) {
      return 0 > a ? -1 : 0 === a ? 0 : 1;
    }),
        l = function l(a, b, c, d) {
      if (h != b || i != c) {
        var e = null == h ? d.sx : h,
            f = null == i ? d.sy : i,
            g = e == b ? "v" : "h",
            j = k(b - e),
            l = k(c - f);h = b, i = c, a.push([e, f, b, c, g, j, l]);
      }
    },
        m = function m(a) {
      return Math.sqrt(Math.pow(a[0] - a[2], 2) + Math.pow(a[1] - a[3], 2));
    },
        n = function n(a) {
      var b = [];return b.push.apply(b, a), b;
    },
        o = function o(a, b, c) {
      for (var d, f = null, g = 0; g < b.length - 1; g++) {
        if (f = f || n(b[g]), d = n(b[g + 1]), j > 0 && f[4] != d[4]) {
          var h = Math.min(j, m(f), m(d));f[2] -= f[5] * h, f[3] -= f[6] * h, d[0] += d[5] * h, d[1] += d[6] * h;var i = f[6] == d[5] && 1 == d[5] || f[6] == d[5] && 0 === d[5] && f[5] != d[6] || f[6] == d[5] && -1 == d[5],
              k = d[1] > f[3] ? 1 : -1,
              l = d[0] > f[2] ? 1 : -1,
              o = k == l,
              p = o && i || !o && !i ? d[0] : f[2],
              q = o && i || !o && !i ? f[3] : d[1];e.addSegment(a, "Straight", { x1: f[0], y1: f[1], x2: f[2], y2: f[3] }), e.addSegment(a, "Arc", { r: h, x1: f[2], y1: f[3], x2: d[0], y2: d[1], cx: p, cy: q, ac: i });
        } else {
          var r = f[2] == f[0] ? 0 : f[2] > f[0] ? c.lw / 2 : -(c.lw / 2),
              s = f[3] == f[1] ? 0 : f[3] > f[1] ? c.lw / 2 : -(c.lw / 2);e.addSegment(a, "Straight", { x1: f[0] - r, y1: f[1] - s, x2: f[2] + r, y2: f[3] + s });
        }f = d;
      }null != d && e.addSegment(a, "Straight", { x1: d[0], y1: d[1], x2: d[2], y2: d[3] });
    };this._compute = function (a, b) {
      c = [], h = null, i = null, d = null;var j = function j() {
        return [a.startStubX, a.startStubY, a.endStubX, a.endStubY];
      },
          k = { perpendicular: j, orthogonal: j, opposite: function opposite(b) {
          var c = a,
              d = "x" == b ? 0 : 1,
              e = { x: function x() {
              return 1 == c.so[d] && (c.startStubX > c.endStubX && c.tx > c.startStubX || c.sx > c.endStubX && c.tx > c.sx) || -1 == c.so[d] && (c.startStubX < c.endStubX && c.tx < c.startStubX || c.sx < c.endStubX && c.tx < c.sx);
            }, y: function y() {
              return 1 == c.so[d] && (c.startStubY > c.endStubY && c.ty > c.startStubY || c.sy > c.endStubY && c.ty > c.sy) || -1 == c.so[d] && (c.startStubY < c.endStubY && c.ty < c.startStubY || c.sy < c.endStubY && c.ty < c.sy);
            } };return !g && e[b]() ? { x: [(a.sx + a.tx) / 2, a.startStubY, (a.sx + a.tx) / 2, a.endStubY], y: [a.startStubX, (a.sy + a.ty) / 2, a.endStubX, (a.sy + a.ty) / 2] }[b] : [a.startStubX, a.startStubY, a.endStubX, a.endStubY];
        } },
          m = k[a.anchorOrientation](a.sourceAxis),
          n = "x" == a.sourceAxis ? 0 : 1,
          p = "x" == a.sourceAxis ? 1 : 0,
          q = m[n],
          r = m[p],
          s = m[n + 2],
          t = m[p + 2];l(c, m[0], m[1], a);var u = a.startStubX + (a.endStubX - a.startStubX) * f,
          v = a.startStubY + (a.endStubY - a.startStubY) * f,
          w = { x: [0, 1], y: [1, 0] },
          x = { perpendicular: function perpendicular(b) {
          var c = a,
              d = { x: [[[1, 2, 3, 4], null, [2, 1, 4, 3]], null, [[4, 3, 2, 1], null, [3, 4, 1, 2]]], y: [[[3, 2, 1, 4], null, [2, 3, 4, 1]], null, [[4, 1, 2, 3], null, [1, 4, 3, 2]]] },
              e = { x: [[c.startStubX, c.endStubX], null, [c.endStubX, c.startStubX]], y: [[c.startStubY, c.endStubY], null, [c.endStubY, c.startStubY]] },
              f = { x: [[u, c.startStubY], [u, c.endStubY]], y: [[c.startStubX, v], [c.endStubX, v]] },
              g = { x: [[c.endStubX, c.startStubY]], y: [[c.startStubX, c.endStubY]] },
              h = { x: [[c.startStubX, c.endStubY], [c.endStubX, c.endStubY]], y: [[c.endStubX, c.startStubY], [c.endStubX, c.endStubY]] },
              i = { x: [[c.startStubX, v], [c.endStubX, v], [c.endStubX, c.endStubY]], y: [[u, c.startStubY], [u, c.endStubY], [c.endStubX, c.endStubY]] },
              j = { x: [c.startStubY, c.endStubY], y: [c.startStubX, c.endStubX] },
              k = w[b][0],
              l = w[b][1],
              m = c.so[k] + 1,
              n = c.to[l] + 1,
              o = -1 == c.to[l] && j[b][1] < j[b][0] || 1 == c.to[l] && j[b][1] > j[b][0],
              p = e[b][m][0],
              q = e[b][m][1],
              r = d[b][m][n];return c.segment == r[3] || c.segment == r[2] && o ? f[b] : c.segment == r[2] && p > q ? g[b] : c.segment == r[2] && q >= p || c.segment == r[1] && !o ? i[b] : c.segment == r[0] || c.segment == r[1] && o ? h[b] : void 0;
        }, orthogonal: function orthogonal(b, c, d, e, f) {
          var g = a,
              h = { x: -1 == g.so[0] ? Math.min(c, e) : Math.max(c, e), y: -1 == g.so[1] ? Math.min(c, e) : Math.max(c, e) }[b];return { x: [[h, d], [h, f], [e, f]], y: [[d, h], [f, h], [f, e]] }[b];
        }, opposite: function opposite(c, d, f, g) {
          var h = a,
              i = { x: "y", y: "x" }[c],
              j = { x: "height", y: "width" }[c],
              k = h["is" + c.toUpperCase() + "GreaterThanStubTimes2"];if (b.sourceEndpoint.elementId == b.targetEndpoint.elementId) {
            var l = f + (1 - b.sourceEndpoint.anchor[i]) * b.sourceInfo[j] + e.maxStub;return { x: [[d, l], [g, l]], y: [[l, d], [l, g]] }[c];
          }return !k || 1 == h.so[n] && d > g || -1 == h.so[n] && g > d ? { x: [[d, v], [g, v]], y: [[u, d], [u, g]] }[c] : 1 == h.so[n] && g > d || -1 == h.so[n] && d > g ? { x: [[u, h.sy], [u, h.ty]], y: [[h.sx, v], [h.tx, v]] }[c] : void 0;
        } },
          y = x[a.anchorOrientation](a.sourceAxis, q, r, s, t);if (y) for (var z = 0; z < y.length; z++) {
        l(c, y[z][0], y[z][1], a);
      }l(c, m[2], m[3], a), l(c, a.tx, a.ty, a), o(this, c, a);
    };
  };c.extend(d, b.Connectors.AbstractConnector), b.registerConnectorType(d, "Flowchart");
}.call("undefined" != typeof window ? window : undefined), function () {
  "use strict";
  var a = this,
      b = a.jsPlumb,
      c = a.jsPlumbUtil;b.Connectors.AbstractBezierConnector = function (a) {
    a = a || {};var c,
        d = a.showLoopback !== !1,
        e = (a.curviness || 10, a.margin || 5),
        f = (a.proximityLimit || 80, a.orientation && "clockwise" === a.orientation),
        g = a.loopbackRadius || 25,
        h = !1;return this.overrideSetEditable = function () {
      return !h;
    }, this._compute = function (a, b) {
      var i = b.sourcePos,
          j = b.targetPos,
          k = Math.abs(i[0] - j[0]),
          l = Math.abs(i[1] - j[1]);if (d && b.sourceEndpoint.elementId === b.targetEndpoint.elementId) {
        h = !0;var m = b.sourcePos[0],
            n = b.sourcePos[1] - e,
            o = m,
            p = n - g,
            q = o - g,
            r = p - g;k = 2 * g, l = 2 * g, a.points[0] = q, a.points[1] = r, a.points[2] = k, a.points[3] = l, c.addSegment(this, "Arc", { loopback: !0, x1: m - q + 4, y1: n - r, startAngle: 0, endAngle: 2 * Math.PI, r: g, ac: !f, x2: m - q - 4, y2: n - r, cx: o - q, cy: p - r });
      } else h = !1, this._computeBezier(a, b, i, j, k, l);
    }, c = b.Connectors.AbstractConnector.apply(this, arguments);
  }, c.extend(b.Connectors.AbstractBezierConnector, b.Connectors.AbstractConnector);var d = function d(a) {
    a = a || {}, this.type = "Bezier";var c = b.Connectors.AbstractBezierConnector.apply(this, arguments),
        d = a.curviness || 150,
        e = 10;this.getCurviness = function () {
      return d;
    }, this._findControlPoint = function (a, b, c, f, g, h, i) {
      var j = h[0] != i[0] || h[1] == i[1],
          k = [];return j ? (0 === i[0] ? k.push(c[0] < b[0] ? a[0] + e : a[0] - e) : k.push(a[0] + d * i[0]), 0 === i[1] ? k.push(c[1] < b[1] ? a[1] + e : a[1] - e) : k.push(a[1] + d * h[1])) : (0 === h[0] ? k.push(b[0] < c[0] ? a[0] + e : a[0] - e) : k.push(a[0] - d * h[0]), 0 === h[1] ? k.push(b[1] < c[1] ? a[1] + e : a[1] - e) : k.push(a[1] + d * i[1])), k;
    }, this._computeBezier = function (a, b, d, e, f, g) {
      var h,
          i,
          j = this.getGeometry(),
          k = d[0] < e[0] ? f : 0,
          l = d[1] < e[1] ? g : 0,
          m = d[0] < e[0] ? 0 : f,
          n = d[1] < e[1] ? 0 : g;(this.hasBeenEdited() || this.isEditing()) && null != j && null != j.controlPoints && null != j.controlPoints[0] && null != j.controlPoints[1] ? (h = j.controlPoints[0], i = j.controlPoints[1]) : (h = this._findControlPoint([k, l], d, e, b.sourceEndpoint, b.targetEndpoint, a.so, a.to), i = this._findControlPoint([m, n], e, d, b.targetEndpoint, b.sourceEndpoint, a.to, a.so)), c.setGeometry({ controlPoints: [h, i] }, !0), c.addSegment(this, "Bezier", { x1: k, y1: l, x2: m, y2: n, cp1x: h[0], cp1y: h[1], cp2x: i[0], cp2y: i[1] });
    };
  };c.extend(d, b.Connectors.AbstractBezierConnector), b.registerConnectorType(d, "Bezier");
}.call("undefined" != typeof window ? window : undefined), function () {
  "use strict";
  var a = this,
      b = a.jsPlumb,
      c = a.jsPlumbUtil,
      d = function d(a, b, c, _d6) {
    return c >= a && b >= _d6 ? 1 : c >= a && _d6 >= b ? 2 : a >= c && _d6 >= b ? 3 : 4;
  },
      e = function e(a, b, c, d, _e4, f, g, h, i) {
    return i >= h ? [a, b] : 1 === c ? d[3] <= 0 && _e4[3] >= 1 ? [a + (d[2] < .5 ? -1 * f : f), b] : d[2] >= 1 && _e4[2] <= 0 ? [a, b + (d[3] < .5 ? -1 * g : g)] : [a + -1 * f, b + -1 * g] : 2 === c ? d[3] >= 1 && _e4[3] <= 0 ? [a + (d[2] < .5 ? -1 * f : f), b] : d[2] >= 1 && _e4[2] <= 0 ? [a, b + (d[3] < .5 ? -1 * g : g)] : [a + f, b + -1 * g] : 3 === c ? d[3] >= 1 && _e4[3] <= 0 ? [a + (d[2] < .5 ? -1 * f : f), b] : d[2] <= 0 && _e4[2] >= 1 ? [a, b + (d[3] < .5 ? -1 * g : g)] : [a + -1 * f, b + -1 * g] : 4 === c ? d[3] <= 0 && _e4[3] >= 1 ? [a + (d[2] < .5 ? -1 * f : f), b] : d[2] <= 0 && _e4[2] >= 1 ? [a, b + (d[3] < .5 ? -1 * g : g)] : [a + f, b + -1 * g] : void 0;
  },
      f = function f(a) {
    a = a || {}, this.type = "StateMachine";var c,
        f = b.Connectors.AbstractBezierConnector.apply(this, arguments),
        g = a.curviness || 10,
        h = a.margin || 5,
        i = a.proximityLimit || 80;a.orientation && "clockwise" === a.orientation, this._computeBezier = function (a, b, j, k, l, m) {
      var n = b.sourcePos[0] < b.targetPos[0] ? 0 : l,
          o = b.sourcePos[1] < b.targetPos[1] ? 0 : m,
          p = b.sourcePos[0] < b.targetPos[0] ? l : 0,
          q = b.sourcePos[1] < b.targetPos[1] ? m : 0;0 === b.sourcePos[2] && (n -= h), 1 === b.sourcePos[2] && (n += h), 0 === b.sourcePos[3] && (o -= h), 1 === b.sourcePos[3] && (o += h), 0 === b.targetPos[2] && (p -= h), 1 === b.targetPos[2] && (p += h), 0 === b.targetPos[3] && (q -= h), 1 === b.targetPos[3] && (q += h);var r,
          s,
          t,
          u,
          v = (n + p) / 2,
          w = (o + q) / 2,
          x = d(n, o, p, q),
          y = Math.sqrt(Math.pow(p - n, 2) + Math.pow(q - o, 2)),
          z = f.getGeometry();(this.hasBeenEdited() || this.isEditing()) && null != z ? (r = z.controlPoints[0][0], t = z.controlPoints[0][1], s = z.controlPoints[1][0], u = z.controlPoints[1][1]) : (c = e(v, w, x, b.sourcePos, b.targetPos, g, g, y, i), r = c[0], s = c[0], t = c[1], u = c[1], f.setGeometry({ controlPoints: [c, c] }, !0)), f.addSegment(this, "Bezier", { x1: p, y1: q, x2: n, y2: o, cp1x: r, cp1y: t, cp2x: s, cp2y: u });
    };
  };c.extend(f, b.Connectors.AbstractBezierConnector), b.registerConnectorType(f, "StateMachine");
}.call("undefined" != typeof window ? window : undefined), function () {
  "use strict";
  var a = this,
      b = a.jsPlumb,
      c = a.jsPlumbUtil,
      d = "Straight",
      e = function e() {
    this.type = d;var a = b.Connectors.AbstractConnector.apply(this, arguments);this._compute = function (b) {
      a.addSegment(this, d, { x1: b.sx, y1: b.sy, x2: b.startStubX, y2: b.startStubY }), a.addSegment(this, d, { x1: b.startStubX, y1: b.startStubY, x2: b.endStubX, y2: b.endStubY }), a.addSegment(this, d, { x1: b.endStubX, y1: b.endStubY, x2: b.tx, y2: b.ty });
    };
  };c.extend(e, b.Connectors.AbstractConnector), b.registerConnectorType(e, d);
}.call("undefined" != typeof window ? window : undefined), function () {
  "use strict";
  var a = this,
      b = a.jsPlumb,
      c = a.jsPlumbUtil,
      d = { "stroke-linejoin": "stroke-linejoin", "stroke-dashoffset": "stroke-dashoffset", "stroke-linecap": "stroke-linecap" },
      e = "stroke-dasharray",
      f = "dashstyle",
      g = "linearGradient",
      h = "radialGradient",
      i = "defs",
      j = "fill",
      k = "stop",
      l = "stroke",
      m = "stroke-width",
      n = "style",
      o = "none",
      p = "jsplumb_gradient_",
      q = "strokeWidth",
      r = { svg: "http://www.w3.org/2000/svg", xhtml: "http://www.w3.org/1999/xhtml" },
      s = function s(a, b) {
    for (var c in b) {
      a.setAttribute(c, "" + b[c]);
    }
  },
      t = function t(a, c) {
    return c = c || {}, c.version = "1.1", c.xmlns = r.xhtml, b.createElementNS(r.svg, a, null, null, c);
  },
      u = function u(a) {
    return "position:absolute;left:" + a[0] + "px;top:" + a[1] + "px";
  },
      v = function v(a) {
    for (var b = a.querySelectorAll(" defs,linearGradient,radialGradient"), c = 0; c < b.length; c++) {
      b[c].parentNode.removeChild(b[c]);
    }
  },
      w = function w(a, b, c, d, e) {
    var f = p + e._jsPlumb.instance.idstamp();v(a);var m;m = c.gradient.offset ? t(h, { id: f }) : t(g, { id: f, gradientUnits: "userSpaceOnUse" });var n = t(i);a.appendChild(n), n.appendChild(m);for (var o = 0; o < c.gradient.stops.length; o++) {
      var q = 1 == e.segment || 2 == e.segment ? o : c.gradient.stops.length - 1 - o,
          r = c.gradient.stops[q][1],
          s = t(k, { offset: Math.floor(100 * c.gradient.stops[o][0]) + "%", "stop-color": r });m.appendChild(s);
    }var u = c.stroke ? l : j;b.setAttribute(u, "url(#" + f + ")");
  },
      x = function x(a, b, c, g, h) {
    if (b.setAttribute(j, c.fill ? c.fill : o), b.setAttribute(l, c.stroke ? c.stroke : o), c.gradient ? w(a, b, c, g, h) : (v(a), b.setAttribute(n, "")), c.strokeWidth && b.setAttribute(m, c.strokeWidth), c[f] && c[q] && !c[e]) {
      var i = -1 == c[f].indexOf(",") ? " " : ",",
          k = c[f].split(i),
          p = "";k.forEach(function (a) {
        p += Math.floor(a * c.strokeWidth) + i;
      }), b.setAttribute(e, p);
    } else c[e] && b.setAttribute(e, c[e]);for (var r in d) {
      c[r] && b.setAttribute(d[r], c[r]);
    }
  },
      y = function y(a, b, c) {
    a.childNodes.length > c ? a.insertBefore(b, a.childNodes[c]) : a.appendChild(b);
  };c.svg = { node: t, attr: s, pos: u };var z = function z(a) {
    var d = a.pointerEventsSpec || "all",
        e = {};b.jsPlumbUIComponent.apply(this, a.originalArgs), this.canvas = null, this.path = null, this.svg = null, this.bgCanvas = null;var f = a.cssClass + " " + (a.originalArgs[0].cssClass || ""),
        g = { style: "", width: 0, height: 0, "pointer-events": d, position: "absolute" };this.svg = t("svg", g), a.useDivWrapper ? (this.canvas = b.createElement("div", { position: "absolute" }), c.sizeElement(this.canvas, 0, 0, 1, 1), this.canvas.className = f) : (s(this.svg, { "class": f }), this.canvas = this.svg), a._jsPlumb.appendElement(this.canvas, a.originalArgs[0].parent), a.useDivWrapper && this.canvas.appendChild(this.svg);var h = [this.canvas];return this.getDisplayElements = function () {
      return h;
    }, this.appendDisplayElement = function (a) {
      h.push(a);
    }, this.paint = function (b, d, f) {
      if (null != b) {
        var g,
            h = [this.x, this.y],
            i = [this.w, this.h];null != f && (f.xmin < 0 && (h[0] += f.xmin), f.ymin < 0 && (h[1] += f.ymin), i[0] = f.xmax + (f.xmin < 0 ? -f.xmin : 0), i[1] = f.ymax + (f.ymin < 0 ? -f.ymin : 0)), a.useDivWrapper ? (c.sizeElement(this.canvas, h[0], h[1], i[0], i[1]), h[0] = 0, h[1] = 0, g = u([0, 0])) : g = u([h[0], h[1]]), e.paint.apply(this, arguments), s(this.svg, { style: g, width: i[0] || 0, height: i[1] || 0 });
      }
    }, { renderer: e };
  };c.extend(z, b.jsPlumbUIComponent, { cleanup: function cleanup(a) {
      a || null == this.typeId ? (this.canvas && (this.canvas._jsPlumb = null), this.svg && (this.svg._jsPlumb = null), this.bgCanvas && (this.bgCanvas._jsPlumb = null), this.canvas && this.canvas.parentNode && this.canvas.parentNode.removeChild(this.canvas), this.bgCanvas && this.bgCanvas.parentNode && this.canvas.parentNode.removeChild(this.canvas), this.svg = null, this.canvas = null, this.path = null, this.group = null) : (this.canvas && this.canvas.parentNode && this.canvas.parentNode.removeChild(this.canvas), this.bgCanvas && this.bgCanvas.parentNode && this.bgCanvas.parentNode.removeChild(this.bgCanvas));
    }, reattach: function reattach(a) {
      var b = a.getContainer();this.canvas && null == this.canvas.parentNode && b.appendChild(this.canvas), this.bgCanvas && null == this.bgCanvas.parentNode && b.appendChild(this.bgCanvas);
    }, setVisible: function setVisible(a) {
      this.canvas && (this.canvas.style.display = a ? "block" : "none");
    } }), b.ConnectorRenderers.svg = function (a) {
    var c = this,
        d = z.apply(this, [{ cssClass: a._jsPlumb.connectorClass + (this.isEditable() ? " " + a._jsPlumb.editableConnectorClass : ""), originalArgs: arguments, pointerEventsSpec: "none", _jsPlumb: a._jsPlumb }]),
        e = this.setEditable;this.setEditable = function (a) {
      var c = e.apply(this, [a]);b[c ? "addClass" : "removeClass"](this.canvas, this._jsPlumb.instance.editableConnectorClass);
    }, d.renderer.paint = function (d, e, f) {
      var g = c.getSegments(),
          h = "",
          i = [0, 0];if (f.xmin < 0 && (i[0] = -f.xmin), f.ymin < 0 && (i[1] = -f.ymin), g.length > 0) {
        h = c.getPathData();var j = { d: h, transform: "translate(" + i[0] + "," + i[1] + ")", "pointer-events": a["pointer-events"] || "visibleStroke" },
            k = null,
            l = [c.x, c.y, c.w, c.h];if (d.outlineStroke) {
          var m = d.outlineWidth || 1,
              n = d.strokeWidth + 2 * m;k = b.extend({}, d), delete k.gradient, k.stroke = d.outlineStroke, k.strokeWidth = n, null == c.bgPath ? (c.bgPath = t("path", j), b.addClass(c.bgPath, b.connectorOutlineClass), y(c.svg, c.bgPath, 0)) : s(c.bgPath, j), x(c.svg, c.bgPath, k, l, c);
        }null == c.path ? (c.path = t("path", j), y(c.svg, c.path, d.outlineStroke ? 1 : 0)) : s(c.path, j), x(c.svg, c.path, d, l, c);
      }
    };
  }, c.extend(b.ConnectorRenderers.svg, z);var A = b.SvgEndpoint = function (a) {
    var c = z.apply(this, [{ cssClass: a._jsPlumb.endpointClass, originalArgs: arguments, pointerEventsSpec: "all", useDivWrapper: !0, _jsPlumb: a._jsPlumb }]);c.renderer.paint = function (a) {
      var c = b.extend({}, a);c.outlineStroke && (c.strokeWidth = c.strokeWidth, c.stroke = c.outlineStroke), null == this.node ? (this.node = this.makeNode(c), this.svg.appendChild(this.node)) : null != this.updateNode && this.updateNode(this.node), x(this.svg, this.node, c, [this.x, this.y, this.w, this.h], this), u(this.node, [this.x, this.y]);
    }.bind(this);
  };c.extend(A, z), b.Endpoints.svg.Dot = function () {
    b.Endpoints.Dot.apply(this, arguments), A.apply(this, arguments), this.makeNode = function () {
      return t("circle", { cx: this.w / 2, cy: this.h / 2, r: this.radius });
    }, this.updateNode = function (a) {
      s(a, { cx: this.w / 2, cy: this.h / 2, r: this.radius });
    };
  }, c.extend(b.Endpoints.svg.Dot, [b.Endpoints.Dot, A]), b.Endpoints.svg.Rectangle = function () {
    b.Endpoints.Rectangle.apply(this, arguments), A.apply(this, arguments), this.makeNode = function () {
      return t("rect", { width: this.w, height: this.h });
    }, this.updateNode = function (a) {
      s(a, { width: this.w, height: this.h });
    };
  }, c.extend(b.Endpoints.svg.Rectangle, [b.Endpoints.Rectangle, A]), b.Endpoints.svg.Image = b.Endpoints.Image, b.Endpoints.svg.Blank = b.Endpoints.Blank, b.Overlays.svg.Label = b.Overlays.Label, b.Overlays.svg.Custom = b.Overlays.Custom;var B = function B(a, c) {
    a.apply(this, c), b.jsPlumbUIComponent.apply(this, c), this.isAppendedAtTopLevel = !1, this.path = null, this.paint = function (a, b) {
      if (a.component.svg && b) {
        null == this.path && (this.path = t("path", { "pointer-events": "all" }), a.component.svg.appendChild(this.path), this.elementCreated && this.elementCreated(this.path, a.component), this.canvas = a.component.svg);var e = c && 1 == c.length ? c[0].cssClass || "" : "",
            f = [0, 0];b.xmin < 0 && (f[0] = -b.xmin), b.ymin < 0 && (f[1] = -b.ymin), s(this.path, { d: d(a.d), "class": e, stroke: a.stroke ? a.stroke : null, fill: a.fill ? a.fill : null, transform: "translate(" + f[0] + "," + f[1] + ")" });
      }
    };var d = function d(a) {
      return isNaN(a.cxy.x) || isNaN(a.cxy.y) ? "" : "M" + a.hxy.x + "," + a.hxy.y + " L" + a.tail[0].x + "," + a.tail[0].y + " L" + a.cxy.x + "," + a.cxy.y + " L" + a.tail[1].x + "," + a.tail[1].y + " L" + a.hxy.x + "," + a.hxy.y;
    };this.transfer = function (a) {
      a.canvas && this.path && this.path.parentNode && (this.path.parentNode.removeChild(this.path), a.canvas.appendChild(this.path));
    };
  };c.extend(B, [b.jsPlumbUIComponent, b.Overlays.AbstractOverlay], { cleanup: function cleanup(a) {
      null != this.path && (a ? this._jsPlumb.instance.removeElement(this.path) : this.path.parentNode && this.path.parentNode.removeChild(this.path));
    }, reattach: function reattach() {
      this.path && this.canvas && null == this.path.parentNode && this.canvas.appendChild(this.path);
    }, setVisible: function setVisible(a) {
      null != this.path && (this.path.style.display = a ? "block" : "none");
    } }), b.Overlays.svg.Arrow = function () {
    B.apply(this, [b.Overlays.Arrow, arguments]);
  }, c.extend(b.Overlays.svg.Arrow, [b.Overlays.Arrow, B]), b.Overlays.svg.PlainArrow = function () {
    B.apply(this, [b.Overlays.PlainArrow, arguments]);
  }, c.extend(b.Overlays.svg.PlainArrow, [b.Overlays.PlainArrow, B]), b.Overlays.svg.Diamond = function () {
    B.apply(this, [b.Overlays.Diamond, arguments]);
  }, c.extend(b.Overlays.svg.Diamond, [b.Overlays.Diamond, B]), b.Overlays.svg.GuideLines = function () {
    var a,
        c,
        d = null,
        e = this;b.Overlays.GuideLines.apply(this, arguments), this.paint = function (b, g) {
      null == d && (d = t("path"), b.connector.svg.appendChild(d), e.attachListeners(d, b.connector), e.attachListeners(d, e), a = t("path"), b.connector.svg.appendChild(a), e.attachListeners(a, b.connector), e.attachListeners(a, e), c = t("path"), b.connector.svg.appendChild(c), e.attachListeners(c, b.connector), e.attachListeners(c, e));var h = [0, 0];g.xmin < 0 && (h[0] = -g.xmin), g.ymin < 0 && (h[1] = -g.ymin), s(d, { d: f(b.head, b.tail), stroke: "red", fill: null, transform: "translate(" + h[0] + "," + h[1] + ")" }), s(a, { d: f(b.tailLine[0], b.tailLine[1]), stroke: "blue", fill: null, transform: "translate(" + h[0] + "," + h[1] + ")" }), s(c, { d: f(b.headLine[0], b.headLine[1]), stroke: "green", fill: null, transform: "translate(" + h[0] + "," + h[1] + ")" });
    };var f = function f(a, b) {
      return "M " + a.x + "," + a.y + " L" + b.x + "," + b.y;
    };
  }, c.extend(b.Overlays.svg.GuideLines, b.Overlays.GuideLines);
}.call("undefined" != typeof window ? window : undefined), function () {
  "use strict";
  var a = this,
      b = a.jsPlumb,
      c = a.jsPlumbUtil,
      d = a.Katavorio,
      e = a.Biltong,
      f = function f(a, c) {
    c = c || "main";var f = "_katavorio_" + c,
        g = a[f],
        h = a.getEventManager();return g || (g = new d({ bind: h.on, unbind: h.off, getSize: b.getSize, getPosition: function getPosition(b, c) {
        var d = a.getOffset(b, c, b._katavorioDrag ? b.offsetParent : null);return [d.left, d.top];
      }, setPosition: function setPosition(a, b) {
        a.style.left = b[0] + "px", a.style.top = b[1] + "px";
      }, addClass: b.addClass, removeClass: b.removeClass, intersects: e.intersects, indexOf: function indexOf(a, b) {
        return a.indexOf(b);
      }, scope: a.getDefaultScope(), css: { noSelect: a.dragSelectClass, droppable: "jtk-droppable", draggable: "jtk-draggable", drag: "jtk-drag", selected: "jtk-drag-selected", active: "jtk-drag-active", hover: "jtk-drag-hover", ghostProxy: "jtk-ghost-proxy" } }), a[f] = g, a.bind("zoom", g.setZoom)), g;
  },
      g = function g(a, b) {
    var d = function d(_d7) {
      if (null != b[_d7]) {
        if (c.isString(b[_d7])) {
          var e = b[_d7].match(/-=/) ? -1 : 1,
              f = b[_d7].substring(2);return a[_d7] + e * f;
        }return b[_d7];
      }return a[_d7];
    };return [d("left"), d("top")];
  };b.extend(a.jsPlumbInstance.prototype, { animationSupported: !0, getElement: function getElement(a) {
      return null == a ? null : (a = "string" == typeof a ? a : null != a.length && null == a.enctype ? a[0] : a, "string" == typeof a ? document.getElementById(a) : a);
    }, removeElement: function removeElement(a) {
      f(this).elementRemoved(a), this.getEventManager().remove(a);
    }, doAnimate: function doAnimate(a, c, d) {
      d = d || {};var e = this.getOffset(a),
          f = g(e, c),
          h = f[0] - e.left,
          i = f[1] - e.top,
          j = d.duration || 250,
          k = 15,
          l = j / k,
          m = k / j * h,
          n = k / j * i,
          o = 0,
          p = setInterval(function () {
        b.setPosition(a, { left: e.left + m * (o + 1), top: e.top + n * (o + 1) }), null != d.step && d.step(o, Math.ceil(l)), o++, o >= l && (window.clearInterval(p), null != d.complete && d.complete());
      }, k);
    }, destroyDraggable: function destroyDraggable(a, b) {
      f(this, b).destroyDraggable(a);
    }, destroyDroppable: function destroyDroppable(a, b) {
      f(this, b).destroyDroppable(a);
    }, initDraggable: function initDraggable(a, b, c) {
      f(this, c).draggable(a, b);
    }, initDroppable: function initDroppable(a, b, c) {
      f(this, c).droppable(a, b);
    }, isAlreadyDraggable: function isAlreadyDraggable(a) {
      return null != a._katavorioDrag;
    }, isDragSupported: function isDragSupported() {
      return !0;
    }, isDropSupported: function isDropSupported() {
      return !0;
    }, isElementDraggable: function isElementDraggable(a) {
      return a = b.getElement(a), a._katavorioDrag && a._katavorioDrag.isEnabled();
    }, getDragObject: function getDragObject(a) {
      return a[0].drag.getDragElement();
    }, getDragScope: function getDragScope(a) {
      return a._katavorioDrag && a._katavorioDrag.scopes.join(" ") || "";
    }, getDropEvent: function getDropEvent(a) {
      return a[0].e;
    }, getUIPosition: function getUIPosition(a) {
      var b = a[0].el;if (null == b.offsetParent) return null;var c = a[0].finalPos || a[0].pos,
          d = { left: c[0], top: c[1] };if (b._katavorioDrag && b.offsetParent !== this.getContainer()) {
        var e = this.getOffset(b.offsetParent);d.left += e.left, d.top += e.top;
      }return d;
    }, setDragFilter: function setDragFilter(a, b, c) {
      a._katavorioDrag && a._katavorioDrag.setFilter(b, c);
    }, setElementDraggable: function setElementDraggable(a, c) {
      a = b.getElement(a), a._katavorioDrag && a._katavorioDrag.setEnabled(c);
    }, setDragScope: function setDragScope(a, b) {
      a._katavorioDrag && a._katavorioDrag.k.setDragScope(a, b);
    }, setDropScope: function setDropScope(a, b) {
      a._katavorioDrop && a._katavorioDrop.length > 0 && a._katavorioDrop[0].k.setDropScope(a, b);
    }, addToPosse: function addToPosse(a) {
      var c = Array.prototype.slice.call(arguments, 1),
          d = f(this);b.each(a, function (a) {
        a = [b.getElement(a)], a.push.apply(a, c), d.addToPosse.apply(d, a);
      });
    }, setPosse: function setPosse(a) {
      var c = Array.prototype.slice.call(arguments, 1),
          d = f(this);b.each(a, function (a) {
        a = [b.getElement(a)], a.push.apply(a, c), d.setPosse.apply(d, a);
      });
    }, removeFromPosse: function removeFromPosse(a) {
      var c = Array.prototype.slice.call(arguments, 1),
          d = f(this);b.each(a, function (a) {
        a = [b.getElement(a)], a.push.apply(a, c), d.removeFromPosse.apply(d, a);
      });
    }, removeFromAllPosses: function removeFromAllPosses(a) {
      var c = f(this);b.each(a, function (a) {
        c.removeFromAllPosses(b.getElement(a));
      });
    }, setPosseState: function setPosseState(a, c, d) {
      var e = f(this);b.each(a, function (a) {
        e.setPosseState(b.getElement(a), c, d);
      });
    }, dragEvents: { start: "start", stop: "stop", drag: "drag", step: "step", over: "over", out: "out", drop: "drop", complete: "complete", beforeStart: "beforeStart" }, animEvents: { step: "step", complete: "complete" }, stopDrag: function stopDrag(a) {
      a._katavorioDrag && a._katavorioDrag.abort();
    }, addToDragSelection: function addToDragSelection(a) {
      f(this).select(a);
    }, removeFromDragSelection: function removeFromDragSelection(a) {
      f(this).deselect(a);
    }, clearDragSelection: function clearDragSelection() {
      f(this).deselectAll();
    }, trigger: function trigger(a, b, c, d) {
      this.getEventManager().trigger(a, b, c, d);
    }, doReset: function doReset() {
      for (var a in this) {
        0 === a.indexOf("_katavorio_") && this[a].reset();
      }
    } });var h = function h(a) {
    var b = function b() {
      /complete|loaded|interactive/.test(document.readyState) && "undefined" != typeof document.body && null != document.body ? a() : setTimeout(b, 9);
    };b();
  };h(b.init);
}.call("undefined" != typeof window ? window : undefined);

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgZmEwN2Y2YTAzYjgzYzVjOTJmM2M/MTcwMiIsIndlYnBhY2s6Ly8vLi91dGlscy9ub2RlRmFjdG9yeS5qcz9jMTVlIiwid2VicGFjazovLy8uL3V0aWxzL3B1YnN1Yi5qcz9mY2VkIiwid2VicGFjazovLy8uL2NhZC9zY2VuZS9wYW5lbC5qcyIsIndlYnBhY2s6Ly8vLi9jYWQvc2NlbmUvc2NlbmUuanMiLCJ3ZWJwYWNrOi8vLy4uL3Nhc3MvY2FkLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vY2FkL2luZGV4LmpzIiwid2VicGFjazovLy8uL2NhZC9zY2VuZS9hY3Rpb25TdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9jYWQvc2NlbmUvcGFyYW1TdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9jYWQvc2NlbmUvc3RhdGVQYW5lbC5qcyIsIndlYnBhY2s6Ly8vLi9jYWQvc2NlbmUvc3RhdGVTdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9jYWQvc2NlbmUvdG9vbFN0b3JlLmpzIiwid2VicGFjazovLy8uL2NhZC9zY2hlbWUvaWRHZW4uanMiLCJ3ZWJwYWNrOi8vLy4vY2FkL3NjaGVtZS9zY2hlbWUuanMiLCJ3ZWJwYWNrOi8vLy4vdXRpbHMvanNwbHVtYi5taW4uanMiXSwibmFtZXMiOlsibm9kZUZhY3RvcnkiLCJ0eXBlIiwicGFyYW1zIiwibm9kZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZENsYXNzZXMiLCJhcHBlbmRBdHRycyIsImluc2VydFRleHRDb250ZW50IiwiY2xhc3NMaXN0IiwiZm9yRWFjaCIsImFkZCIsImNsYXNzTmFtZSIsImF0dHJzIiwiYXR0ck5hbWVzIiwiT2JqZWN0Iiwia2V5cyIsInNldEF0dHJpYnV0ZSIsImF0dHJOYW1lIiwidGV4dENvbnRlbnQiLCJwdWJzdWIiLCJ0b3BpY3MiLCJzdWJzY3JpYmUiLCJ0b3BpYyIsImxpc3RlbmVyIiwicXVldWUiLCJpbmRleCIsInB1c2giLCJyZW1vdmUiLCJwdWJsaXNoIiwiaW5mbyIsImxlbmd0aCIsIml0ZW1zIiwiaXRlbSIsInRvZ2dsZUxpc3REaXNwbGF5IiwiZmxhZyIsIiRsaXN0IiwiJGljb24iLCJzaG93TGlzdCIsImhpZGVMaXN0Iiwic3R5bGUiLCJkaXNwbGF5IiwiYXBwZW5kTGlzdEVsZW1lbnQiLCJlbGVtZW50IiwiJGxpIiwiYXBwZW5kQ2hpbGQiLCJhcHBlbmRDaGlsZHJlbiIsInBhcmVudCIsImNoaWxkcmVuIiwiY2hpbGQiLCJzY2VuZSIsInNjaGVtZSIsIiRzdGF0ZVBhbmVsIiwicXVlcnlTZWxlY3RvciIsIiRwcm9wc1BhbmVsIiwiJGNhZFdyYXBwZXIiLCIkY2FkUGFuZSIsIm9wZW5lZFRhYnMiLCJzZXRGbGV4UmF0aW8iLCJlbCIsInJhdGlvIiwiZmxleCIsInNob3dUYWIiLCIkdGFiIiwiY29udGFpbnMiLCJoaWRlVGFiIiwic2hvd1Byb3BzUGFuZWwiLCJoaWRlUHJvcHNQYW5lbCIsInNob3dTdGF0ZVBhbmVsIiwiaGlkZVN0YXRlUGFuZWwiLCIkbW9kZWxOYW1lSW5wdXQiLCJoYW5kbGVNb2RlbFBhcmFtQ2hhbmdlIiwiJGJyZWFrVGltZUlucHV0IiwiJHN0ZXBzSW5wdXQiLCIkbm9kZSIsImhhbmRsZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInRhcmdldCIsInZhbHVlIiwiJHRvb2xzT3BlbkJ0biIsIiR0b29sc09wZW5JY29uIiwiJGFkZFRvb2xCdG4iLCIkdG9vbHNMaXN0IiwidG9vbHNMaXN0Q2xvc2VkIiwidG9vbCIsImFkZFRvb2wiLCJzdWJzY3JpcHRpb25zIiwidG9vbFR5cGVDaGFuZ2UiLCJ0b29sTmFtZUNoYW5nZSIsInRvb2xWYWx1ZUNoYW5nZSIsInN0YXRlTmFtZUNoYW5nZSIsInN0YXRlSW1nQ2hhbmdlIiwiZXZlbnROYW1lQ2hhbmdlIiwiZXZlbnREZXNjQ2hhbmdlIiwicGFyYW1OYW1lQ2hhbmdlIiwicGFyYW1WYWx1ZUNoYW5nZSIsImtleSIsInNldEhhbmRsZXJGb3JUb3BpYyIsImRhdGEiLCIkc3RhdGVOb2RlIiwiaWQiLCIkc3RhdGVOYW1lIiwibmV3UGFyYW0iLCJhZGRQYXJhbWV0ZXIiLCJhcHBlbmRQYXJhbSIsIiRwYXJhbVdyYXBwZXIiLCJuZXdBY3Rpb24iLCJhZGRBY3Rpb24iLCJhcHBlbmRBY3Rpb24iLCIkYWN0aW9uV3JhcHBlciIsInNvdXJjZSIsImFjdGlvbklkIiwiY29ubmVjdCIsInNldEFjdGlvbiIsImFkZFN0YXRlIiwic3RhdGUiLCJkcmFnZ2FibGUiLCJjb250YWlubWVudCIsInByZXZlbnREZWZhdWx0IiwiZmlsbENvbnRlbnQiLCIkbmV3U3RhdGVCdXR0b24iLCIkbW9kZWxQcm9wc0J1dHRvbiIsIiRzdGF0ZUNsb3NlQnV0dG9uIiwiJHByb3BzQ2xvc2VCdXR0b24iLCJjcmVhdGVBY3Rpb24iLCJEYXRlIiwibm93IiwibmV4dFN0YXRlIiwidG9vbHMiLCIkbmV4dFN0YXRlTGFiZWwiLCIkbmV4dFN0YXRlU2VsZWN0Iiwic3RhdGVzIiwic3RhdGVJZCIsIm5hbWUiLCIkb3B0aW9uIiwiY3JlYXRlQ29ubmVjdGlvbiIsIiR0b29sc0hlYWRlciIsIiR0b29sc0hlYWRlckxhYmVsIiwiJHRvb2xzSGVhZGVySWNvbiIsImFkZEFjdGlvblRvb2wiLCIkc2VsIiwibmV4dElkIiwiY29uc29sZSIsIndhcm4iLCIkcGFyZW50IiwiZm9vIiwiJHdyYXBwZXIiLCIkc2VsZWN0IiwiZmlsbFRvb2xzU2VsZWN0IiwiYWRkQWN0aW9uVG9vbFByb3BzIiwidG9vbElkIiwiJG9wdCIsInNPcHRpb24iLCJvcHRpb25zIiwic2VsZWN0ZWRJbmRleCIsIiRkaXYiLCJkYXRhc2V0IiwiY3JlYXRlU3dpdGNoUHJvcHMiLCJjcmVhdGVSYW5nZVByb3BzIiwiJGxhYmVsIiwiZm9yIiwiJGlucHV0IiwiJGlucHV0TWluIiwicGxhY2Vob2xkZXIiLCIkaW5wdXRNYXgiLCJjcmVhdGVQYXJhbU5vZGUiLCIkbmFtZUlucHV0IiwibmV3TmFtZSIsIiR2YWx1ZUlucHV0IiwibmV3VmFsdWUiLCJzdGF0ZVBhbmVsIiwiJGN1cnJlbnRTdGF0ZUlkIiwiJHN0YXRlTmFtZUlucHV0IiwiJGltZ1NlbGVjdCIsIiRldmVudE5hbWVJbnB1dCIsIiRldmVudERlc2NJbnB1dCIsIiRwYXJhbXNMaXN0IiwiJGFjdGlvbnNMaXN0IiwiaW1nIiwiZXZlbnROYW1lIiwiZXZlbnREZXNjIiwiaW5uZXJIVE1MIiwicGFyYW1JZCIsImFjdGlvbnMiLCJwdWJsaXNoT25DaGFuZ2UiLCJldmVudCIsIiRwYXJhbXNPcGVuQnRuIiwiJHBhcmFtc09wZW5JY29uIiwiJGFkZFBhcmFtQnRuIiwicGFyYW1zTGlzdENsb3NlZCIsIiRhY3Rpb25zT3BlbkJ0biIsIiRhY3Rpb25zT3Blbkljb24iLCIkYWRkQWN0aW9uQnRuIiwiYWN0aW9uc0xpc3RDbG9zZWQiLCJjcmVhdGVTdGF0ZU5vZGUiLCJUT09MX1RZUEVTIiwiY3JlYXRlVG9vbE5vZGUiLCJtaW5WYWx1ZSIsIm1heFZhbHVlIiwidG9Mb3dlckNhc2UiLCIkdG9vbFdyYXBwZXIiLCIkbmFtZUxhYmVsIiwiJHRvb2xUeXBlV3JhcHBlciIsIiR0b29sVHlwZUxhYmVsIiwiJHRvb2xUeXBlU2VsZWN0IiwiY3JlYXRlT3B0aW9uIiwidG9vbFR5cGUiLCIkcmFuZ2VWYWx1ZXMiLCJjcmVhdGVSYW5nZVZhbHVlcyIsInRleHQiLCJsaW1pdCIsIm1hcCIsImNyZWF0ZVJhbmdlVmFsdWUiLCJnZW5lcmF0ZUlkIiwiaW5pdGlhbFZhbHVlIiwiZ2VuZXJhdGUiLCJzdGF0ZUlkR2VuIiwidG9vbElkR2VuIiwicGFyYW1JZEdlbiIsImFjdGlvbklkR2VuIiwiU2NoZW1lIiwibW9kZWxOYW1lIiwiYnJlYWtUaW1lIiwic3RlcHMiLCJsb2ciLCJhZGRDb21wb25lbnQiLCJuZXdDb21wb25lbnQiLCJnZW4iLCJzdG9yZSIsImxpc3QiLCJwcm9wIiwiTWF0aCIsInNnbiIsImEiLCJzdWJ0cmFjdCIsImIiLCJ4IiwieSIsImRvdFByb2R1Y3QiLCJzcXVhcmUiLCJzcXJ0Iiwic2NhbGUiLCJjIiwicG93IiwiZCIsImYiLCJoIiwiaSIsImoiLCJnIiwiayIsIm0iLCJuIiwibyIsImwiLCJwIiwibG9jYXRpb24iLCJkaXN0YW5jZSIsInBvaW50IiwicGFyc2VGbG9hdCIsInEiLCJyIiwibWF4IiwicyIsIm1pbiIsInQiLCJtYXhfZGlzdGFuY2VfYmVsb3ciLCJ1IiwidiIsImFicyIsInNsaWNlIiwiYXRhbiIsInciLCJzaW4iLCJjb3MiLCJqc0JlemllciIsImRpc3RhbmNlRnJvbUN1cnZlIiwiZ3JhZGllbnRBdFBvaW50IiwiZ3JhZGllbnRBdFBvaW50QWxvbmdDdXJ2ZUZyb20iLCJuZWFyZXN0UG9pbnRPbkN1cnZlIiwicG9pbnRPbkN1cnZlIiwicG9pbnRBbG9uZ0N1cnZlRnJvbSIsInBlcnBlbmRpY3VsYXJUb0N1cnZlQXQiLCJsb2NhdGlvbkFsb25nQ3VydmVGcm9tIiwiZ2V0TGVuZ3RoIiwidmVyc2lvbiIsImV4cG9ydHMiLCJjYWxsIiwid2luZG93IiwiQmlsdG9uZyIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiZ3JhZGllbnQiLCJub3JtYWwiLCJsaW5lTGVuZ3RoIiwicXVhZHJhbnQiLCJ0aGV0YSIsIlBJIiwiaW50ZXJzZWN0cyIsImVuY2xvc2VzIiwicG9pbnRPbkxpbmUiLCJwZXJwZW5kaWN1bGFyTGluZVRvIiwiYW5kcm9pZCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImluZGV4T2YiLCJwYXJlbnROb2RlIiwicXVlcnlTZWxlY3RvckFsbCIsImNvbnN0cnVjdG9yIiwiU3RyaW5nIiwiZ2V0RWxlbWVudEJ5SWQiLCJzcmNFbGVtZW50IiwicGF0aCIsImVuZCIsInNwbGljZSIsIl9fdGEiLCJfX3RhdWlkIiwiX190YUV4dHJhIiwiRiIsIl9fdGFVbnN0b3JlIiwic3BsaXQiLCJhcHBseSIsImFyZ3VtZW50cyIsIkUiLCJnZXRBdHRyaWJ1dGUiLCJfX3RhU21hcnRDbGlja3MiLCJfX3RhZCIsIl9fdGF1IiwidGFwIiwidG91Y2hlcyIsInRhcHMiLCJkYmx0YXAiLCJjb250ZXh0bWVudSIsIl9fdGFUYXBIYW5kbGVyIiwiZG93biIsImRvd25TZWxlY3RvcnMiLCJzZXRUaW1lb3V0IiwiRCIsImhhc093blByb3BlcnR5IiwiX190YW1lZSIsIm92ZXIiLCJtb3VzZWVudGVyIiwibW91c2VleGl0IiwicmVsYXRlZFRhcmdldCIsInRvRWxlbWVudCIsImRvY3VtZW50RWxlbWVudCIsIm1vdXNlZG93biIsIm1vdXNldXAiLCJtb3VzZW1vdmUiLCJhcHBOYW1lIiwiUmVnRXhwIiwiZXhlYyIsIiQxIiwiQyIsIkIiLCJjbGllbnRYIiwic2Nyb2xsTGVmdCIsImNsaWVudFkiLCJzY3JvbGxUb3AiLCJ6IiwiQSIsImNoYW5nZWRUb3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImF0dGFjaEV2ZW50IiwiRyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsIl9fdGFUb3VjaFByb3h5IiwiV2luZG93IiwidG9wIiwidGFnTmFtZSIsIk1vdHRsZSIsImNsaWNrVGhyZXNob2xkIiwiZGJsQ2xpY2tUaHJlc2hvbGQiLCJzbWFydENsaWNrcyIsInJlbW92ZUNoaWxkIiwib24iLCJvZmYiLCJ0cmlnZ2VyIiwiTW91c2VFdmVudCIsInNjcmVlblgiLCJzY3JlZW5ZIiwicGF5bG9hZCIsIlRvdWNoRXZlbnQiLCJjcmVhdGVUb3VjaCIsImNyZWF0ZVRvdWNoTGlzdCIsImluaXRUb3VjaEV2ZW50IiwiTW91c2VFdmVudHMiLCJpbml0TW91c2VFdmVudCIsImNyZWF0ZUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImNyZWF0ZUV2ZW50T2JqZWN0IiwiZXZlbnRUeXBlIiwiZmlyZUV2ZW50IiwiY29uc3VtZSIsInN0b3BQcm9wYWdhdGlvbiIsInJldHVyblZhbHVlIiwicGFnZUxvY2F0aW9uIiwic2V0Rm9yY2VUb3VjaEV2ZW50cyIsInNldEZvcmNlTW91c2VFdmVudHMiLCJ1bnNoaWZ0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYm9keSIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJjbGllbnRUb3AiLCJjbGllbnRMZWZ0IiwibGVmdCIsInJvdW5kIiwicGFnZVgiLCJwYWdlWSIsImRyb3BwYWJsZSIsImRyYWciLCJzZWxlY3RlZCIsImFjdGl2ZSIsImhvdmVyIiwibm9TZWxlY3QiLCJnaG9zdFByb3h5Iiwic2V0QWN0aXZlIiwidXBkYXRlUG9zaXRpb24iLCJzZXRIb3ZlciIsImdldElucHV0RmlsdGVyU2VsZWN0b3IiLCJhZGRDbGFzcyIsIl9jbGFzcyIsInV1aWQiLCJzZXRFbmFibGVkIiwiaXNFbmFibGVkIiwidG9nZ2xlRW5hYmxlZCIsInNldFNjb3BlIiwic2NvcGVzIiwiYWRkU2NvcGUiLCJyZW1vdmVTY29wZSIsInRvZ2dsZVNjb3BlIiwic2NvcGUiLCJrYXRhdm9yaW8iLCJyaWdodEJ1dHRvbkNhbkRyYWciLCJjb25zdW1lU3RhcnRFdmVudCIsImNsb25lIiwic2Nyb2xsIiwibXVsdGlwbGVEcm9wIiwiY2xvbmVOb2RlIiwic25hcFRocmVzaG9sZCIsIkgiLCJmbG9vciIsInBvc3NlcyIsInBvc3NlUm9sZXMiLCJ0b0dyaWQiLCJncmlkIiwic25hcCIsImdldFBvc2l0aW9uIiwic2V0UG9zaXRpb24iLCJzZXRVc2VHaG9zdFByb3h5IiwiSSIsIkoiLCJhbGxvd05lZ2F0aXZlIiwiSyIsIlEiLCJzaXplIiwiYmluZCIsImNvbnN0cmFpbiIsInNldENvbnN0cmFpbiIsIkwiLCJzZXRSZXZlcnQiLCJNIiwiX2thdGF2b3Jpb0lkIiwiTiIsIk8iLCJQIiwic2V0RmlsdGVyIiwiYWRkRmlsdGVyIiwicmVtb3ZlRmlsdGVyIiwiY2xlYXJBbGxGaWx0ZXJzIiwiY2FuRHJhZyIsIlIiLCJTIiwiZG93bkxpc3RlbmVyIiwid2hpY2giLCJidXR0b24iLCJwb3NpdGlvbiIsIm1vdmVMaXN0ZW5lciIsInVwTGlzdGVuZXIiLCJtYXJrU2VsZWN0aW9uIiwibWFya1Bvc3NlcyIsIlUiLCJwb3MiLCJjb25zdW1lRmlsdGVyZWRFdmVudHMiLCJtYXJrIiwiaWdub3JlWm9vbSIsImdldFpvb20iLCJtb3ZlQnkiLCJ1cGRhdGVTZWxlY3Rpb24iLCJ1cGRhdGVQb3NzZXMiLCJ1bmJpbmQiLCJyZW1vdmVDbGFzcyIsInVubWFyayIsInVubWFya1NlbGVjdGlvbiIsInVubWFya1Bvc3NlcyIsInN0b3AiLCJub3RpZnlTZWxlY3Rpb25EcmFnU3RvcCIsIm5vdGlmeVBvc3NlRHJhZ1N0b3AiLCJnZXRGaWx0ZXJzIiwiYWJvcnQiLCJnZXREcmFnRWxlbWVudCIsIlQiLCJzdGFydCIsIm91dCIsImJlZm9yZVN0YXJ0IiwicmV2ZXJ0IiwiZXZlbnRzIiwibm90aWZ5U3RhcnQiLCJnZXRTZWxlY3Rpb24iLCJWIiwiZmluYWxQb3MiLCJzZWxlY3Rpb24iLCJnZXRTaXplIiwiZ2V0TWF0Y2hpbmdEcm9wcGFibGVzIiwiZHJhZ0NsYXNzIiwibm90aWZ5U2VsZWN0aW9uRHJhZ1N0YXJ0Iiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsInNvcnQiLCJkcm9wIiwicGFnZVBvc2l0aW9uIiwiY2FuRHJvcCIsImlzSG92ZXIiLCJkZXN0cm95IiwiaGFuZGxlIiwiZmlsdGVyIiwiZmlsdGVyRXhjbHVkZSIsInJhbmsiLCJfYWN0aXZlQ2xhc3MiLCJhY3RpdmVDbGFzcyIsIl9ob3ZlckNsYXNzIiwiaG92ZXJDbGFzcyIsImFsbG93TG9vcGJhY2siLCJfa2F0YXZvcmlvRHJhZ0hvdmVyIiwiX2thdGF2b3JpbyIsInJlcGxhY2UiLCJyYW5kb20iLCJLYXRhdm9yaW8iLCJfZHJhZ3NCeVNjb3BlIiwiX2Ryb3BzQnlTY29wZSIsImNzcyIsImlucHV0RmlsdGVyU2VsZWN0b3IiLCJzZXRJbnB1dEZpbHRlclNlbGVjdG9yIiwiX2thdGF2b3Jpb0RyYWciLCJfa2F0YXZvcmlvRHJvcCIsInNlbGVjdCIsImRlc2VsZWN0IiwiZGVzZWxlY3RBbGwiLCJtZW1iZXJzIiwic2V0Wm9vbSIsInNuYXBUb0dyaWQiLCJnZXREcmFnc0ZvclNjb3BlIiwiZ2V0RHJvcHNGb3JTY29wZSIsImVsZW1lbnRSZW1vdmVkIiwiZGVzdHJveURyYWdnYWJsZSIsImRlc3Ryb3lEcm9wcGFibGUiLCJyZXNldCIsImFkZFRvUG9zc2UiLCJzZXRQb3NzZSIsIkFycmF5IiwicmVtb3ZlRnJvbVBvc3NlIiwiVHlwZUVycm9yIiwicmVtb3ZlRnJvbUFsbFBvc3NlcyIsInNldFBvc3NlU3RhdGUiLCJqc1BsdW1iVXRpbCIsImlzQXJyYXkiLCJpc1N0cmluZyIsImlzQm9vbGVhbiIsImlzTnVsbCIsImlzT2JqZWN0IiwiaXNEYXRlIiwiaXNGdW5jdGlvbiIsImlzRW1wdHkiLCJpc051bWJlciIsImdldFRpbWUiLCJtZXJnZSIsIm1hdGNoIiwiZnVuY3Rpb25DaGFpbiIsInBvcHVsYXRlIiwic3Vic3RyaW5nIiwiZmluZFdpdGhGdW5jdGlvbiIsInJlbW92ZVdpdGhGdW5jdGlvbiIsImFkZFdpdGhGdW5jdGlvbiIsImFkZFRvTGlzdCIsInN1Z2dlc3QiLCJleHRlbmQiLCJsb2dFbmFibGVkIiwid3JhcCIsIkV2ZW50R2VuZXJhdG9yIiwicmVhZHkiLCJfX2pzUGx1bWIiLCJmaXJlIiwic2hvdWxkRmlyZUV2ZW50IiwiZ2V0TGlzdGVuZXIiLCJzZXRTdXNwZW5kRXZlbnRzIiwiaXNTdXNwZW5kRXZlbnRzIiwic2lsZW50bHkiLCJjbGVhbnVwTGlzdGVuZXJzIiwiY2xlYW51cCIsIm1hdGNoZXNTZWxlY3RvciIsInNpemVFbGVtZW50IiwiaGVpZ2h0Iiwid2lkdGgiLCJfanNQbHVtYiIsInBhaW50U3R5bGUiLCJob3ZlclBhaW50U3R5bGUiLCJmaWxsIiwiZ2V0QXR0YWNoZWRFbGVtZW50cyIsImdldERlZmF1bHRUeXBlIiwiZ2V0VHlwZURlc2NyaXB0b3IiLCJ0eXBlcyIsImluc3RhbmNlIiwiZ2V0VHlwZSIsImFwcGx5VHlwZSIsInJlcGFpbnQiLCJqc1BsdW1iVUlDb21wb25lbnQiLCJpZFByZWZpeCIsInBhcmFtZXRlcnMiLCJwYWludFN0eWxlSW5Vc2UiLCJiZWZvcmVEZXRhY2giLCJiZWZvcmVEcm9wIiwib3ZlcmxheVBsYWNlbWVudHMiLCJEZWZhdWx0cyIsIkhvdmVyQ2xhc3MiLCJ0eXBlQ2FjaGUiLCJjYWNoZVR5cGVJdGVtIiwiZ2V0Q2FjaGVkVHlwZUl0ZW0iLCJnZXRJZCIsIm92ZXJsYXlzIiwiZGVmYXVsdE92ZXJsYXlLZXlzIiwiY29udmVydFRvRnVsbE92ZXJsYXlTcGVjIiwiZ2V0RGVmYXVsdFNjb3BlIiwiYXBwZW5kVG9EZWZhdWx0VHlwZSIsImNyZWF0ZSIsImlzRGV0YWNoQWxsb3dlZCIsImlzRHJvcEFsbG93ZWQiLCJjaGVja0NvbmRpdGlvbiIsInNvdXJjZUlkIiwidGFyZ2V0SWQiLCJjb25uZWN0aW9uIiwiZHJvcEVuZHBvaW50Iiwic2V0TGlzdGVuZXJDb21wb25lbnQiLCJjc3NDbGFzcyIsImNhbnZhcyIsImdldFBhcmFtZXRlciIsInNldFBhcmFtZXRlciIsImdldFBhcmFtZXRlcnMiLCJzZXRQYXJhbWV0ZXJzIiwiZ2V0Q2xhc3MiLCJoYXNDbGFzcyIsInVwZGF0ZUNsYXNzZXMiLCJzZXRUeXBlIiwiY2xlYXJUeXBlcyIsInJlYXBwbHlUeXBlcyIsImhhc1R5cGUiLCJhZGRUeXBlIiwicmVtb3ZlVHlwZSIsInRvZ2dsZVR5cGUiLCJzZXRQYWludFN0eWxlIiwic2V0SG92ZXJQYWludFN0eWxlIiwiZ2V0UGFpbnRTdHlsZSIsImdldEhvdmVyUGFpbnRTdHlsZSIsInR5cGVJZCIsImN1cnJlbnRseURyYWdnaW5nIiwiaXNIb3ZlclN1c3BlbmRlZCIsImlzU3VzcGVuZERyYXdpbmciLCJ0aW1lc3RhbXAiLCJyZWNhbGMiLCJqc1BsdW1iSW5zdGFuY2UiLCJMb2dFbmFibGVkIiwiX2Nvbm5lY3Rpb25UeXBlcyIsIl9lbmRwb2ludFR5cGVzIiwibm9kZVR5cGUiLCJnZXRFbGVtZW50IiwiWiIsImdldEluc3RhbmNlSW5kZXgiLCJyZXBhaW50RXZlcnl0aGluZyIsInVuYmluZENvbnRhaW5lciIsInNldENvbnRhaW5lciIsImVhY2giLCJtb3ZlUGFyZW50Iiwic2VsZWN0RW5kcG9pbnRzIiwiZW5kcG9pbnRjbGljayIsImVuZHBvaW50ZGJsY2xpY2siLCJjb21wb25lbnQiLCJnZXRDb250YWluZXIiLCJpbXBvcnREZWZhdWx0cyIsIkNvbnRhaW5lciIsInJlc3RvcmVEZWZhdWx0cyIsIlNjb3BlIiwiYXBwZW5kVG9Sb290IiwiZ2V0RHJhZ01hbmFnZXIiLCJnZXRFbGVtZW50c0ZvckRyYWdnYWJsZSIsInJiIiwiZWxJZCIsIm9mZnNldCIsImFuY2hvck1hbmFnZXIiLCJyZWRyYXciLCJoZWFkbGVzcyIsImlzRHJhZ1N1cHBvcnRlZCIsIkRyYWdPcHRpb25zIiwiaXNBbHJlYWR5RHJhZ2dhYmxlIiwiZm9yY2UiLCJpbml0RHJhZ2dhYmxlIiwiZHJhZ0V2ZW50cyIsInFiIiwic2V0SG92ZXJTdXNwZW5kZWQiLCJlbGVtZW50RHJhZ2dpbmdDbGFzcyIsInNvdXJjZUVsZW1lbnREcmFnZ2luZ0NsYXNzIiwidGFyZ2V0RWxlbWVudERyYWdnaW5nQ2xhc3MiLCJzZXRDb25uZWN0aW9uQmVpbmdEcmFnZ2VkIiwiZ2V0VUlQb3NpdGlvbiIsImRyYWdFbmRlZCIsImRpc2FibGVkIiwicmVnaXN0ZXIiLCJlbmRwb2ludCIsInNvdXJjZUVuZHBvaW50IiwidGFyZ2V0RW5kcG9pbnQiLCJ1dWlkcyIsImlzRnVsbCIsImNvbm5lY3Rpb25UeXBlIiwiY29ubmVjdG9yT3ZlcmxheXMiLCJjb25uZWN0b3JQb2ludGVyRXZlbnRzIiwiYWRkRW5kcG9pbnQiLCJhbmNob3IiLCJhbmNob3JzIiwiZW5kcG9pbnRzIiwiZW5kcG9pbnRTdHlsZXMiLCJlbmRwb2ludFN0eWxlIiwiZW5kcG9pbnRIb3ZlclN0eWxlcyIsImVuZHBvaW50SG92ZXJTdHlsZSIsIm5ld0Nvbm5lY3Rpb24iLCJlbmFibGVkIiwiZGVmIiwiX2RvTm90RGVsZXRlT25EZXRhY2giLCJfZGVsZXRlT25EZXRhY2giLCJ1bmlxdWVFbmRwb2ludCIsImZpbmFsRW5kcG9pbnQiLCJzb3VyY2VFbmRwb2ludERlZmluaXRpb25zIiwidGFyZ2V0RW5kcG9pbnREZWZpbml0aW9ucyIsIkNvbm5lY3Rpb25UeXBlIiwiZ2V0RGVmYXVsdENvbm5lY3Rpb25UeXBlIiwibmV3RW5kcG9pbnQiLCJlbmRwb2ludHNCeVVVSUQiLCJlbmRwb2ludHNCeUVsZW1lbnQiLCJmaW5hbGlzZUNvbm5lY3Rpb24iLCJpc0RldGFjaGFibGUiLCJzdXNwZW5kZWRFbmRwb2ludCIsInBlbmRpbmciLCJpc1RlbXBvcmFyeVNvdXJjZSIsImRvTm90RmlyZUNvbm5lY3Rpb25FdmVudCIsIkVuZHBvaW50VHlwZSIsIkVuZHBvaW50IiwiZmlyZURldGFjaEV2ZW50IiwiYWIiLCJlbGVtZW50SWQiLCJlbmRwb2ludEFkZGVkIiwiY29ubmVjdGlvbnMiLCJzZXRFbGVtZW50RHJhZ2dhYmxlIiwic2V0VmlzaWJsZSIsImlzVmlzaWJsZSIsIlciLCJzZXREcmFnZ2FibGUiLCJYIiwiWSIsImlzQ29ubmVjdGlvbkJlaW5nRHJhZ2dlZCIsImdldE1hbmFnZWRFbGVtZW50cyIsImNvbm5lY3RvckNsYXNzIiwiY29ubmVjdG9yT3V0bGluZUNsYXNzIiwiZWRpdGFibGVDb25uZWN0b3JDbGFzcyIsImNvbm5lY3RlZENsYXNzIiwiZW5kcG9pbnRDbGFzcyIsImVuZHBvaW50Q29ubmVjdGVkQ2xhc3MiLCJlbmRwb2ludEZ1bGxDbGFzcyIsImVuZHBvaW50RHJvcEFsbG93ZWRDbGFzcyIsImVuZHBvaW50RHJvcEZvcmJpZGRlbkNsYXNzIiwib3ZlcmxheUNsYXNzIiwiZHJhZ2dpbmdDbGFzcyIsImVuZHBvaW50QW5jaG9yQ2xhc3NQcmVmaXgiLCJob3ZlclNvdXJjZUNsYXNzIiwiaG92ZXJUYXJnZXRDbGFzcyIsImRyYWdTZWxlY3RDbGFzcyIsIkFuY2hvcnMiLCJDb25uZWN0b3JzIiwic3ZnIiwiRW5kcG9pbnRzIiwiT3ZlcmxheXMiLCJDb25uZWN0b3JSZW5kZXJlcnMiLCJTVkciLCJFbmRwb2ludFN0eWxlIiwib2IiLCJwYWludCIsImFuY2hvckxvYyIsImNvbXB1dGUiLCJ4eSIsIndoIiwiYWRkRW5kcG9pbnRzIiwiYW5pbWF0ZSIsImFuaW1hdGlvblN1cHBvcnRlZCIsImFuaW1FdmVudHMiLCJzdGVwIiwiY29tcGxldGUiLCJyZXZhbGlkYXRlIiwiZG9BbmltYXRlIiwiJCIsImVwRGVmcyIsIl8iLCJvcmlnaW5hbFNvdXJjZUlkIiwibmV3U291cmNlSWQiLCJvcmlnaW5hbFRhcmdldElkIiwibmV3VGFyZ2V0SWQiLCJhZGRDb25uZWN0aW9uIiwibWFrZUVuZHBvaW50IiwiZGV0YWNoRnJvbUNvbm5lY3Rpb24iLCJiYiIsInNldFNvdXJjZSIsInNvdXJjZUNoYW5nZWQiLCJzZXRUYXJnZXQiLCJ1cGRhdGVPdGhlckVuZHBvaW50IiwiZGVsZXRlRW5kcG9pbnQiLCJkZWxldGVPYmplY3QiLCJkb250VXBkYXRlSG92ZXIiLCJkZWxldGVBdHRhY2hlZE9iamVjdHMiLCJkZWxldGVFdmVyeUVuZHBvaW50Iiwic2V0U3VzcGVuZERyYXdpbmciLCJjb25uZWN0aW9uRGV0YWNoZWQiLCJmaXJlTW92ZUV2ZW50IiwidW5yZWdpc3RlckVuZHBvaW50IiwiZGV0YWNoIiwiZm9yY2VEZXRhY2giLCJpZ25vcmVUYXJnZXQiLCJkZXRhY2hGcm9tIiwiZGV0YWNoQWxsQ29ubmVjdGlvbnMiLCJkZXRhY2hBbGwiLCJkZXRhY2hFdmVyeUNvbm5lY3Rpb24iLCJiYXRjaCIsImVuZHBvaW50Q291bnQiLCJjb25uZWN0aW9uQ291bnQiLCJvcmlnaW5hbEV2ZW50IiwiaW5pdERyb3BwYWJsZSIsImNiIiwiZGIiLCJlYiIsImZiIiwiZ2IiLCJoYiIsImdldENvbm5lY3Rpb25zIiwicHJveGllcyIsIm9yaWdpbmFsRXAiLCJpYiIsImpiIiwia2IiLCJnZXQiLCJsYiIsInNldERldGFjaGFibGUiLCJzZXRSZWF0dGFjaCIsInNldENvbm5lY3RvciIsImlzUmVhdHRhY2giLCJtYiIsInNldEFuY2hvciIsImlzU291cmNlIiwiaXNUYXJnZXQiLCJnZXRBbGxDb25uZWN0aW9ucyIsImdldEVuZHBvaW50IiwiZ2V0RW5kcG9pbnRzIiwiZ2V0RGVmYXVsdEVuZHBvaW50VHlwZSIsIkNvbm5lY3Rpb24iLCJhcHBlbmRFbGVtZW50IiwibmIiLCJoaWRlIiwiaWRzdGFtcCIsImNvbm5lY3RvcnNJbml0aWFsaXplZCIsInJlZ2lzdGVyQ29ubmVjdG9yVHlwZSIsIm9mZnNldFBhcmVudCIsInBiIiwibWFuYWdlIiwidXBkYXRlT2Zmc2V0IiwiZ2V0T2Zmc2V0IiwicmlnaHQiLCJib3R0b20iLCJjZW50ZXJ4IiwiY2VudGVyeSIsImluaXQiLCJqc1BsdW1iIiwiZ2V0UmVuZGVyTW9kZXMiLCJBbmNob3JNYW5hZ2VyIiwibWFrZUFuY2hvciIsIkRvTm90VGhyb3dFcnJvcnMiLCJtc2ciLCJnZXRPcmllbnRhdGlvbiIsIkR5bmFtaWNBbmNob3IiLCJzZWxlY3RvciIsIm9yaWVudGF0aW9uIiwib2Zmc2V0cyIsIkFuY2hvciIsIm1ha2VBbmNob3JzIiwibWFrZUR5bmFtaWNBbmNob3IiLCJzYiIsImdldFNlbGVjdG9yIiwidGIiLCJFbmRwb2ludERyb3BIYW5kbGVyIiwibWF4Q29ubmVjdGlvbnMiLCJvbkRyb3AiLCJsb2NrZWQiLCJpc1JlZHJvcCIsInN1c3BlbmRlZEVsZW1lbnQiLCJkZXJpdmVFbmRwb2ludEFuZEFuY2hvclNwZWMiLCJqb2luIiwiX210TmV3IiwicG9zaXRpb25GaW5kZXIiLCJjb25zdHJ1Y3RvclBhcmFtcyIsIm1heWJlQ2xlYW51cCIsIl9qc1BsdW1iUmVsYXRlZEVsZW1lbnQiLCJtYWtlVGFyZ2V0IiwiZHJvcE9wdGlvbnMiLCJfaXNKc1BsdW1iR3JvdXAiLCJ0YXJnZXREZWYiLCJ1bm1ha2VUYXJnZXQiLCJtYWtlU291cmNlIiwib25NYXhDb25uZWN0aW9ucyIsImRyYWdPcHRpb25zIiwiZ2V0UG9zaXRpb25PbkVsZW1lbnQiLCJleHRyYWN0Iiwic2V0RHJhZ0ZpbHRlciIsInVubWFrZVNvdXJjZSIsInVubWFrZUV2ZXJ5U291cmNlIiwidWIiLCJ2YiIsImdldFNjb3BlIiwiZ2V0U291cmNlU2NvcGUiLCJnZXRUYXJnZXRTY29wZSIsInNldFNvdXJjZVNjb3BlIiwic2V0VGFyZ2V0U2NvcGUiLCJzZXREcmFnU2NvcGUiLCJzZXREcm9wU2NvcGUiLCJ1bm1ha2VFdmVyeVRhcmdldCIsIndiIiwieGIiLCJ0b2dnbGVTb3VyY2VFbmFibGVkIiwiaXNTb3VyY2VFbmFibGVkIiwic2V0U291cmNlRW5hYmxlZCIsInRvZ2dsZVRhcmdldEVuYWJsZWQiLCJpc1RhcmdldEVuYWJsZWQiLCJzZXRUYXJnZXRFbmFibGVkIiwieWIiLCJyZW1vdmVBbGxFbmRwb2ludHMiLCJjaGlsZE5vZGVzIiwiemIiLCJjbGVhckZvciIsInJlbW92ZUZsb2F0aW5nQ29ubmVjdGlvbiIsImZsb2F0aW5nQ29ubmVjdGlvbnMiLCJyZW1vdmVFbGVtZW50IiwiZW1wdHkiLCJyZW1vdmVBbGxHcm91cHMiLCJyZW1vdmVHcm91cE1hbmFnZXIiLCJkb1Jlc2V0IiwiQWIiLCJjbGVhciIsInNldERlZmF1bHRTY29wZSIsInNldElkIiwic2V0RWxlbWVudElkIiwic2V0UmVmZXJlbmNlRWxlbWVudCIsImNoYW5nZUlkIiwic2V0RGVidWdMb2ciLCJnZXRTdXNwZW5kZWRBdCIsImRvV2hpbGVTdXNwZW5kZWQiLCJnZXRDYWNoZWREYXRhIiwic2hvdyIsInRvZ2dsZVZpc2libGUiLCJ0b2dnbGVEcmFnZ2FibGUiLCJhZGRMaXN0ZW5lciIsInJlZ2lzdGVyQ29ubmVjdGlvblR5cGUiLCJyZWdpc3RlckNvbm5lY3Rpb25UeXBlcyIsInJlZ2lzdGVyRW5kcG9pbnRUeXBlIiwicmVnaXN0ZXJFbmRwb2ludFR5cGVzIiwic2V0SWRDaGFuZ2VkIiwic2V0UGFyZW50IiwiZ2V0RmxvYXRpbmdBbmNob3JJbmRleCIsImlzRmxvYXRpbmciLCJDb25uZWN0aW9uc0RldGFjaGFibGUiLCJDb25uZWN0aW9uT3ZlcmxheXMiLCJDb25uZWN0b3IiLCJEcm9wT3B0aW9ucyIsIkVuZHBvaW50T3ZlcmxheXMiLCJFbmRwb2ludFN0eWxlcyIsIkVuZHBvaW50SG92ZXJTdHlsZSIsIkVuZHBvaW50SG92ZXJTdHlsZXMiLCJIb3ZlclBhaW50U3R5bGUiLCJMYWJlbFN0eWxlIiwiY29sb3IiLCJNYXhDb25uZWN0aW9ucyIsIlBhaW50U3R5bGUiLCJzdHJva2UiLCJSZWF0dGFjaENvbm5lY3Rpb25zIiwiUmVuZGVyTW9kZSIsImdldEluc3RhbmNlIiwidXBkYXRlT2Zmc2V0cyIsImVuZHBvaW50RGVsZXRlZCIsImNsZWFyUGFyZW50IiwicmV2YWxpZGF0ZVBhcmVudCIsImdldERyYWdBbmNlc3RvciIsImJhc2VWYWwiLCJzY3JlZW5Mb2NhdGlvbiIsImNsaWVudExvY2F0aW9uIiwiZHJhZ01hbmFnZXIiLCJyZWNhbGN1bGF0ZU9mZnNldHMiLCJjcmVhdGVFbGVtZW50TlMiLCJzZXRBdHRyaWJ1dGVzIiwic2V0Q2xhc3MiLCJnZXRTdHlsZSIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiY3VycmVudFN0eWxlIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJnZXRBYnNvbHV0ZVBvc2l0aW9uIiwic2V0QWJzb2x1dGVQb3NpdGlvbiIsImdldFdpZHRoIiwiZ2V0SGVpZ2h0IiwiZ2V0UmVuZGVyTW9kZSIsImxhYmVsU3R5bGUiLCJMYWJlbCIsIk92ZXJsYXlDYXBhYmxlSnNQbHVtYlVJQ29tcG9uZW50Iiwib3ZlcmxheVBvc2l0aW9ucyIsImxhYmVsIiwibGFiZWxMb2NhdGlvbiIsImRlZmF1bHRMYWJlbExvY2F0aW9uIiwidXBkYXRlRnJvbSIsInJlYXR0YWNoIiwiYWRkT3ZlcmxheSIsInJlbW92ZU92ZXJsYXkiLCJnZXRPdmVybGF5IiwiZ2V0T3ZlcmxheXMiLCJoaWRlT3ZlcmxheSIsImhpZGVPdmVybGF5cyIsInNob3dPdmVybGF5Iiwic2hvd092ZXJsYXlzIiwicmVtb3ZlQWxsT3ZlcmxheXMiLCJyZW1vdmVPdmVybGF5cyIsImJnQ2FudmFzIiwiaXNBcHBlbmRlZEF0VG9wTGV2ZWwiLCJnZXRMYWJlbCIsImdldExhYmVsT3ZlcmxheSIsInNldExhYmVsIiwiRnVuY3Rpb24iLCJzZXRMb2NhdGlvbiIsInNldEFic29sdXRlT3ZlcmxheVBvc2l0aW9uIiwiZ2V0QWJzb2x1dGVPdmVybGF5UG9zaXRpb24iLCJfY2xhenpNYW5pcCIsImFuY2hvclBvaW50IiwiZ2V0Q3VycmVudExvY2F0aW9uIiwic3RvcERyYWciLCJGbG9hdGluZ0FuY2hvciIsInJlZmVyZW5jZSIsInJlZmVyZW5jZUNhbnZhcyIsImNvbm5lY3RvclN0eWxlIiwiY29ubmVjdG9ySG92ZXJTdHlsZSIsImNvbm5lY3RvckhvdmVyQ2xhc3MiLCJjb25uZWN0b3IiLCJjb25uZWN0b3JUb29sdGlwIiwidmlzaWJsZSIsImZsb2F0aW5nRW5kcG9pbnQiLCJkcmFnUHJveHkiLCJjb25uZWN0aW9uQ29zdCIsImNvbm5lY3Rpb25zRGlyZWN0ZWQiLCJjdXJyZW50QW5jaG9yQ2xhc3MiLCJnZXRDc3NDbGFzcyIsInByZXBhcmVBbmNob3IiLCJzZXRQcmVwYXJlZEFuY2hvciIsImNvbnRpbnVvdXNBbmNob3JGYWN0b3J5IiwiX3RyYW5zaWVudCIsInByZXBhcmVFbmRwb2ludCIsImNvbnRhaW5lciIsInRvb2x0aXAiLCJzZXRFbmRwb2ludCIsInNldFByZXBhcmVkRW5kcG9pbnQiLCJyZWF0dGFjaENvbm5lY3Rpb25zIiwiY29ubmVjdGlvbnNEZXRhY2hhYmxlIiwiZGV0YWNoYWJsZSIsImRyYWdBbGxvd2VkV2hlbkZ1bGwiLCJfZm9yY2VEZWxldGVPbkRldGFjaCIsImNvbm5lY3Rpb25JbmRleCIsImVuZHBvaW50QmVpbmdEZWxldGVkIiwiX2ZvcmNlRGV0YWNoIiwic2V0RWxlbWVudCIsInJlaG9tZUVuZHBvaW50IiwibWFrZUluUGxhY2VDb3B5IiwiaGlkZU9uRHJhZyIsImNvbm5lY3RvclNlbGVjdG9yIiwic2V0U3R5bGUiLCJjb25uZWN0b3JQYWludFN0eWxlIiwiZGltZW5zaW9ucyIsImlzRHluYW1pYyIsImVsZW1lbnRXaXRoUHJlY2VkZW5jZSIsInR4eSIsInR3aCIsInRFbGVtZW50IiwiZHJhdyIsImRyYWdJZCIsImdldERyYWdTY29wZSIsInN1c3BlbmRlZEVsZW1lbnRJZCIsInN1c3BlbmRlZEVsZW1lbnRUeXBlIiwicmVmZXJlbmNlRW5kcG9pbnQiLCJnZXREcm9wRXZlbnQiLCJkZWxldGVDb25uZWN0aW9uTm93IiwiZmxvYXRpbmdFbGVtZW50IiwiZmxvYXRpbmdJZCIsImZsb2F0aW5nSW5kZXgiLCJfZm9yY2VSZWF0dGFjaCIsImRlbGV0ZUFmdGVyRHJhZ1N0b3AiLCJ2aXNpYmlsaXR5IiwiaXNEcm9wU3VwcG9ydGVkIiwiZ2V0RHJhZ09iamVjdCIsImlzQ29ubmVjdGVkVG8iLCJnZXRDb25uZWN0aW9uQ29zdCIsInNldENvbm5lY3Rpb25Db3N0IiwiYXJlQ29ubmVjdGlvbnNEaXJlY3RlZCIsInNldENvbm5lY3Rpb25zRGlyZWN0ZWQiLCJzZXREcmFnQWxsb3dlZFdoZW5GdWxsIiwiZXF1YWxzIiwiZ2V0VXVpZCIsImNvbXB1dGVBbmNob3IiLCJvcmlnaW5hbFNvdXJjZUVuZHBvaW50IiwibmV3U291cmNlRW5kcG9pbnQiLCJvcmlnaW5hbFRhcmdldEVuZHBvaW50IiwibmV3VGFyZ2V0RW5kcG9pbnQiLCJtZXJnZURhdGEiLCJfanNQbHVtYkNvbm5lY3Rpb25zIiwicHJldmlvdXNDb25uZWN0aW9uIiwiZWRpdGFibGUiLCJlZGl0b3JQYXJhbXMiLCJsYXN0UGFpbnRlZEF0IiwiZWRpdGFibGVSZXF1ZXN0ZWQiLCJzZXRFZGl0YWJsZSIsImlzRWRpdGFibGUiLCJpc0VkaXRpbmciLCJkZWxldGVFbmRwb2ludHNPbkRldGFjaCIsImNvc3QiLCJkaXJlY3RlZCIsImdlb21ldHJ5Iiwic2V0R2VvbWV0cnkiLCJnZXREYXRhIiwic2V0RGF0YSIsInRlc3QiLCJ1cGRhdGVDb25uZWN0ZWRDbGFzcyIsImdldFV1aWRzIiwiZ2V0Q29zdCIsInNldENvc3QiLCJpc0RpcmVjdGVkIiwiZ2V0Q29ubmVjdG9yIiwiZ2V0R2VvbWV0cnkiLCJwcmVwYXJlQ29ubmVjdG9yIiwic2V0UHJlcGFyZWRDb25uZWN0b3IiLCJ0cmFuc2ZlciIsInJlc2V0Qm91bmRzIiwic291cmNlUG9zIiwidGFyZ2V0UG9zIiwic3Ryb2tlV2lkdGgiLCJzb3VyY2VJbmZvIiwidGFyZ2V0SW5mbyIsIm1pblgiLCJtaW5ZIiwibWF4WCIsIm1heFkiLCJ4bWluIiwiYm91bmRzIiwieW1pbiIsInhtYXgiLCJ5bWF4Iiwib3V0bGluZVN0cm9rZSIsIm91dGxpbmVXaWR0aCIsImRyYXdFbmRwb2ludHMiLCJIT1JJWk9OVEFMIiwiVkVSVElDQUwiLCJESUFHT05BTCIsIklERU5USVRZIiwiYXRhbjIiLCJkaXN0IiwiaXNDb250aW51b3VzIiwiaXNFZGdlU3VwcG9ydGVkIiwidGhldGEyIiwiYWRkRmxvYXRpbmdDb25uZWN0aW9uIiwiZ2V0Q29ubmVjdGlvbnNGb3IiLCJnZXRFbmRwb2ludHNGb3IiLCJfY29udGludW91c0FuY2hvckVkZ2UiLCJpZHgiLCJnZXREZWZhdWx0RmFjZSIsImNsZWFyRWRpdHMiLCJmYWNlcyIsImNsb2Nrd2lzZSIsInZlcmlmeUVkZ2UiLCJjbGVhclVzZXJEZWZpbmVkTG9jYXRpb24iLCJzZXRVc2VyRGVmaW5lZExvY2F0aW9uIiwidXNlckRlZmluZWRMb2NhdGlvbiIsImxhc3RSZXR1cm5WYWx1ZSIsImdldFVzZXJEZWZpbmVkTG9jYXRpb24iLCJnZXRBbmNob3JzIiwiRHluYW1pY0FuY2hvcnMiLCJBdXRvRGVmYXVsdCIsIkNvbnRpbnVvdXMiLCJBbmNob3JQb3NpdGlvbkZpbmRlcnMiLCJGaXhlZCIsIkdyaWQiLCJQZXJpbWV0ZXIiLCJhbmNob3JDb3VudCIsInNoYXBlIiwiRXJyb3IiLCJDaXJjbGUiLCJFbGxpcHNlIiwiRGlhbW9uZCIsIlJlY3RhbmdsZSIsIlNxdWFyZSIsIlRyaWFuZ2xlIiwiUGF0aCIsInBvaW50cyIsInJvdGF0aW9uIiwiU2VnbWVudHMiLCJBYnN0cmFjdFNlZ21lbnQiLCJmaW5kQ2xvc2VzdFBvaW50T25QYXRoIiwiZ2V0Qm91bmRzIiwieDEiLCJ4MiIsInkxIiwieTIiLCJTdHJhaWdodCIsImdldEdyYWRpZW50IiwiZ2V0Q29vcmRpbmF0ZXMiLCJzZXRDb29yZGluYXRlcyIsInBvaW50T25QYXRoIiwicG9pbnRBbG9uZ1BhdGhGcm9tIiwiQXJjIiwiY3giLCJjeSIsImFudGljbG9ja3dpc2UiLCJzdGFydEFuZ2xlIiwiZW5kQW5nbGUiLCJyYWRpdXMiLCJhYyIsInN3ZWVwIiwiY2VpbCIsIkJlemllciIsImN1cnZlIiwiY3AxeCIsImNwMXkiLCJjcDJ4IiwiY3AyeSIsIlNlZ21lbnRSZW5kZXJlciIsImdldFBhdGgiLCJBYnN0cmFjdENvbm5lY3RvciIsInN0dWIiLCJnYXAiLCJDb25uZWN0b3JFZGl0b3JzIiwiZ2V0UGF0aERhdGEiLCJoYXNCZWVuRWRpdGVkIiwiZWRpdG9yIiwiaXNBY3RpdmUiLCJvdmVycmlkZVNldEVkaXRhYmxlIiwiZmluZFNlZ21lbnRGb3JQb2ludCIsInNlZ21lbnQiLCJwcm9wb3J0aW9uIiwidXBkYXRlQm91bmRzIiwic2V0U2VnbWVudHMiLCJzeCIsInN5IiwidHgiLCJ0eSIsImx3IiwieFNwYW4iLCJ5U3BhbiIsIm14IiwibXkiLCJzbyIsInRvIiwic3RhcnRTdHViWCIsInN0YXJ0U3R1YlkiLCJlbmRTdHViWCIsImVuZFN0dWJZIiwiaXNYR3JlYXRlclRoYW5TdHViVGltZXMyIiwiaXNZR3JlYXRlclRoYW5TdHViVGltZXMyIiwib3Bwb3NpdGUiLCJwZXJwZW5kaWN1bGFyIiwib3J0aG9nb25hbCIsInNvdXJjZUF4aXMiLCJhbmNob3JPcmllbnRhdGlvbiIsImdldFNlZ21lbnRzIiwiX2NvbXB1dGUiLCJhZGRTZWdtZW50IiwicHJlcGFyZUNvbXB1dGUiLCJzb3VyY2VTdHViIiwidGFyZ2V0U3R1YiIsIm1heFN0dWIiLCJzb3VyY2VHYXAiLCJ0YXJnZXRHYXAiLCJtYXhHYXAiLCJBYnN0cmFjdEVuZHBvaW50IiwiRG90IiwiZGVmYXVsdE9mZnNldCIsImRlZmF1bHRJbm5lclJhZGl1cyIsImRpc3BsYXlFbGVtZW50cyIsImdldERpc3BsYXlFbGVtZW50cyIsImFwcGVuZERpc3BsYXlFbGVtZW50IiwiSW1hZ2UiLCJvbmxvYWQiLCJzcmMiLCJ1cmwiLCJpbml0aWFsaXplZCIsImRlbGV0ZWQiLCJ3aWR0aFRvVXNlIiwiaGVpZ2h0VG9Vc2UiLCJzZXRJbWFnZSIsIm1hcmdpbiIsInBhZGRpbmciLCJvdXRsaW5lIiwiYWN0dWFsbHlQYWludCIsIkJsYW5rIiwiYmFja2dyb3VuZCIsInNlbGYiLCJBYnN0cmFjdE92ZXJsYXkiLCJsb2MiLCJlbmRwb2ludExvYyIsImVuZHBvaW50TG9jYXRpb24iLCJpbmNyZW1lbnRMb2NhdGlvbiIsImdldExvY2F0aW9uIiwiQXJyb3ciLCJkaXJlY3Rpb24iLCJmb2xkYmFjayIsImNvbXB1dGVNYXhTaXplIiwiZWxlbWVudENyZWF0ZWQiLCJwYXJzZUludCIsImh4eSIsInRhaWwiLCJjeHkiLCJQbGFpbkFycm93IiwiY2FjaGVkRGltZW5zaW9ucyIsImdldERpbWVuc2lvbnMiLCJkZXRhY2hlZCIsImRpdiIsImluaXRpYWxpc2VkIiwiaW5pdGlhbGx5SW52aXNpYmxlIiwid2Via2l0VHJhbnNmb3JtIiwibW96VHJhbnNmb3JtIiwibXNUcmFuc2Zvcm0iLCJvVHJhbnNmb3JtIiwidHJhbnNmb3JtIiwibWlueCIsIm1pbnkiLCJ0ZCIsImNsZWFyQ2FjaGVkRGltZW5zaW9ucyIsIkN1c3RvbSIsIkd1aWRlTGluZXMiLCJoZWFkIiwiaGVhZExpbmUiLCJ0YWlsTGluZSIsImxhYmVsVGV4dCIsImZvbnQiLCJib3JkZXJXaWR0aCIsImJvcmRlclN0eWxlIiwiYm9yZGVyIiwidXBkYXRlIiwiX21vdHRsZSIsImdldEV2ZW50TWFuYWdlciIsImdldE1lbWJlcnMiLCJfanNQbHVtYkdyb3VwIiwiYWRkR3JvdXAiLCJnZXRFbCIsIm1hbmFnZXIiLCJncm91cCIsImFkZFRvR3JvdXAiLCJnZXRHcm91cCIsImNvbGxhcHNlZCIsImdldERyYWdBcmVhIiwidXBkYXRlQ29ubmVjdGlvbnNGb3JHcm91cCIsImV4cGFuZENvbm5lY3Rpb24iLCJjb2xsYXBzZUNvbm5lY3Rpb24iLCJyZW1vdmVGcm9tR3JvdXAiLCJnZXRHcm91cHMiLCJyZW1vdmVHcm91cCIsImV4cGFuZEdyb3VwIiwiX2dyb3VwcyIsInNob3VsZFByb3h5IiwiZXAiLCJnZXRBbmNob3IiLCJpc1Byb3h5RW5kcG9pbnQiLCJjb2xsYXBzZUdyb3VwIiwicmVwYWludEdyb3VwIiwicmVmcmVzaEFsbEdyb3VwcyIsImdob3N0Iiwib3JwaGFuIiwicHJ1bmUiLCJkcm9wT3ZlcnJpZGUiLCJwcm94aWVkIiwiaW50ZXJuYWwiLCJvdmVycmlkZURyb3AiLCJnZXRHcm91cE1hbmFnZXIiLCJyZW1vdmVBbGwiLCJvcnBoYW5BbGwiLCJ0b2dnbGVHcm91cCIsImdldEdyb3VwRm9yIiwibWlkcG9pbnQiLCJhbHdheXNSZXNwZWN0U3R1YnMiLCJjb3JuZXJSYWRpdXMiLCJsb29wYmFja1JhZGl1cyIsInRvVXBwZXJDYXNlIiwiQWJzdHJhY3RCZXppZXJDb25uZWN0b3IiLCJzaG93TG9vcGJhY2siLCJjdXJ2aW5lc3MiLCJwcm94aW1pdHlMaW1pdCIsImxvb3BiYWNrIiwiX2NvbXB1dGVCZXppZXIiLCJnZXRDdXJ2aW5lc3MiLCJfZmluZENvbnRyb2xQb2ludCIsImNvbnRyb2xQb2ludHMiLCJ4aHRtbCIsInhtbG5zIiwiZ3JhZGllbnRVbml0cyIsInN0b3BzIiwiaW5zZXJ0QmVmb3JlIiwiYXR0ciIsInBvaW50ZXJFdmVudHNTcGVjIiwib3JpZ2luYWxBcmdzIiwidXNlRGl2V3JhcHBlciIsInJlbmRlcmVyIiwiYmdQYXRoIiwiU3ZnRW5kcG9pbnQiLCJtYWtlTm9kZSIsInVwZGF0ZU5vZGUiLCJpc05hTiIsImF0dGFjaExpc3RlbmVycyIsImVuY3R5cGUiLCJkdXJhdGlvbiIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImlzRWxlbWVudERyYWdnYWJsZSIsImFkZFRvRHJhZ1NlbGVjdGlvbiIsInJlbW92ZUZyb21EcmFnU2VsZWN0aW9uIiwiY2xlYXJEcmFnU2VsZWN0aW9uIiwicmVhZHlTdGF0ZSJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7O0FB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LENBQVQsRUFBVztBQUFDLFFBQUlFLElBQUUsU0FBRkEsQ0FBRSxHQUFVO0FBQUMsb0NBQThCODRCLElBQTlCLENBQW1DdG5DLFNBQVMyNUMsVUFBNUMsS0FBeUQsZUFBYSxPQUFPMzVDLFNBQVMrWSxJQUF0RixJQUE0RixRQUFNL1ksU0FBUytZLElBQTNHLEdBQWdIekssR0FBaEgsR0FBb0h1RyxXQUFXckcsQ0FBWCxFQUFhLENBQWIsQ0FBcEg7QUFBb0ksS0FBckosQ0FBc0pBO0FBQUksR0FBNUssQ0FBNktXLEVBQUVYLEVBQUV5b0IsSUFBSjtBQUFVLENBQXB5SSxDQUFxeUlybEIsSUFBcnlJLENBQTB5SSxlQUFhLE9BQU9DLE1BQXBCLEdBQTJCQSxNQUEzQixZQUExeUksQ0FOaGdDLEMiLCJmaWxlIjoiY2FkLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbiBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTgpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIGZhMDdmNmEwM2I4M2M1YzkyZjNjIiwiY29uc3Qgbm9kZUZhY3RvcnkgPSBmdW5jdGlvbih0eXBlID0gJ2RpdicsIHBhcmFtcyA9IHt9KSB7XHJcbiAgY29uc3Qgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodHlwZSk7XHJcblxyXG4gIGFwcGVuZENsYXNzZXMobm9kZSwgcGFyYW1zKTtcclxuICBhcHBlbmRBdHRycyhub2RlLCBwYXJhbXMpO1xyXG4gIGluc2VydFRleHRDb250ZW50KG5vZGUsIHBhcmFtcyk7XHJcblxyXG4gIHJldHVybiBub2RlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhcHBlbmRDbGFzc2VzKG5vZGUsIHsgY2xhc3NMaXN0IH0pIHtcclxuICBpZiAoY2xhc3NMaXN0ICYmIGNsYXNzTGlzdC5mb3JFYWNoKSB7XHJcbiAgICBjbGFzc0xpc3QuZm9yRWFjaChjbGFzc05hbWUgPT4gbm9kZS5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSkpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gYXBwZW5kQXR0cnMobm9kZSwgeyBhdHRycyB9KSB7XHJcbiAgaWYgKGF0dHJzKSB7XHJcbiAgICBjb25zdCBhdHRyTmFtZXMgPSBPYmplY3Qua2V5cyhhdHRycyk7XHJcbiAgICBhdHRyTmFtZXMuZm9yRWFjaChhdHRyTmFtZSA9PiBub2RlLnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgYXR0cnNbYXR0ck5hbWVdKSk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpbnNlcnRUZXh0Q29udGVudChub2RlLCB7IHRleHRDb250ZW50ID0gXCJcIiB9KSB7XHJcbiAgbm9kZS50ZXh0Q29udGVudCA9IHRleHRDb250ZW50O1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBub2RlRmFjdG9yeTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vdXRpbHMvbm9kZUZhY3RvcnkuanMiLCJjb25zdCBwdWJzdWIgPSAoZnVuY3Rpb24oKSB7XHJcblxyXG4gIGNvbnN0IHRvcGljcyA9IHt9O1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbih0b3BpYywgbGlzdGVuZXIpIHtcclxuICAgICAgaWYgKCF0b3BpY3NbdG9waWNdKSB0b3BpY3NbdG9waWNdID0geyBxdWV1ZTogW10gfTtcclxuXHJcbiAgICAgIGNvbnN0IGluZGV4ID0gdG9waWNzW3RvcGljXS5xdWV1ZS5wdXNoKGxpc3RlbmVyKSAtIDE7XHJcbiAgICAgIC8vIGZ1bmN0aW9uIHRvIGRlbGV0ZSB0b3BpY1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBkZWxldGUgdG9waWNzW3RvcGljXS5xdWV1ZVtpbmRleF07XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICBwdWJsaXNoOiBmdW5jdGlvbih0b3BpYywgaW5mbykge1xyXG4gICAgICAvLyBubyB0aGVtZSBvciBubyBsaXN0ZW5lcnNcclxuICAgICAgaWYgKCF0b3BpY3NbdG9waWNdIHx8ICF0b3BpY3NbdG9waWNdLnF1ZXVlLmxlbmd0aCkgcmV0dXJuO1xyXG5cclxuICAgICAgY29uc3QgaXRlbXMgPSB0b3BpY3NbdG9waWNdLnF1ZXVlO1xyXG4gICAgICBpdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgIGl0ZW0oaW5mbyB8fCB7fSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcbn0pKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwdWJzdWI7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3V0aWxzL3B1YnN1Yi5qcyIsImZ1bmN0aW9uIHRvZ2dsZUxpc3REaXNwbGF5KGZsYWcsICRsaXN0LCAkaWNvbikge1xyXG4gIGlmIChmbGFnKSB7XHJcbiAgICBzaG93TGlzdCgkbGlzdCwgJGljb24pO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBoaWRlTGlzdCgkbGlzdCwgJGljb24pO1xyXG4gIH1cclxuICByZXR1cm4gIWZsYWc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3dMaXN0KCRsaXN0LCAkaWNvbikge1xyXG4gIGlmICgkaWNvbikgJGljb24uY2xhc3NMaXN0LmFkZCgndHVybi1kb3duJyk7XHJcbiAgJGxpc3Quc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhpZGVMaXN0KCRsaXN0LCAkaWNvbikge1xyXG4gIGlmICgkaWNvbikgJGljb24uY2xhc3NMaXN0LnJlbW92ZSgndHVybi1kb3duJyk7XHJcbiAgJGxpc3Quc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxufVxyXG5cclxuZnVuY3Rpb24gYXBwZW5kTGlzdEVsZW1lbnQoZWxlbWVudCwgJGxpc3QpIHtcclxuICBsZXQgJGxpO1xyXG4gIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgJGxpID0gZWxlbWVudCgpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAkbGkgPSBlbGVtZW50O1xyXG4gIH1cclxuICAkbGlzdC5hcHBlbmRDaGlsZCgkbGkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhcHBlbmRDaGlsZHJlbihwYXJlbnQsIGNoaWxkcmVuKSB7XHJcbiAgaWYgKGNoaWxkcmVuLmZvckVhY2gpIHtcclxuICAgIGNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4gcGFyZW50LmFwcGVuZENoaWxkKGNoaWxkKSk7XHJcbiAgfVxyXG4gIHJldHVybiBwYXJlbnQ7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICB0b2dnbGVMaXN0RGlzcGxheSxcclxuICBhcHBlbmRMaXN0RWxlbWVudCxcclxuICBhcHBlbmRDaGlsZHJlbixcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY2FkL3NjZW5lL3BhbmVsLmpzIiwiaW1wb3J0IFNjaGVtZSBmcm9tICcuLi9zY2hlbWUvc2NoZW1lJztcclxuaW1wb3J0IHBhbmVsIGZyb20gJy4vcGFuZWwnO1xyXG5pbXBvcnQgc3RhdGVQYW5lbCBmcm9tICcuL3N0YXRlUGFuZWwnO1xyXG5pbXBvcnQgeyBqc1BsdW1iIH0gZnJvbSAnLi4vLi4vdXRpbHMvanNwbHVtYi5taW4nO1xyXG5pbXBvcnQgcHVic3ViIGZyb20gJy4uLy4uL3V0aWxzL3B1YnN1Yic7XHJcblxyXG5jb25zdCB7IGFwcGVuZExpc3RFbGVtZW50LCB0b2dnbGVMaXN0RGlzcGxheSB9ID0gcGFuZWw7XHJcblxyXG5jb25zdCBzY2VuZSA9IHt9O1xyXG5jb25zdCBzY2hlbWUgPSBuZXcgU2NoZW1lKCk7XHJcblxyXG4vKipcclxuICogVGFicyBjb250cm9sXHJcbiAqL1xyXG5jb25zdCAkc3RhdGVQYW5lbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNuZXctc3RhdGUtcGFuZWwnKTtcclxuY29uc3QgJHByb3BzUGFuZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbW9kZWwtcHJvcHMtcGFuZWwnKTtcclxuY29uc3QgJGNhZFdyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY2FkLXdyYXBwZXInKTtcclxuY29uc3QgJGNhZFBhbmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY2FkLXBhbmUnKTtcclxuXHJcbmxldCBvcGVuZWRUYWJzID0gMDtcclxuXHJcbmNvbnN0IHNldEZsZXhSYXRpbyA9IChlbCwgcmF0aW8pID0+IHtcclxuICBlbC5zdHlsZS5mbGV4ID0gcmF0aW87XHJcbn07XHJcblxyXG5mdW5jdGlvbiBzaG93VGFiKCR0YWIpIHtcclxuICBpZiAoJHRhYi5jbGFzc0xpc3QuY29udGFpbnMoJ2lzLWhpZGRlbicpKSB7XHJcbiAgICBvcGVuZWRUYWJzKys7XHJcbiAgICAkdGFiLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWhpZGRlbicpO1xyXG4gICAgc2V0RmxleFJhdGlvKCRjYWRXcmFwcGVyLCA0IC0gb3BlbmVkVGFicyk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBoaWRlVGFiKCR0YWIpIHtcclxuICBvcGVuZWRUYWJzLS07XHJcbiAgJHRhYi5jbGFzc0xpc3QuYWRkKCdpcy1oaWRkZW4nKTtcclxuICBzZXRGbGV4UmF0aW8oJGNhZFdyYXBwZXIsIDQgLSBvcGVuZWRUYWJzKTtcclxufVxyXG5cclxuc2NlbmUuc2hvd1Byb3BzUGFuZWwgPSAoKSA9PiB7XHJcbiAgc2hvd1RhYigkcHJvcHNQYW5lbCk7XHJcbiAgcmV0dXJuIHNjZW5lO1xyXG59O1xyXG5zY2VuZS5oaWRlUHJvcHNQYW5lbCA9ICgpID0+IHtcclxuICBoaWRlVGFiKCRwcm9wc1BhbmVsKTtcclxuICByZXR1cm4gc2NlbmU7XHJcbn07XHJcblxyXG5zY2VuZS5zaG93U3RhdGVQYW5lbCA9ICgpID0+IHtcclxuICBzaG93VGFiKCRzdGF0ZVBhbmVsKTtcclxuICByZXR1cm4gc2NlbmU7XHJcbn07XHJcbnNjZW5lLmhpZGVTdGF0ZVBhbmVsID0gKCkgPT4ge1xyXG4gIGhpZGVUYWIoJHN0YXRlUGFuZWwpO1xyXG4gIHJldHVybiBzY2VuZTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBNb2RlbCBwYW5lbCBsaXN0ZW5lcnNcclxuICovXHJcbmNvbnN0ICRtb2RlbE5hbWVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtb2RlbC1uYW1lLWlucHV0Jyk7XHJcbmhhbmRsZU1vZGVsUGFyYW1DaGFuZ2UoJG1vZGVsTmFtZUlucHV0LCAnc2V0TW9kZWxOYW1lJyk7XHJcblxyXG5jb25zdCAkYnJlYWtUaW1lSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYnJlYWstdGltZS1pbnB1dCcpO1xyXG5oYW5kbGVNb2RlbFBhcmFtQ2hhbmdlKCRicmVha1RpbWVJbnB1dCwgJ3NldEJyZWFrVGltZScpO1xyXG5cclxuY29uc3QgJHN0ZXBzSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc3RlcHMtaW5wdXQnKTtcclxuaGFuZGxlTW9kZWxQYXJhbUNoYW5nZSgkc3RlcHNJbnB1dCwgJ3NldFN0ZXBzJyk7XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVNb2RlbFBhcmFtQ2hhbmdlKCRub2RlLCBoYW5kbGVyKSB7XHJcbiAgJG5vZGUuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZSA9PiBzY2hlbWVbaGFuZGxlcl0oZS50YXJnZXQudmFsdWUpKTtcclxufVxyXG5cclxuY29uc3QgJHRvb2xzT3BlbkJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwYW5lbC10b29scy1vcGVuJyk7XHJcbmNvbnN0ICR0b29sc09wZW5JY29uID0gJHRvb2xzT3BlbkJ0bi5xdWVyeVNlbGVjdG9yKCcuaWNvbi1mb3J3YXJkJyk7XHJcbmNvbnN0ICRhZGRUb29sQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2FkZC10b29sLWJ0bicpO1xyXG5jb25zdCAkdG9vbHNMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BhbmVsLXRvb2xzLWxpc3QnKTtcclxuXHJcbmxldCB0b29sc0xpc3RDbG9zZWQgPSB0cnVlO1xyXG4kdG9vbHNPcGVuQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gIHRvb2xzTGlzdENsb3NlZCA9IHRvZ2dsZUxpc3REaXNwbGF5KHRvb2xzTGlzdENsb3NlZCwgJHRvb2xzTGlzdCwgJHRvb2xzT3Blbkljb24pO1xyXG59KTtcclxuJGFkZFRvb2xCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgY29uc3QgdG9vbCA9IHNjaGVtZS5hZGRUb29sKCk7XHJcbiAgdG9vbHNMaXN0Q2xvc2VkID0gYXBwZW5kTGlzdEVsZW1lbnQodG9vbC4kbm9kZSwgJHRvb2xzTGlzdCwgdG9vbHNMaXN0Q2xvc2VkLCAkdG9vbHNPcGVuSWNvbik7XHJcbn0pO1xyXG5cclxuXHJcbmNvbnN0IHN1YnNjcmlwdGlvbnMgPSB7XHJcbiAgdG9vbFR5cGVDaGFuZ2U6ICdzZXRUb29sVHlwZScsXHJcbiAgdG9vbE5hbWVDaGFuZ2U6ICdzZXRUb29sTmFtZScsXHJcbiAgdG9vbFZhbHVlQ2hhbmdlOiAnc2V0VG9vbFZhbHVlJyxcclxuICBzdGF0ZU5hbWVDaGFuZ2U6ICdzZXRTdGF0ZU5hbWUnLFxyXG4gIHN0YXRlSW1nQ2hhbmdlOiAnc2V0U3RhdGVJbWcnLFxyXG4gIGV2ZW50TmFtZUNoYW5nZTogJ3NldEV2ZW50TmFtZScsXHJcbiAgZXZlbnREZXNjQ2hhbmdlOiAnc2V0RXZlbnREZXNjJyxcclxuICBwYXJhbU5hbWVDaGFuZ2U6ICdzZXRQYXJhbU5hbWUnLFxyXG4gIHBhcmFtVmFsdWVDaGFuZ2U6ICdzZXRQYXJhbVZhbHVlJyxcclxufTtcclxuXHJcbk9iamVjdC5rZXlzKHN1YnNjcmlwdGlvbnMpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gIHNldEhhbmRsZXJGb3JUb3BpYyhrZXksIHN1YnNjcmlwdGlvbnNba2V5XSk7XHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gc2V0SGFuZGxlckZvclRvcGljKHRvcGljLCBoYW5kbGVyKSB7XHJcbiAgcHVic3ViLnN1YnNjcmliZSh0b3BpYywgZGF0YSA9PiBzY2hlbWVbaGFuZGxlcl0oZGF0YSkpO1xyXG59XHJcblxyXG5wdWJzdWIuc3Vic2NyaWJlKCdzdGF0ZU5hbWVDaGFuZ2UnLCAoZGF0YSkgPT4ge1xyXG4gIGNvbnN0ICRzdGF0ZU5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHtkYXRhLmlkfWApO1xyXG4gIGNvbnN0ICRzdGF0ZU5hbWUgPSAkc3RhdGVOb2RlLnF1ZXJ5U2VsZWN0b3IoJy5jYWQtc3RhdGUtbmFtZScpO1xyXG4gICRzdGF0ZU5hbWUudGV4dENvbnRlbnQgPSBkYXRhLnZhbHVlO1xyXG59KTtcclxuXHJcbnB1YnN1Yi5zdWJzY3JpYmUoJ3BhcmFtQ3JlYXRlZCcsIChkYXRhKSA9PiB7XHJcbiAgY29uc3QgbmV3UGFyYW0gPSBzY2hlbWUuYWRkUGFyYW1ldGVyKGRhdGEpO1xyXG4gIHN0YXRlUGFuZWwuYXBwZW5kUGFyYW0obmV3UGFyYW0uJHBhcmFtV3JhcHBlcik7XHJcbn0pO1xyXG5cclxucHVic3ViLnN1YnNjcmliZSgnYWN0aW9uQ3JlYXRlZCcsIChkYXRhKSA9PiB7XHJcbiAgY29uc3QgbmV3QWN0aW9uID0gc2NoZW1lLmFkZEFjdGlvbihkYXRhKTtcclxuICBzdGF0ZVBhbmVsLmFwcGVuZEFjdGlvbihuZXdBY3Rpb24uJGFjdGlvbldyYXBwZXIpO1xyXG59KTtcclxuXHJcbnB1YnN1Yi5zdWJzY3JpYmUoJ25leHRTdGF0ZUNoYW5nZScsIChkYXRhKSA9PiB7XHJcbiAgLy8gY3JlYXRlIGpzUGx1bWIgbGlua1xyXG4gIGNvbnN0IHsgc291cmNlLCB0YXJnZXQsIGFjdGlvbklkIH0gPSBkYXRhO1xyXG4gIGpzUGx1bWIuY29ubmVjdCh7IHNvdXJjZSwgdGFyZ2V0IH0pO1xyXG4gIHNjaGVtZS5zZXRBY3Rpb24oc291cmNlLCB0YXJnZXQsIGFjdGlvbklkKTtcclxufSk7XHJcblxyXG4vKipcclxuICogU3RhdGUtb2JqZWN0cyBtYW5hZ2VtZW50XHJcbiAqL1xyXG5zY2VuZS5hZGRTdGF0ZSA9ICgpID0+IHtcclxuICBjb25zdCBzdGF0ZSA9IHNjaGVtZS5hZGRTdGF0ZSgpO1xyXG4gICRjYWRQYW5lLmFwcGVuZENoaWxkKHN0YXRlLiRub2RlKTtcclxuXHJcbiAganNQbHVtYi5kcmFnZ2FibGUoc3RhdGUuJG5vZGUuaWQsIHtcclxuICAgIGNvbnRhaW5tZW50OiB0cnVlLFxyXG4gIH0pO1xyXG5cclxuICBzdGF0ZS4kbm9kZS5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIChlKSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBzdGF0ZVBhbmVsLmZpbGxDb250ZW50KHN0YXRlKTtcclxuICAgIHNjZW5lLnNob3dTdGF0ZVBhbmVsKCk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBzY2VuZTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY2FkL3NjZW5lL3NjZW5lLmpzIiwiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9zYXNzL2NhZC5zY3NzXG4vLyBtb2R1bGUgaWQgPSA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMSIsImltcG9ydCAnLi4vLi4vc2Fzcy9jYWQuc2Nzcyc7XHJcbmltcG9ydCBzY2VuZSBmcm9tICcuL3NjZW5lL3NjZW5lJztcclxuXHJcbmNvbnN0ICRuZXdTdGF0ZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNuZXctc3RhdGUtYnRuJyk7XHJcbmNvbnN0ICRtb2RlbFByb3BzQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21vZGVsLXByb3BzLWJ0bicpO1xyXG5cclxuJG5ld1N0YXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gc2NlbmUuYWRkU3RhdGUoKSk7XHJcbiRtb2RlbFByb3BzQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gc2NlbmUuc2hvd1Byb3BzUGFuZWwoKSk7XHJcblxyXG5jb25zdCAkc3RhdGVDbG9zZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNuZXctc3RhdGUtcGFuZWwgLmljb24tY2xvc2UnKTtcclxuY29uc3QgJHByb3BzQ2xvc2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbW9kZWwtcHJvcHMtcGFuZWwgLmljb24tY2xvc2UnKTtcclxuXHJcbiRzdGF0ZUNsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gc2NlbmUuaGlkZVN0YXRlUGFuZWwoKSk7XHJcbiRwcm9wc0Nsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gc2NlbmUuaGlkZVByb3BzUGFuZWwoKSk7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NhZC9pbmRleC5qcyIsImltcG9ydCBub2RlRmFjdG9yeSBmcm9tICcuLi8uLi91dGlscy9ub2RlRmFjdG9yeSc7XHJcbmltcG9ydCBwdWJzdWIgZnJvbSAnLi4vLi4vdXRpbHMvcHVic3ViLmpzJztcclxuaW1wb3J0IHBhbmVsIGZyb20gJy4vcGFuZWwnO1xyXG5cclxuY29uc3QgeyBhcHBlbmRDaGlsZHJlbiB9ID0gcGFuZWw7XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVBY3Rpb24oZGF0YSA9IHt9KSB7XHJcbiAgY29uc3QgaWQgPSBgYWN0aW9uLSR7ZGF0YS5pZCB8fCBEYXRlLm5vdygpfWA7XHJcbiAgY29uc3QgbmV4dFN0YXRlID0gbnVsbDtcclxuICBjb25zdCB0b29scyA9IFtdO1xyXG5cclxuICBjb25zdCAkYWN0aW9uV3JhcHBlciA9IG5vZGVGYWN0b3J5KCdkaXYnLCB7IGNsYXNzTGlzdDogWydwYW5lbC1hY3Rpb24nXSB9KTtcclxuXHJcbiAgY29uc3QgJG5leHRTdGF0ZUxhYmVsID0gbm9kZUZhY3RvcnkoJ2xhYmVsJywgeyB0ZXh0Q29udGVudDogJ9Ch0LvQtdC00YPRjtGJ0LXQtSDRgdC+0YHRgtC+0Y/QvdC40LUnIH0pO1xyXG4gIGNvbnN0ICRuZXh0U3RhdGVTZWxlY3QgPSBub2RlRmFjdG9yeSgnc2VsZWN0JywgeyBjbGFzc0xpc3Q6IFsnbmV4dC1zdGF0ZS1zZWxlY3QnXSB9KTtcclxuICBPYmplY3Qua2V5cyhkYXRhLnN0YXRlcykuZm9yRWFjaCgoc3RhdGVJZCkgPT4ge1xyXG4gICAgY29uc3QgeyBuYW1lIH0gPSBkYXRhLnN0YXRlc1tzdGF0ZUlkXTtcclxuICAgIGNvbnN0ICRvcHRpb24gPSBub2RlRmFjdG9yeSgnb3B0aW9uJywgeyBhdHRyczogeyB2YWx1ZTogc3RhdGVJZCB9LCB0ZXh0Q29udGVudDogbmFtZSB9KTtcclxuICAgICRuZXh0U3RhdGVTZWxlY3QuYXBwZW5kQ2hpbGQoJG9wdGlvbik7XHJcbiAgfSk7XHJcbiAgJG5leHRTdGF0ZVNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4gY3JlYXRlQ29ubmVjdGlvbihkYXRhLnN0YXRlSWQsICRuZXh0U3RhdGVTZWxlY3QsIGlkKSk7XHJcblxyXG4gIGNvbnN0ICR0b29sc0hlYWRlciA9IG5vZGVGYWN0b3J5KCdkaXYnLCB7IGNsYXNzTGlzdDogWydwYW5lbC1hY3Rpb24tdG9vbHMtaGVhZGVyJ10gfSk7XHJcbiAgY29uc3QgJHRvb2xzSGVhZGVyTGFiZWwgPSBub2RlRmFjdG9yeSgnbGFiZWwnLCB7IHRleHRDb250ZW50OiAn0JfQvdCw0YfQtdC90LjRjyDQv9GA0LjQsdC+0YDQvtCyJyB9KTtcclxuICBjb25zdCAkdG9vbHNIZWFkZXJJY29uID0gbm9kZUZhY3RvcnkoJ2knLCB7IGNsYXNzTGlzdDogWydpY29uJywgJ2ljb24tYWRkJ10gfSk7XHJcbiAgJHRvb2xzSGVhZGVySWNvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7IGFkZEFjdGlvblRvb2woZGF0YS50b29scywgJGFjdGlvbldyYXBwZXIpOyB9KTtcclxuXHJcbiAgYXBwZW5kQ2hpbGRyZW4oJHRvb2xzSGVhZGVyLFxyXG4gICAgWyAkdG9vbHNIZWFkZXJMYWJlbCwgJHRvb2xzSGVhZGVySWNvbiBdXHJcbiAgKTtcclxuXHJcbiAgYXBwZW5kQ2hpbGRyZW4oJGFjdGlvbldyYXBwZXIsXHJcbiAgICBbICRuZXh0U3RhdGVMYWJlbCwgJG5leHRTdGF0ZVNlbGVjdCwgJHRvb2xzSGVhZGVyIF0sXHJcbiAgKTtcclxuXHJcbiAgcmV0dXJuIHsgaWQsICRhY3Rpb25XcmFwcGVyIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3Rpb24oaWQsICRzZWwsIGFjdGlvbklkKSB7XHJcbiAgY29uc3QgbmV4dElkID0gJHNlbC52YWx1ZTtcclxuICBpZiAoaWQgPT09IG5leHRJZCkge1xyXG4gICAgY29uc29sZS53YXJuKCdUcnlpbmcgdG8gY29ubmVjdCB3aXRoIGl0c2VsZicpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBwdWJzdWIucHVibGlzaCgnbmV4dFN0YXRlQ2hhbmdlJywgeyBzb3VyY2U6IGlkLCB0YXJnZXQ6IG5leHRJZCwgYWN0aW9uSWQgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZEFjdGlvblRvb2wodG9vbHMsICRwYXJlbnQpIHtcclxuICBwdWJzdWIucHVibGlzaCgnbmV3QWN0aW9uJywgeyBmb286ICdiYXInIH0pIC8vIHRvZG9cclxuICBjb25zdCAkd3JhcHBlciA9IG5vZGVGYWN0b3J5KCdkaXYnLCB7IGNsYXNzTGlzdDogWyAncGFuZWwtYWN0aW9uLXRvb2wnIF0gfSk7XHJcbiAgY29uc3QgJHNlbGVjdCA9IG5vZGVGYWN0b3J5KCdzZWxlY3QnKTtcclxuICBmaWxsVG9vbHNTZWxlY3QoJHNlbGVjdCwgdG9vbHMpO1xyXG4gICRzZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHtcclxuICAgIHB1YnN1Yi5wdWJsaXNoKCdhY3Rpb25TZWxlY3RDaGFuZ2UnLCB7IGZvbzogJ2JhcicgfSk7IC8vIHRvZG9cclxuICB9KTtcclxuICAkd3JhcHBlci5hcHBlbmRDaGlsZCgkc2VsZWN0KTtcclxuICBhZGRBY3Rpb25Ub29sUHJvcHMoJHNlbGVjdCwgJHdyYXBwZXIpO1xyXG4gICRwYXJlbnQuYXBwZW5kQ2hpbGQoJHdyYXBwZXIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaWxsVG9vbHNTZWxlY3QoJHNlbCwgdG9vbHMpIHtcclxuICBPYmplY3Qua2V5cyh0b29scykuZm9yRWFjaCgodG9vbElkKSA9PiB7XHJcbiAgICBjb25zdCB7IG5hbWUsIHR5cGUgfSA9IHRvb2xzW3Rvb2xJZF07XHJcbiAgICBjb25zdCAkb3B0ID0gbm9kZUZhY3RvcnkoJ29wdGlvbicsIHsgYXR0cnM6IHsgdmFsdWU6IHRvb2xJZCwgJ2RhdGEtdHlwZSc6IHR5cGUgfSwgdGV4dENvbnRlbnQ6IG5hbWUgfSk7XHJcbiAgICAkc2VsLmFwcGVuZENoaWxkKCRvcHQpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRBY3Rpb25Ub29sUHJvcHMoJHNlbCwgJHdyYXBwZXIpIHtcclxuICBjb25zdCBzT3B0aW9uID0gJHNlbC5vcHRpb25zWyRzZWwuc2VsZWN0ZWRJbmRleF07XHJcbiAgY29uc3QgJGRpdiA9IG5vZGVGYWN0b3J5KCdkaXYnLCB7IGNsYXNzTGlzdDogWydwYW5lbC1hY3Rpb24tdG9vbC12YWx1ZSddIH0pO1xyXG4gIHN3aXRjaChzT3B0aW9uLmRhdGFzZXQudHlwZSkge1xyXG4gICAgY2FzZSAnc3dpdGNoJzpcclxuICAgICAgY3JlYXRlU3dpdGNoUHJvcHMoJGRpdik7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAncmFuZ2UnOlxyXG4gICAgICBjcmVhdGVSYW5nZVByb3BzKCRkaXYpO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIGNvbnNvbGUud2FybignSW52YWxpZCBjdXJyZW50IHRvb2wgb3B0aW9uIGluIGFjdGlvbiBjcmVhdG9yJyk7XHJcbiAgICAgIGJyZWFrO1xyXG4gIH1cclxuICAkd3JhcHBlci5hcHBlbmRDaGlsZCgkZGl2KTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlU3dpdGNoUHJvcHMoJHBhcmVudCkge1xyXG4gIC8vIHRvZG8gbWFrZSBJRCdzIHVuaXF1ZVxyXG4gIGNvbnN0ICRsYWJlbCA9IG5vZGVGYWN0b3J5KCdsYWJlbCcsIHsgYXR0cnM6IHsgZm9yOiAnYWN0aW9uLXRvb2wtY2hlY2tib3gnIH0sIHRleHRDb250ZW50OiAn0JLQutC70Y7Rh9C10L0/JyB9KTtcclxuICBjb25zdCAkaW5wdXQgPSBub2RlRmFjdG9yeSgnaW5wdXQnLCB7IGF0dHJzOiB7IHR5cGU6ICdjaGVja2JveCcsIGlkOiAnYWN0aW9uLXRvb2wtY2hlY2tib3gnIH0gfSk7XHJcblxyXG4gIGFwcGVuZENoaWxkcmVuKCRwYXJlbnQsIFsgJGxhYmVsLCAkaW5wdXQgXSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVJhbmdlUHJvcHMoJHBhcmVudCkge1xyXG4gIGNvbnN0ICRpbnB1dE1pbiA9IG5vZGVGYWN0b3J5KCdpbnB1dCcsIHsgYXR0cnM6IHtcclxuICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgIHBsYWNlaG9sZGVyOiAn0JzQuNC90LjQvNGD0LwnLFxyXG4gIH0gfSk7XHJcblxyXG4gIGNvbnN0ICRpbnB1dE1heCA9IG5vZGVGYWN0b3J5KCdpbnB1dCcsIHsgYXR0cnM6IHtcclxuICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgIHBsYWNlaG9sZGVyOiAn0JzQsNC60YHQuNC80YPQvCcsXHJcbiAgfSB9KTtcclxuICBhcHBlbmRDaGlsZHJlbigkcGFyZW50LCBbICRpbnB1dE1pbiwgJGlucHV0TWF4IF0pO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVBY3Rpb247XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NhZC9zY2VuZS9hY3Rpb25TdG9yZS5qcyIsImltcG9ydCBub2RlRmFjdG9yeSBmcm9tICcuLi8uLi91dGlscy9ub2RlRmFjdG9yeSc7XHJcbmltcG9ydCBwdWJzdWIgZnJvbSAnLi4vLi4vdXRpbHMvcHVic3ViJztcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVBhcmFtTm9kZShkYXRhID0ge30pIHtcclxuICBjb25zdCBpZCA9IGBwYXJhbS0ke2RhdGEuaWR9YDtcclxuICBjb25zdCBuYW1lID0gJyc7XHJcbiAgY29uc3QgdmFsdWUgPSAnJztcclxuICBjb25zdCAkcGFyYW1XcmFwcGVyID0gbm9kZUZhY3RvcnkoJ2RpdicsIHsgY2xhc3NMaXN0OiBbJ3BhbmVsLXBhcmFtJ10gfSk7XHJcbiAgY29uc3QgeyBzdGF0ZUlkIH0gPSBkYXRhO1xyXG5cclxuICBjb25zdCAkbmFtZUlucHV0ID0gbm9kZUZhY3RvcnkoJ2lucHV0Jywge1xyXG4gICAgYXR0cnM6IHtcclxuICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICBwbGFjZWhvbGRlcjogJ05hbWUnLFxyXG4gICAgfSxcclxuICB9KTtcclxuICAkbmFtZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7XHJcbiAgICBjb25zdCBuZXdOYW1lID0gZS50YXJnZXQudmFsdWU7XHJcbiAgICBwdWJzdWIucHVibGlzaCgncGFyYW1OYW1lQ2hhbmdlJywgeyBpZCwgdmFsdWU6IG5ld05hbWUsIHN0YXRlSWQgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0ICR2YWx1ZUlucHV0ID0gbm9kZUZhY3RvcnkoJ2lucHV0Jywge1xyXG4gICAgYXR0cnM6IHtcclxuICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICBwbGFjZWhvbGRlcjogJ1ZhbHVlJyxcclxuICAgIH0sXHJcbiAgfSk7XHJcbiAgJHZhbHVlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHtcclxuICAgIGNvbnN0IG5ld1ZhbHVlID0gZS50YXJnZXQudmFsdWU7XHJcbiAgICBwdWJzdWIucHVibGlzaCgncGFyYW1WYWx1ZUNoYW5nZScsIHsgaWQsIHZhbHVlOiBuZXdWYWx1ZSwgc3RhdGVJZCB9KTtcclxuICB9KTtcclxuXHJcbiAgJHBhcmFtV3JhcHBlci5hcHBlbmRDaGlsZCgkbmFtZUlucHV0KTtcclxuICAkcGFyYW1XcmFwcGVyLmFwcGVuZENoaWxkKCR2YWx1ZUlucHV0KTtcclxuICByZXR1cm4ge1xyXG4gICAgaWQsXHJcbiAgICBuYW1lLFxyXG4gICAgdmFsdWUsXHJcbiAgICAkcGFyYW1XcmFwcGVyLFxyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVBhcmFtTm9kZTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY2FkL3NjZW5lL3BhcmFtU3RvcmUuanMiLCJpbXBvcnQgcHVic3ViIGZyb20gJy4uLy4uL3V0aWxzL3B1YnN1Yic7XHJcbmltcG9ydCBwYW5lbCBmcm9tICcuL3BhbmVsJztcclxuXHJcbmNvbnN0IHsgdG9nZ2xlTGlzdERpc3BsYXkgfSA9IHBhbmVsO1xyXG5jb25zdCBzdGF0ZVBhbmVsID0ge307XHJcblxyXG4vKipcclxuICogUGFuZWwgZGF0YSBoYW5kbGVyc1xyXG4gKi9cclxuY29uc3QgJGN1cnJlbnRTdGF0ZUlkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2N1cnJlbnQtc3RhdGUtaWQnKTtcclxuY29uc3QgJHN0YXRlTmFtZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N0YXRlLW5hbWUtaW5wdXQnKTtcclxuY29uc3QgJGltZ1NlbGVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNpbWFnZS1zZWxlY3QnKTtcclxuY29uc3QgJGV2ZW50TmFtZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2V2ZW50LW5hbWUtaW5wdXQnKTtcclxuY29uc3QgJGV2ZW50RGVzY0lucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2V2ZW50LWRlc2NyaXB0aW9uLWlucHV0Jyk7XHJcbmNvbnN0ICRwYXJhbXNMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BhbmVsLXBhcmFtcy1saXN0Jyk7XHJcbmNvbnN0ICRhY3Rpb25zTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwYW5lbC1hY3Rpb25zLWxpc3QnKTtcclxuXHJcblxyXG5zdGF0ZVBhbmVsLmZpbGxDb250ZW50ID0gKHN0YXRlKSA9PiB7XHJcbiAgJGN1cnJlbnRTdGF0ZUlkLnZhbHVlID0gc3RhdGUuaWQ7XHJcbiAgJHN0YXRlTmFtZUlucHV0LnZhbHVlID0gc3RhdGUubmFtZTtcclxuICAkaW1nU2VsZWN0LnZhbHVlID0gc3RhdGUuaW1nO1xyXG4gICRldmVudE5hbWVJbnB1dC52YWx1ZSA9IHN0YXRlLmV2ZW50TmFtZTtcclxuICAkZXZlbnREZXNjSW5wdXQudmFsdWUgPSBzdGF0ZS5ldmVudERlc2M7XHJcblxyXG4gICRwYXJhbXNMaXN0LmlubmVySFRNTCA9ICcnO1xyXG4gIE9iamVjdC5rZXlzKHN0YXRlLnBhcmFtcykuZm9yRWFjaCgocGFyYW1JZCkgPT4ge1xyXG4gICAgJHBhcmFtc0xpc3QuYXBwZW5kQ2hpbGQoc3RhdGUucGFyYW1zW3BhcmFtSWRdLiRwYXJhbVdyYXBwZXIpO1xyXG4gIH0pO1xyXG5cclxuICAkYWN0aW9uc0xpc3QuaW5uZXJIVE1MID0gJyc7XHJcbiAgT2JqZWN0LmtleXMoc3RhdGUuYWN0aW9ucykuZm9yRWFjaCgoYWN0aW9uSWQpID0+IHtcclxuICAgICRhY3Rpb25zTGlzdC5hcHBlbmRDaGlsZChzdGF0ZS5hY3Rpb25zW2FjdGlvbklkXS4kYWN0aW9uV3JhcHBlcik7XHJcbiAgfSk7XHJcbn07XHJcblxyXG5wdWJsaXNoT25DaGFuZ2UoJHN0YXRlTmFtZUlucHV0LCAnc3RhdGVOYW1lQ2hhbmdlJyk7XHJcbnB1Ymxpc2hPbkNoYW5nZSgkaW1nU2VsZWN0LCAnc3RhdGVJbWdDaGFuZ2UnKTtcclxucHVibGlzaE9uQ2hhbmdlKCRldmVudE5hbWVJbnB1dCwgJ2V2ZW50TmFtZUNoYW5nZScpO1xyXG5wdWJsaXNoT25DaGFuZ2UoJGV2ZW50RGVzY0lucHV0LCAnZXZlbnREZXNjQ2hhbmdlJyk7XHJcblxyXG5mdW5jdGlvbiBwdWJsaXNoT25DaGFuZ2UoJG5vZGUsIHRvcGljKSB7XHJcbiAgJG5vZGUuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGV2ZW50KSA9PiB7XHJcbiAgICBjb25zdCBpZCA9ICRjdXJyZW50U3RhdGVJZC52YWx1ZTtcclxuICAgIGNvbnN0IHZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xyXG4gICAgcHVic3ViLnB1Ymxpc2godG9waWMsIHsgaWQsIHZhbHVlIH0pO1xyXG4gIH0pO1xyXG59XHJcblxyXG4vKipcclxuICogU3RhdGUgcGFyYW1zXHJcbiAqL1xyXG5jb25zdCAkcGFyYW1zT3BlbkJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwYW5lbC1wYXJhbXMtb3BlbicpO1xyXG5jb25zdCAkcGFyYW1zT3Blbkljb24gPSAkcGFyYW1zT3BlbkJ0bi5xdWVyeVNlbGVjdG9yKCcuaWNvbi1mb3J3YXJkJyk7XHJcbmNvbnN0ICRhZGRQYXJhbUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhZGQtcGFyYW0tYnRuJyk7XHJcblxyXG5sZXQgcGFyYW1zTGlzdENsb3NlZCA9IHRydWU7XHJcblxyXG4kcGFyYW1zT3BlbkJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICBwYXJhbXNMaXN0Q2xvc2VkID0gdG9nZ2xlTGlzdERpc3BsYXkocGFyYW1zTGlzdENsb3NlZCwgJHBhcmFtc0xpc3QsICRwYXJhbXNPcGVuSWNvbik7XHJcbn0pO1xyXG5cclxuJGFkZFBhcmFtQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gIGNvbnN0IGlkID0gJGN1cnJlbnRTdGF0ZUlkLnZhbHVlO1xyXG4gIHB1YnN1Yi5wdWJsaXNoKCdwYXJhbUNyZWF0ZWQnLCB7IGlkIH0pO1xyXG4gIGlmIChwYXJhbXNMaXN0Q2xvc2VkKSB7XHJcbiAgICBwYXJhbXNMaXN0Q2xvc2VkID0gdG9nZ2xlTGlzdERpc3BsYXkocGFyYW1zTGlzdENsb3NlZCwgJHBhcmFtc0xpc3QsICRwYXJhbXNPcGVuSWNvbik7XHJcbiAgfVxyXG59KTtcclxuXHJcbnN0YXRlUGFuZWwuYXBwZW5kUGFyYW0gPSAoJG5vZGUpID0+IHtcclxuICAkcGFyYW1zTGlzdC5hcHBlbmRDaGlsZCgkbm9kZSk7XHJcbn07XHJcblxyXG4vKipcclxuICogQWN0aW9uc1xyXG4gKi9cclxuY29uc3QgJGFjdGlvbnNPcGVuQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BhbmVsLWFjdGlvbnMtb3BlbicpO1xyXG5jb25zdCAkYWN0aW9uc09wZW5JY29uID0gJGFjdGlvbnNPcGVuQnRuLnF1ZXJ5U2VsZWN0b3IoJy5pY29uLWZvcndhcmQnKTtcclxuY29uc3QgJGFkZEFjdGlvbkJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhZGQtYWN0aW9uLWJ0bicpO1xyXG5cclxubGV0IGFjdGlvbnNMaXN0Q2xvc2VkID0gdHJ1ZTtcclxuXHJcbiRhY3Rpb25zT3BlbkJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICBhY3Rpb25zTGlzdENsb3NlZCA9IHRvZ2dsZUxpc3REaXNwbGF5KGFjdGlvbnNMaXN0Q2xvc2VkLCAkYWN0aW9uc0xpc3QsICRhY3Rpb25zT3Blbkljb24pO1xyXG59KTtcclxuXHJcbiRhZGRBY3Rpb25CdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgY29uc3QgaWQgPSAkY3VycmVudFN0YXRlSWQudmFsdWU7XHJcbiAgcHVic3ViLnB1Ymxpc2goJ2FjdGlvbkNyZWF0ZWQnLCB7IGlkIH0pO1xyXG4gIGlmIChhY3Rpb25zTGlzdENsb3NlZCkge1xyXG4gICAgYWN0aW9uc0xpc3RDbG9zZWQgPSB0b2dnbGVMaXN0RGlzcGxheShhY3Rpb25zTGlzdENsb3NlZCwgJGFjdGlvbnNMaXN0LCAkYWN0aW9uc09wZW5JY29uKTtcclxuICB9XHJcbn0pO1xyXG5cclxuc3RhdGVQYW5lbC5hcHBlbmRBY3Rpb24gPSAoJG5vZGUpID0+IHtcclxuICAkYWN0aW9uc0xpc3QuYXBwZW5kQ2hpbGQoJG5vZGUpO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgc3RhdGVQYW5lbDtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY2FkL3NjZW5lL3N0YXRlUGFuZWwuanMiLCJpbXBvcnQgbm9kZUZhY3RvcnkgZnJvbSAnLi4vLi4vdXRpbHMvbm9kZUZhY3RvcnknO1xyXG5cclxuZnVuY3Rpb24gY3JlYXRlU3RhdGVOb2RlKGRhdGEgPSB7fSkge1xyXG4gIGNvbnN0IGlkID0gYHN0YXRlLSR7ZGF0YS5pZCB8fCBEYXRlLm5vdygpfWA7XHJcbiAgY29uc3QgbmFtZSA9IGRhdGEubmFtZSB8fCAn0KHQvtGB0YLQvtGP0L3QuNC1JztcclxuICBjb25zdCBpbWcgPSAnMSc7XHJcbiAgY29uc3QgZXZlbnROYW1lID0gJyc7XHJcbiAgY29uc3QgZXZlbnREZXNjID0gJyc7XHJcbiAgY29uc3QgcGFyYW1zID0ge307XHJcbiAgY29uc3QgYWN0aW9ucyA9IFtdO1xyXG5cclxuICBjb25zdCAkbm9kZSA9IG5vZGVGYWN0b3J5KCdkaXYnLCB7IGNsYXNzTGlzdDogWydjYWQtc3RhdGUnXSwgYXR0cnM6IHsgaWQgfSB9KTtcclxuICBjb25zdCAkc3RhdGVOYW1lID0gbm9kZUZhY3RvcnkoJ2g1JywgeyBjbGFzc0xpc3Q6IFsnY2FkLXN0YXRlLW5hbWUnXSwgdGV4dENvbnRlbnQ6IG5hbWUgfSk7XHJcbiAgJG5vZGUuYXBwZW5kQ2hpbGQoJHN0YXRlTmFtZSk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBpZCxcclxuICAgIG5hbWUsXHJcbiAgICBpbWcsXHJcbiAgICBldmVudE5hbWUsXHJcbiAgICBldmVudERlc2MsXHJcbiAgICBwYXJhbXMsXHJcbiAgICBhY3Rpb25zLFxyXG4gICAgJG5vZGUsXHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3RhdGVOb2RlO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jYWQvc2NlbmUvc3RhdGVTdG9yZS5qcyIsImltcG9ydCBub2RlRmFjdG9yeSBmcm9tICcuLi8uLi91dGlscy9ub2RlRmFjdG9yeSc7XHJcbmltcG9ydCBwdWJzdWIgZnJvbSAnLi4vLi4vdXRpbHMvcHVic3ViJztcclxuaW1wb3J0IHBhbmVsIGZyb20gJy4vcGFuZWwnO1xyXG5cclxuY29uc3QgeyBhcHBlbmRDaGlsZHJlbiB9ID0gcGFuZWw7XHJcblxyXG5jb25zdCBUT09MX1RZUEVTID0gWyAnU3dpdGNoJywgJ1JhbmdlJyBdO1xyXG5cclxuZnVuY3Rpb24gY3JlYXRlVG9vbE5vZGUoZGF0YSA9IHt9KSB7XHJcbiAgY29uc3QgaWQgPSBgdG9vbC0ke2RhdGEuaWQgfHwgRGF0ZS5ub3coKX1gO1xyXG4gIGNvbnN0IG5hbWUgPSAnJztcclxuICBjb25zdCBtaW5WYWx1ZSA9ICcnO1xyXG4gIGNvbnN0IG1heFZhbHVlID0gJyc7XHJcbiAgY29uc3QgdHlwZSA9IFRPT0xfVFlQRVNbMF0udG9Mb3dlckNhc2UoKTtcclxuXHJcbiAgY29uc3QgJHRvb2xXcmFwcGVyID0gbm9kZUZhY3RvcnkoJ2RpdicsIHsgY2xhc3NMaXN0OiBbJ3BhbmVsLXRvb2wnXSwgYXR0cnM6IHsgaWQgfSB9KTtcclxuICBjb25zdCAkbmFtZUxhYmVsID0gbm9kZUZhY3RvcnkoJ2xhYmVsJywge1xyXG4gICAgY2xhc3NMaXN0OiBbJ3BhbmVsLXRvb2wtbmFtZSddLFxyXG4gICAgdGV4dENvbnRlbnQ6ICfQndCw0LfQstCw0L3QuNC1INC/0YDQuNCx0L7RgNCwJyxcclxuICB9KTtcclxuICBjb25zdCAkbmFtZUlucHV0ID0gbm9kZUZhY3RvcnkoJ2lucHV0JywgeyBhdHRyczogeyB0eXBlOiAndGV4dCcgfSB9KTtcclxuICAkbmFtZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7XHJcbiAgICBjb25zdCB2YWx1ZSA9IGUudGFyZ2V0LnZhbHVlO1xyXG4gICAgcHVic3ViLnB1Ymxpc2goJ3Rvb2xOYW1lQ2hhbmdlJywgeyBpZCwgdmFsdWUgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0ICR0b29sVHlwZVdyYXBwZXIgPSBub2RlRmFjdG9yeSgnZGl2JywgeyBjbGFzc0xpc3Q6IFsncGFuZWwtdG9vbC10eXBlJ10gfSk7XHJcbiAgY29uc3QgJHRvb2xUeXBlTGFiZWwgPSBub2RlRmFjdG9yeSgnbGFiZWwnLCB7IHRleHRDb250ZW50OiAn0KLQuNC/INC/0YDQuNCx0L7RgNCwJyB9KTtcclxuICBjb25zdCAkdG9vbFR5cGVTZWxlY3QgPSBub2RlRmFjdG9yeSgnc2VsZWN0Jyk7XHJcbiAgVE9PTF9UWVBFUy5mb3JFYWNoKHRvb2xUeXBlID0+ICR0b29sVHlwZVNlbGVjdC5hcHBlbmRDaGlsZChjcmVhdGVPcHRpb24odG9vbFR5cGUpKSk7XHJcbiAgY29uc3QgJHJhbmdlVmFsdWVzID0gY3JlYXRlUmFuZ2VWYWx1ZXMoaWQpO1xyXG5cclxuICAkdG9vbFR5cGVTZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHtcclxuICAgIGNvbnN0IHZhbHVlID0gZS50YXJnZXQudmFsdWUudG9Mb3dlckNhc2UoKTtcclxuXHJcbiAgICBwdWJzdWIucHVibGlzaCgndG9vbFR5cGVDaGFuZ2UnLCB7IGlkLCB2YWx1ZSB9KTtcclxuXHJcbiAgICBpZiAodmFsdWUgPT09ICdyYW5nZScpIHtcclxuICAgICAgJHJhbmdlVmFsdWVzLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAkcmFuZ2VWYWx1ZXMuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgYXBwZW5kQ2hpbGRyZW4oJHRvb2xUeXBlV3JhcHBlciwgWyAkdG9vbFR5cGVMYWJlbCwgJHRvb2xUeXBlU2VsZWN0IF0pO1xyXG4gIGNvbnN0ICRub2RlID0gYXBwZW5kQ2hpbGRyZW4oXHJcbiAgICAkdG9vbFdyYXBwZXIsXHJcbiAgICBbICRuYW1lTGFiZWwsICRuYW1lSW5wdXQsICR0b29sVHlwZVdyYXBwZXIsICRyYW5nZVZhbHVlcyBdLFxyXG4gICk7XHJcblxyXG4gIHJldHVybiB7IGlkLCBuYW1lLCB0eXBlLCBtaW5WYWx1ZSwgbWF4VmFsdWUsICRub2RlIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbih2YWx1ZSwgbmFtZSkge1xyXG4gIHJldHVybiBub2RlRmFjdG9yeSgnb3B0aW9uJywge1xyXG4gICAgdGV4dENvbnRlbnQ6IHZhbHVlLFxyXG4gICAgYXR0cnM6IHsgbmFtZTogbmFtZSB8fCB2YWx1ZS50b0xvd2VyQ2FzZSgpIH0sXHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVJhbmdlVmFsdWVzKGlkKSB7XHJcbiAgY29uc3QgJHdyYXBwZXIgPSBub2RlRmFjdG9yeSgnZGl2JywgeyBjbGFzc0xpc3Q6IFsncGFuZWwtdG9vbC1yYW5nZS12YWx1ZXMnXSB9KTtcclxuICByZXR1cm4gYXBwZW5kQ2hpbGRyZW4oXHJcbiAgICAkd3JhcHBlcixcclxuICAgIFtcclxuICAgICAgeyB0ZXh0OiAn0JzQuNC90LjQvNGD0LwnLCBsaW1pdDogJ21pbicgfSxcclxuICAgICAgeyB0ZXh0OiAn0JzQsNC60YHQuNC80YPQvCcsIGxpbWl0OiAnbWF4JyB9LFxyXG4gICAgXS5tYXAoZGF0YSA9PiBjcmVhdGVSYW5nZVZhbHVlKGRhdGEsIGlkKSksXHJcbiAgKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlUmFuZ2VWYWx1ZShkYXRhLCBpZCA9IDEpIHtcclxuICBjb25zdCAkZGl2ID0gbm9kZUZhY3RvcnkoJ2RpdicsIHsgYXR0cnM6IHsgJ2RhdGEtbGltaXQnOiBkYXRhLmxpbWl0IH0gfSk7XHJcbiAgY29uc3QgJGxhYmVsID0gbm9kZUZhY3RvcnkoJ2xhYmVsJywgeyB0ZXh0Q29udGVudDogZGF0YS50ZXh0IH0pO1xyXG4gIGNvbnN0ICRpbnB1dCA9IG5vZGVGYWN0b3J5KCdpbnB1dCcsIHsgYXR0cnM6IHsgdHlwZTogJ3RleHQnIH0gfSk7XHJcbiAgJGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7XHJcbiAgICBjb25zdCB2YWx1ZSA9IGUudGFyZ2V0LnZhbHVlO1xyXG4gICAgY29uc3QgbGltaXQgPSBkYXRhLmxpbWl0IHx8ICdtaW4nO1xyXG4gICAgcHVic3ViLnB1Ymxpc2goJ3Rvb2xWYWx1ZUNoYW5nZScsIHsgaWQsIHZhbHVlLCBsaW1pdCB9KTtcclxuICB9KTtcclxuICByZXR1cm4gYXBwZW5kQ2hpbGRyZW4oJGRpdiwgWyAkbGFiZWwsICRpbnB1dCBdKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlVG9vbE5vZGU7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NhZC9zY2VuZS90b29sU3RvcmUuanMiLCJmdW5jdGlvbiBnZW5lcmF0ZUlkKGluaXRpYWxWYWx1ZSA9IDEpIHtcclxuICBsZXQgaWQgPSBpbml0aWFsVmFsdWU7XHJcblxyXG4gIHJldHVybiBmdW5jdGlvbiBnZW5lcmF0ZSgpIHtcclxuICAgIHJldHVybiBpZCsrO1xyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGdlbmVyYXRlSWQ7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NhZC9zY2hlbWUvaWRHZW4uanMiLCJpbXBvcnQgc3RhdGVTdG9yZSBmcm9tICcuLi9zY2VuZS9zdGF0ZVN0b3JlJztcclxuaW1wb3J0IHRvb2xTdG9yZSBmcm9tICcuLi9zY2VuZS90b29sU3RvcmUnO1xyXG5pbXBvcnQgcGFyYW1TdG9yZSBmcm9tICcuLi9zY2VuZS9wYXJhbVN0b3JlJztcclxuaW1wb3J0IGFjdGlvblN0b3JlIGZyb20gJy4uL3NjZW5lL2FjdGlvblN0b3JlJztcclxuaW1wb3J0IGlkR2VuZXJhdG9yIGZyb20gJy4vaWRHZW4nO1xyXG5cclxuY29uc3Qgc3RhdGVJZEdlbiA9IGlkR2VuZXJhdG9yKCk7XHJcbmNvbnN0IHRvb2xJZEdlbiA9IGlkR2VuZXJhdG9yKCk7XHJcbmNvbnN0IHBhcmFtSWRHZW4gPSBpZEdlbmVyYXRvcigpO1xyXG5jb25zdCBhY3Rpb25JZEdlbiA9IGlkR2VuZXJhdG9yKCk7XHJcblxyXG5jbGFzcyBTY2hlbWUge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5tb2RlbE5hbWUgPSAn0JHQtdC3INC90LDQt9Cy0LDQvdC40Y8nO1xyXG4gICAgdGhpcy5icmVha1RpbWUgPSAwO1xyXG4gICAgdGhpcy5zdGVwcyA9IDA7XHJcblxyXG4gICAgdGhpcy5zdGF0ZXMgPSB7fTtcclxuXHJcbiAgICB0aGlzLnRvb2xzID0ge307XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNb2RlbCBpbmZvXHJcbiAgICovXHJcbiAgc2V0TW9kZWxOYW1lKG5hbWUpIHtcclxuICAgIHRoaXMubW9kZWxOYW1lID0gbmFtZTtcclxuICAgIGNvbnNvbGUubG9nKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgc2V0QnJlYWtUaW1lKGJyZWFrVGltZSkge1xyXG4gICAgdGhpcy5icmVha1RpbWUgPSBicmVha1RpbWU7XHJcbiAgfVxyXG5cclxuICBzZXRTdGVwcyhzdGVwcykge1xyXG4gICAgdGhpcy5zdGVwcyA9IHN0ZXBzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWRkIGNvbXBvbmVudHMgdG8gc2NoZW1lXHJcbiAgICovXHJcbiAgYWRkVG9vbCgpIHtcclxuICAgIHJldHVybiB0aGlzLmFkZENvbXBvbmVudCh0b29sSWRHZW4sIHRvb2xTdG9yZSwgJ3Rvb2xzJyk7XHJcbiAgfVxyXG5cclxuICBhZGRTdGF0ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmFkZENvbXBvbmVudChzdGF0ZUlkR2VuLCBzdGF0ZVN0b3JlLCAnc3RhdGVzJyk7XHJcbiAgfVxyXG5cclxuICBhZGRQYXJhbWV0ZXIoZGF0YSkge1xyXG4gICAgY29uc3QgaWQgPSBwYXJhbUlkR2VuKCk7XHJcbiAgICBjb25zdCBuZXdDb21wb25lbnQgPSBwYXJhbVN0b3JlKHsgaWQsIHN0YXRlSWQ6IGRhdGEuaWQgfSk7XHJcbiAgICB0aGlzLnN0YXRlc1tkYXRhLmlkXS5wYXJhbXNbbmV3Q29tcG9uZW50LmlkXSA9IG5ld0NvbXBvbmVudDtcclxuICAgIHJldHVybiBuZXdDb21wb25lbnQ7XHJcbiAgfVxyXG5cclxuICBhZGRBY3Rpb24oZGF0YSkge1xyXG4gICAgY29uc3QgaWQgPSBhY3Rpb25JZEdlbigpO1xyXG4gICAgY29uc3QgbmV3QWN0aW9uID0gYWN0aW9uU3RvcmUoeyBpZCwgc3RhdGVJZDogZGF0YS5pZCwgc3RhdGVzOiB0aGlzLnN0YXRlcywgdG9vbHM6IHRoaXMudG9vbHMgfSk7XHJcbiAgICB0aGlzLnN0YXRlc1tkYXRhLmlkXS5hY3Rpb25zW25ld0FjdGlvbi5pZF0gPSBuZXdBY3Rpb247XHJcbiAgICByZXR1cm4gbmV3QWN0aW9uO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIG5ldyBzY2hlbWUgY29tcG9uZW50IHdpdGggdW5kZXJseWluZyBET00gbm9kZVxyXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGdlbiAtIEZ1bmN0aW9uIGZvciBnZW5lcmF0aW5nIGlkXHJcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gc3RvcmUgLSBGdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IG9iamVjdFxyXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBsaXN0IC0gT2JqZWN0IGNvbnRhaW5pbmcgc2NoZW1lIGNvbXBvbmVudHNcclxuICAgKi9cclxuICBhZGRDb21wb25lbnQoZ2VuLCBzdG9yZSwgbGlzdCkge1xyXG4gICAgY29uc3QgaWQgPSBnZW4oKTtcclxuICAgIGNvbnN0IG5ld0NvbXBvbmVudCA9IHN0b3JlKHsgaWQgfSk7XHJcbiAgICB0aGlzW2xpc3RdW25ld0NvbXBvbmVudC5pZF0gPSBuZXdDb21wb25lbnQ7XHJcbiAgICByZXR1cm4gbmV3Q29tcG9uZW50O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IG5ldyB0eXBlIGZvciB0b29sIHdpdGggZ2l2ZW4gaWRcclxuICAgKiBAcGFyYW0geyBpZDogU3RyaW5nLCB2YWx1ZTogU3RyaW5nIH0gZGF0YVxyXG4gICAqL1xyXG4gIHNldFRvb2xUeXBlKGRhdGEpIHtcclxuICAgIHRoaXMudG9vbHNbZGF0YS5pZF0udHlwZSA9IGRhdGEudmFsdWU7XHJcbiAgfVxyXG5cclxuICBzZXRUb29sTmFtZShkYXRhKSB7XHJcbiAgICB0aGlzLnRvb2xzW2RhdGEuaWRdLm5hbWUgPSBkYXRhLnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgc2V0VG9vbFZhbHVlKGRhdGEpIHtcclxuICAgIGNvbnN0IHByb3AgPSBgJHtkYXRhLmxpbWl0fVZhbHVlYDtcclxuICAgIHRoaXMudG9vbHNbZGF0YS5pZF1bcHJvcF0gPSBkYXRhLnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSGFuZGxlIHN0YXRlIGRhdGEgY2hhbmdlXHJcbiAgICovXHJcbiAgc2V0U3RhdGVOYW1lKGRhdGEpIHtcclxuICAgIHRoaXMuc3RhdGVzW2RhdGEuaWRdLm5hbWUgPSBkYXRhLnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgc2V0U3RhdGVJbWcoZGF0YSkge1xyXG4gICAgdGhpcy5zdGF0ZXNbZGF0YS5pZF0uaW1nID0gZGF0YS52YWx1ZTtcclxuICB9XHJcblxyXG4gIHNldEV2ZW50TmFtZShkYXRhKSB7XHJcbiAgICB0aGlzLnN0YXRlc1tkYXRhLmlkXS5ldmVudE5hbWUgPSBkYXRhLnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnREZXNjKGRhdGEpIHtcclxuICAgIHRoaXMuc3RhdGVzW2RhdGEuaWRdLmV2ZW50RGVzYyA9IGRhdGEudmFsdWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBIYW5kbGUgc3RhdGUgcGFyYW1ldGVycyBjaGFuZ2VcclxuICAgKi9cclxuICBzZXRQYXJhbU5hbWUoeyBpZCwgdmFsdWUsIHN0YXRlSWQgfSkge1xyXG4gICAgdGhpcy5zdGF0ZXNbc3RhdGVJZF0ucGFyYW1zW2lkXS5uYW1lID0gdmFsdWU7XHJcbiAgfVxyXG5cclxuICBzZXRQYXJhbVZhbHVlKHsgaWQsIHZhbHVlLCBzdGF0ZUlkIH0pIHtcclxuICAgIHRoaXMuc3RhdGVzW3N0YXRlSWRdLnBhcmFtc1tpZF0udmFsdWUgPSB2YWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEhhbmRsZSBhY3Rpb25zXHJcbiAgICovXHJcbiAgc2V0QWN0aW9uKHNvdXJjZSwgdGFyZ2V0LCBhY3Rpb25JZCkge1xyXG4gICAgdGhpcy5zdGF0ZXNbc291cmNlXS5hY3Rpb25zW2FjdGlvbklkXS5uZXh0U3RhdGUgPSB0YXJnZXQ7XHJcbiAgICByZXR1cm47IC8vIHRvZG9cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNjaGVtZTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY2FkL3NjaGVtZS9zY2hlbWUuanMiLCIoZnVuY3Rpb24oKXtcInVuZGVmaW5lZFwiPT10eXBlb2YgTWF0aC5zZ24mJihNYXRoLnNnbj1mdW5jdGlvbihhKXtyZXR1cm4gMD09YT8wOmE+MD8xOi0xfSk7dmFyIGE9e3N1YnRyYWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJue3g6YS54LWIueCx5OmEueS1iLnl9fSxkb3RQcm9kdWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIGEueCpiLngrYS55KmIueX0sc3F1YXJlOmZ1bmN0aW9uKGEpe3JldHVybiBNYXRoLnNxcnQoYS54KmEueCthLnkqYS55KX0sc2NhbGU6ZnVuY3Rpb24oYSxiKXtyZXR1cm57eDphLngqYix5OmEueSpifX19LGI9NjQsYz1NYXRoLnBvdygyLC1iLTEpLGQ9ZnVuY3Rpb24oYixjKXtmb3IodmFyIGQ9W10sZT1mKGIsYyksaD1jLmxlbmd0aC0xLGk9MipoLTEsaj1nKGUsaSxkLDApLGs9YS5zdWJ0cmFjdChiLGNbMF0pLG09YS5zcXVhcmUoayksbj0wLG89MDtqPm87bysrKXtrPWEuc3VidHJhY3QoYixsKGMsaCxkW29dLG51bGwsbnVsbCkpO3ZhciBwPWEuc3F1YXJlKGspO20+cCYmKG09cCxuPWRbb10pfXJldHVybiBrPWEuc3VidHJhY3QoYixjW2hdKSxwPWEuc3F1YXJlKGspLG0+cCYmKG09cCxuPTEpLHtsb2NhdGlvbjpuLGRpc3RhbmNlOm19fSxlPWZ1bmN0aW9uKGEsYil7dmFyIGM9ZChhLGIpO3JldHVybntwb2ludDpsKGIsYi5sZW5ndGgtMSxjLmxvY2F0aW9uLG51bGwsbnVsbCksbG9jYXRpb246Yy5sb2NhdGlvbn19LGY9ZnVuY3Rpb24oYixjKXtmb3IodmFyIGQ9Yy5sZW5ndGgtMSxlPTIqZC0xLGY9W10sZz1bXSxoPVtdLGk9W10saz1bWzEsLjYsLjMsLjFdLFsuNCwuNiwuNiwuNF0sWy4xLC4zLC42LDFdXSxsPTA7ZD49bDtsKyspZltsXT1hLnN1YnRyYWN0KGNbbF0sYik7Zm9yKHZhciBsPTA7ZC0xPj1sO2wrKylnW2xdPWEuc3VidHJhY3QoY1tsKzFdLGNbbF0pLGdbbF09YS5zY2FsZShnW2xdLDMpO2Zvcih2YXIgbT0wO2QtMT49bTttKyspZm9yKHZhciBuPTA7ZD49bjtuKyspaFttXXx8KGhbbV09W10pLGhbbV1bbl09YS5kb3RQcm9kdWN0KGdbbV0sZltuXSk7Zm9yKGw9MDtlPj1sO2wrKylpW2xdfHwoaVtsXT1bXSksaVtsXS55PTAsaVtsXS54PXBhcnNlRmxvYXQobCkvZTtmb3IodmFyIG89ZCxwPWQtMSxxPTA7bytwPj1xO3ErKyl7dmFyIHI9TWF0aC5tYXgoMCxxLXApLHM9TWF0aC5taW4ocSxvKTtmb3IobD1yO3M+PWw7bCsrKWo9cS1sLGlbbCtqXS55Kz1oW2pdW2xdKmtbal1bbF19cmV0dXJuIGl9LGc9ZnVuY3Rpb24oYSxjLGQsZSl7dmFyIGYsaixtPVtdLG49W10sbz1bXSxwPVtdO3N3aXRjaChoKGEsYykpe2Nhc2UgMDpyZXR1cm4gMDtjYXNlIDE6aWYoZT49YilyZXR1cm4gZFswXT0oYVswXS54K2FbY10ueCkvMiwxO2lmKGkoYSxjKSlyZXR1cm4gZFswXT1rKGEsYyksMX1sKGEsYywuNSxtLG4pLGY9ZyhtLGMsbyxlKzEpLGo9ZyhuLGMscCxlKzEpO2Zvcih2YXIgcT0wO2Y+cTtxKyspZFtxXT1vW3FdO2Zvcih2YXIgcT0wO2o+cTtxKyspZFtxK2ZdPXBbcV07cmV0dXJuIGYran0saD1mdW5jdGlvbihhLGIpe3ZhciBjLGQsZT0wO2M9ZD1NYXRoLnNnbihhWzBdLnkpO2Zvcih2YXIgZj0xO2I+PWY7ZisrKWM9TWF0aC5zZ24oYVtmXS55KSxjIT1kJiZlKyssZD1jO3JldHVybiBlfSxpPWZ1bmN0aW9uKGEsYil7dmFyIGQsZSxmLGcsaCxpLGosayxsLG0sbixvLHAscSxyLHM7aT1hWzBdLnktYVtiXS55LGo9YVtiXS54LWFbMF0ueCxrPWFbMF0ueCphW2JdLnktYVtiXS54KmFbMF0ueTtmb3IodmFyIHQ9bWF4X2Rpc3RhbmNlX2JlbG93PTAsdT0xO2I+dTt1Kyspe3ZhciB2PWkqYVt1XS54K2oqYVt1XS55K2s7dj50P3Q9djptYXhfZGlzdGFuY2VfYmVsb3c+diYmKG1heF9kaXN0YW5jZV9iZWxvdz12KX1yZXR1cm4gbj0wLG89MSxwPTAscT1pLHI9aixzPWstdCxsPW4qci1xKm8sbT0xL2wsZT0obypzLXIqcCkqbSxxPWkscj1qLHM9ay1tYXhfZGlzdGFuY2VfYmVsb3csbD1uKnItcSpvLG09MS9sLGY9KG8qcy1yKnApKm0sZz1NYXRoLm1pbihlLGYpLGg9TWF0aC5tYXgoZSxmKSxkPWgtZyxjPmQ/MTowfSxrPWZ1bmN0aW9uKGEsYil7dmFyIGM9MSxkPTAsZT1hW2JdLngtYVswXS54LGY9YVtiXS55LWFbMF0ueSxnPWFbMF0ueC0wLGg9YVswXS55LTAsaT1lKmQtZipjLGo9MS9pLGs9KGUqaC1mKmcpKmo7cmV0dXJuIDArYyprfSxsPWZ1bmN0aW9uKGEsYixjLGQsZSl7Zm9yKHZhciBmPVtbXV0sZz0wO2I+PWc7ZysrKWZbMF1bZ109YVtnXTtmb3IodmFyIGg9MTtiPj1oO2grKylmb3IodmFyIGc9MDtiLWg+PWc7ZysrKWZbaF18fChmW2hdPVtdKSxmW2hdW2ddfHwoZltoXVtnXT17fSksZltoXVtnXS54PSgxLWMpKmZbaC0xXVtnXS54K2MqZltoLTFdW2crMV0ueCxmW2hdW2ddLnk9KDEtYykqZltoLTFdW2ddLnkrYypmW2gtMV1bZysxXS55O2lmKG51bGwhPWQpZm9yKGc9MDtiPj1nO2crKylkW2ddPWZbZ11bMF07aWYobnVsbCE9ZSlmb3IoZz0wO2I+PWc7ZysrKWVbZ109ZltiLWddW2ddO3JldHVybiBmW2JdWzBdfSxtPXt9LG49ZnVuY3Rpb24oYSl7dmFyIGI9bVthXTtpZighYil7Yj1bXTt2YXIgYz1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gTWF0aC5wb3coYixhKX19LGQ9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIE1hdGgucG93KDEtYixhKX19LGU9ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGF9fSxmPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGEpe3JldHVybiBhfX0sZz1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhKXtyZXR1cm4gMS1hfX0saD1mdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYil7Zm9yKHZhciBjPTEsZD0wO2Q8YS5sZW5ndGg7ZCsrKWMqPWFbZF0oYik7cmV0dXJuIGN9fTtiLnB1c2gobmV3IGMpO2Zvcih2YXIgaT0xO2E+aTtpKyspe2Zvcih2YXIgaj1bbmV3IGUoYSldLGs9MDthLWk+aztrKyspai5wdXNoKG5ldyBmKTtmb3IodmFyIGs9MDtpPms7aysrKWoucHVzaChuZXcgZyk7Yi5wdXNoKG5ldyBoKGopKX1iLnB1c2gobmV3IGQpLG1bYV09Yn1yZXR1cm4gYn0sbz1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1uKGEubGVuZ3RoLTEpLGQ9MCxlPTAsZj0wO2Y8YS5sZW5ndGg7ZisrKWQrPWFbZl0ueCpjW2ZdKGIpLGUrPWFbZl0ueSpjW2ZdKGIpO3JldHVybnt4OmQseTplfX0scD1mdW5jdGlvbihhLGIpe3JldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coYS54LWIueCwyKStNYXRoLnBvdyhhLnktYi55LDIpKX0scT1mdW5jdGlvbihhKXtyZXR1cm4gYVswXS54PT1hWzFdLngmJmFbMF0ueT09YVsxXS55fSxyPWZ1bmN0aW9uKGEsYixjKXtpZihxKGEpKXJldHVybntwb2ludDphWzBdLGxvY2F0aW9uOmJ9O2Zvcih2YXIgZD1vKGEsYiksZT0wLGY9YixnPWM+MD8xOi0xLGg9bnVsbDtlPE1hdGguYWJzKGMpOylmKz0uMDA1KmcsaD1vKGEsZiksZSs9cChoLGQpLGQ9aDtyZXR1cm57cG9pbnQ6aCxsb2NhdGlvbjpmfX0scz1mdW5jdGlvbihhKXtpZihxKGEpKXJldHVybiAwO2Zvcih2YXIgYj1vKGEsMCksYz0wLGQ9MCxlPTEsZj1udWxsOzE+ZDspZCs9LjAwNSplLGY9byhhLGQpLGMrPXAoZixiKSxiPWY7cmV0dXJuIGN9LHQ9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiByKGEsYixjKS5wb2ludH0sdT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIHIoYSxiLGMpLmxvY2F0aW9ufSx2PWZ1bmN0aW9uKGEsYil7dmFyIGM9byhhLGIpLGQ9byhhLnNsaWNlKDAsYS5sZW5ndGgtMSksYiksZT1kLnktYy55LGY9ZC54LWMueDtyZXR1cm4gMD09ZT8xLzA6TWF0aC5hdGFuKGUvZil9LHc9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXIoYSxiLGMpO3JldHVybiBkLmxvY2F0aW9uPjEmJihkLmxvY2F0aW9uPTEpLGQubG9jYXRpb248MCYmKGQubG9jYXRpb249MCksdihhLGQubG9jYXRpb24pfSx4PWZ1bmN0aW9uKGEsYixjLGQpe2Q9bnVsbD09ZD8wOmQ7dmFyIGU9cihhLGIsZCksZj12KGEsZS5sb2NhdGlvbiksZz1NYXRoLmF0YW4oLTEvZiksaD1jLzIqTWF0aC5zaW4oZyksaT1jLzIqTWF0aC5jb3MoZyk7cmV0dXJuW3t4OmUucG9pbnQueCtpLHk6ZS5wb2ludC55K2h9LHt4OmUucG9pbnQueC1pLHk6ZS5wb2ludC55LWh9XX0seT10aGlzLmpzQmV6aWVyPXtkaXN0YW5jZUZyb21DdXJ2ZTpkLGdyYWRpZW50QXRQb2ludDp2LGdyYWRpZW50QXRQb2ludEFsb25nQ3VydmVGcm9tOncsbmVhcmVzdFBvaW50T25DdXJ2ZTplLHBvaW50T25DdXJ2ZTpvLHBvaW50QWxvbmdDdXJ2ZUZyb206dCxwZXJwZW5kaWN1bGFyVG9DdXJ2ZUF0OngsbG9jYXRpb25BbG9uZ0N1cnZlRnJvbTp1LGdldExlbmd0aDpzLHZlcnNpb246XCIwLjkuMFwifTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZXhwb3J0cyYmKGV4cG9ydHMuanNCZXppZXI9eSl9KS5jYWxsKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OnRoaXMpLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGE9dGhpcyxiPWEuQmlsdG9uZz17dmVyc2lvbjpcIjAuNC4wXCJ9O1widW5kZWZpbmVkXCIhPXR5cGVvZiBleHBvcnRzJiYoZXhwb3J0cy5CaWx0b25nPWIpO3ZhciBjPWZ1bmN0aW9uKGEpe3JldHVyblwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhKX0sZD1mdW5jdGlvbihhLGIsZCl7cmV0dXJuIGE9YyhhKT9hOlthLngsYS55XSxiPWMoYik/YjpbYi54LGIueV0sZChhLGIpfSxlPWIuZ3JhZGllbnQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gZChhLGIsZnVuY3Rpb24oYSxiKXtyZXR1cm4gYlswXT09YVswXT9iWzFdPmFbMV0/MS8wOi0xLzA6YlsxXT09YVsxXT9iWzBdPmFbMF0/MDotMDooYlsxXS1hWzFdKS8oYlswXS1hWzBdKX0pfSxmPShiLm5vcm1hbD1mdW5jdGlvbihhLGIpe3JldHVybi0xL2UoYSxiKX0sYi5saW5lTGVuZ3RoPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGQoYSxiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyhiWzFdLWFbMV0sMikrTWF0aC5wb3coYlswXS1hWzBdLDIpKX0pfSxiLnF1YWRyYW50PWZ1bmN0aW9uKGEsYil7cmV0dXJuIGQoYSxiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIGJbMF0+YVswXT9iWzFdPmFbMV0/MjoxOmJbMF09PWFbMF0/YlsxXT5hWzFdPzI6MTpiWzFdPmFbMV0/Mzo0fSl9KSxnPShiLnRoZXRhPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGQoYSxiLGZ1bmN0aW9uKGEsYil7dmFyIGM9ZShhLGIpLGQ9TWF0aC5hdGFuKGMpLGc9ZihhLGIpO3JldHVybig0PT1nfHwzPT1nKSYmKGQrPU1hdGguUEkpLDA+ZCYmKGQrPTIqTWF0aC5QSSksZH0pfSxiLmludGVyc2VjdHM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLngsZD1hLngrYS53LGU9YS55LGY9YS55K2EuaCxnPWIueCxoPWIueCtiLncsaT1iLnksaj1iLnkrYi5oO3JldHVybiBnPj1jJiZkPj1nJiZpPj1lJiZmPj1pfHxoPj1jJiZkPj1oJiZpPj1lJiZmPj1pfHxnPj1jJiZkPj1nJiZqPj1lJiZmPj1qfHxoPj1jJiZkPj1nJiZqPj1lJiZmPj1qfHxjPj1nJiZoPj1jJiZlPj1pJiZqPj1lfHxkPj1nJiZoPj1kJiZlPj1pJiZqPj1lfHxjPj1nJiZoPj1jJiZmPj1pJiZqPj1mfHxkPj1nJiZoPj1jJiZmPj1pJiZqPj1mfSxiLmVuY2xvc2VzPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1hLngsZT1hLngrYS53LGY9YS55LGc9YS55K2EuaCxoPWIueCxpPWIueCtiLncsaj1iLnksaz1iLnkrYi5oLGw9ZnVuY3Rpb24oYSxiLGQsZSl7cmV0dXJuIGM/Yj49YSYmZD49ZTpiPmEmJmQ+ZX07cmV0dXJuIGwoZCxoLGUsaSkmJmwoZixqLGcsayl9LFtudWxsLFsxLC0xXSxbMSwxXSxbLTEsMV0sWy0xLC0xXV0pLGg9W251bGwsWy0xLC0xXSxbLTEsMV0sWzEsMV0sWzEsLTFdXTtiLnBvaW50T25MaW5lPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1lKGEsYiksaT1mKGEsYiksaj1jPjA/Z1tpXTpoW2ldLGs9TWF0aC5hdGFuKGQpLGw9TWF0aC5hYnMoYypNYXRoLnNpbihrKSkqalsxXSxtPU1hdGguYWJzKGMqTWF0aC5jb3MoaykpKmpbMF07cmV0dXJue3g6YS54K20seTphLnkrbH19LGIucGVycGVuZGljdWxhckxpbmVUbz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZShhLGIpLGY9TWF0aC5hdGFuKC0xL2QpLGc9Yy8yKk1hdGguc2luKGYpLGg9Yy8yKk1hdGguY29zKGYpO3JldHVyblt7eDpiLngraCx5OmIueStnfSx7eDpiLngtaCx5OmIueS1nfV19fS5jYWxsKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OnRoaXMpLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGE9dGhpcyxiPXthbmRyb2lkOm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiYW5kcm9pZFwiKT4tMX0sYz1mdW5jdGlvbihhLGIsYyl7Yz1jfHxhLnBhcmVudE5vZGU7Zm9yKHZhciBkPWMucXVlcnlTZWxlY3RvckFsbChiKSxlPTA7ZTxkLmxlbmd0aDtlKyspaWYoZFtlXT09PWEpcmV0dXJuITA7cmV0dXJuITF9LGQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGF8fGEuY29uc3RydWN0b3I9PT1TdHJpbmc/ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYSk6YX0sZT1mdW5jdGlvbihhKXtyZXR1cm4gYS5zcmNFbGVtZW50fHxhLnRhcmdldH0sZj1mdW5jdGlvbihhLGIsYyxkKXtpZihkKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5wYXRoJiZhLnBhdGguaW5kZXhPZilyZXR1cm57cGF0aDphLnBhdGgsZW5kOmEucGF0aC5pbmRleE9mKGMpfTt2YXIgZT17cGF0aDpbXSxlbmQ6LTF9LGY9ZnVuY3Rpb24oYSl7ZS5wYXRoLnB1c2goYSksYT09PWM/ZS5lbmQ9ZS5wYXRoLmxlbmd0aC0xOm51bGwhPWEucGFyZW50Tm9kZSYmZihhLnBhcmVudE5vZGUpfTtyZXR1cm4gZihiKSxlfXJldHVybntwYXRoOltiXSxlbmQ6MX19LGc9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9MCxkPWEubGVuZ3RoO2Q+YyYmYVtjXSE9YjtjKyspO2M8YS5sZW5ndGgmJmEuc3BsaWNlKGMsMSl9LGg9MSxpPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1oKys7cmV0dXJuIGEuX190YT1hLl9fdGF8fHt9LGEuX190YVtiXT1hLl9fdGFbYl18fHt9LGEuX190YVtiXVtkXT1jLGMuX190YXVpZD1kLGR9LGo9ZnVuY3Rpb24oYSxiLGMpe2lmKGEuX190YSYmYS5fX3RhW2JdJiZkZWxldGUgYS5fX3RhW2JdW2MuX190YXVpZF0sYy5fX3RhRXh0cmEpe2Zvcih2YXIgZD0wO2Q8Yy5fX3RhRXh0cmEubGVuZ3RoO2QrKylGKGEsYy5fX3RhRXh0cmFbZF1bMF0sYy5fX3RhRXh0cmFbZF1bMV0pO2MuX190YUV4dHJhLmxlbmd0aD0wfWMuX190YVVuc3RvcmUmJmMuX190YVVuc3RvcmUoKX0saz1mdW5jdGlvbihhLGIsZCxnKXtpZihudWxsPT1hKXJldHVybiBkO3ZhciBoPWEuc3BsaXQoXCIsXCIpLGk9ZnVuY3Rpb24oZyl7aS5fX3RhdWlkPWQuX190YXVpZDt2YXIgaj1lKGcpLGs9aixsPWYoZyxqLGIsbnVsbCE9YSk7aWYoLTEhPWwuZW5kKWZvcih2YXIgbT0wO208bC5lbmQ7bSsrKXtrPWwucGF0aFttXTtmb3IodmFyIG49MDtuPGgubGVuZ3RoO24rKyljKGssaFtuXSxiKSYmZC5hcHBseShrLGFyZ3VtZW50cyl9fTtyZXR1cm4gbChkLGcsaSksaX0sbD1mdW5jdGlvbihhLGIsYyl7YS5fX3RhRXh0cmE9YS5fX3RhRXh0cmF8fFtdLGEuX190YUV4dHJhLnB1c2goW2IsY10pfSxtPWZ1bmN0aW9uKGEsYixjLGQpe2lmKHMmJnVbYl0pe3ZhciBlPWsoZCxhLGMsdVtiXSk7RShhLHVbYl0sZSxjKX1cImZvY3VzXCI9PT1iJiZudWxsPT1hLmdldEF0dHJpYnV0ZShcInRhYmluZGV4XCIpJiZhLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsXCIxXCIpLEUoYSxiLGsoZCxhLGMsYiksYyl9LG49ZnVuY3Rpb24oYSxiLGMsZCl7aWYobnVsbD09YS5fX3RhU21hcnRDbGlja3Mpe3ZhciBmPWZ1bmN0aW9uKGIpe2EuX190YWQ9eShiKX0saD1mdW5jdGlvbihiKXthLl9fdGF1PXkoYil9LGk9ZnVuY3Rpb24oYil7aWYoYS5fX3RhZCYmYS5fX3RhdSYmYS5fX3RhZFswXT09PWEuX190YXVbMF0mJmEuX190YWRbMV09PT1hLl9fdGF1WzFdKWZvcih2YXIgYz0wO2M8YS5fX3RhU21hcnRDbGlja3MubGVuZ3RoO2MrKylhLl9fdGFTbWFydENsaWNrc1tjXS5hcHBseShlKGIpLFtiXSl9O20oYSxcIm1vdXNlZG93blwiLGYsZCksbShhLFwibW91c2V1cFwiLGgsZCksbShhLFwiY2xpY2tcIixpLGQpLGEuX190YVNtYXJ0Q2xpY2tzPVtdfWEuX190YVNtYXJ0Q2xpY2tzLnB1c2goYyksYy5fX3RhVW5zdG9yZT1mdW5jdGlvbigpe2coYS5fX3RhU21hcnRDbGlja3MsYyl9fSxvPXt0YXA6e3RvdWNoZXM6MSx0YXBzOjF9LGRibHRhcDp7dG91Y2hlczoxLHRhcHM6Mn0sY29udGV4dG1lbnU6e3RvdWNoZXM6Mix0YXBzOjF9fSxwPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGZ1bmN0aW9uKGQsaCxpLGope2lmKFwiY29udGV4dG1lbnVcIj09aCYmdCltKGQsaCxpLGopO2Vsc2V7aWYobnVsbD09ZC5fX3RhVGFwSGFuZGxlcil7dmFyIGs9ZC5fX3RhVGFwSGFuZGxlcj17dGFwOltdLGRibHRhcDpbXSxjb250ZXh0bWVudTpbXSxkb3duOiExLHRhcHM6MCxkb3duU2VsZWN0b3JzOltdfSxsPWZ1bmN0aW9uKGcpe2Zvcih2YXIgaD1lKGcpLGk9ZihnLGgsZCxudWxsIT1qKSxsPSExLG09MDttPGkuZW5kO20rKyl7aWYobClyZXR1cm47aD1pLnBhdGhbbV07Zm9yKHZhciBuPTA7bjxrLmRvd25TZWxlY3RvcnMubGVuZ3RoO24rKylpZihudWxsPT1rLmRvd25TZWxlY3RvcnNbbl18fGMoaCxrLmRvd25TZWxlY3RvcnNbbl0sZCkpe2suZG93bj0hMCxzZXRUaW1lb3V0KHAsYSksc2V0VGltZW91dChxLGIpLGw9ITA7YnJlYWt9fX0sbj1mdW5jdGlvbihhKXtpZihrLmRvd24pe3ZhciBiLGcsaD1lKGEpO2sudGFwcysrO3ZhciBpPUQoYSk7Zm9yKHZhciBqIGluIG8paWYoby5oYXNPd25Qcm9wZXJ0eShqKSl7dmFyIGw9b1tqXTtpZihsLnRvdWNoZXM9PT1pJiYoMT09PWwudGFwc3x8bC50YXBzPT09ay50YXBzKSlmb3IodmFyIG09MDttPGtbal0ubGVuZ3RoO20rKyl7Zz1mKGEsaCxkLG51bGwhPWtbal1bbV1bMV0pO2Zvcih2YXIgbj0wO248Zy5lbmQ7bisrKWlmKGI9Zy5wYXRoW25dLG51bGw9PWtbal1bbV1bMV18fGMoYixrW2pdW21dWzFdLGQpKXtrW2pdW21dWzBdLmFwcGx5KGIsW2FdKTticmVha319fX19LHA9ZnVuY3Rpb24oKXtrLmRvd249ITF9LHE9ZnVuY3Rpb24oKXtrLnRhcHM9MH07bShkLFwibW91c2Vkb3duXCIsbCksbShkLFwibW91c2V1cFwiLG4pfWQuX190YVRhcEhhbmRsZXIuZG93blNlbGVjdG9ycy5wdXNoKGopLGQuX190YVRhcEhhbmRsZXJbaF0ucHVzaChbaSxqXSksaS5fX3RhVW5zdG9yZT1mdW5jdGlvbigpe2coZC5fX3RhVGFwSGFuZGxlcltoXSxpKX19fX0scT1mdW5jdGlvbihhLGIsYyxkKXtmb3IodmFyIGUgaW4gYy5fX3RhbWVlW2FdKWMuX190YW1lZVthXS5oYXNPd25Qcm9wZXJ0eShlKSYmYy5fX3RhbWVlW2FdW2VdLmFwcGx5KGQsW2JdKX0scj1mdW5jdGlvbigpe3ZhciBhPVtdO3JldHVybiBmdW5jdGlvbihiLGQsZixnKXtpZighYi5fX3RhbWVlKXtiLl9fdGFtZWU9e292ZXI6ITEsbW91c2VlbnRlcjpbXSxtb3VzZWV4aXQ6W119O3ZhciBoPWZ1bmN0aW9uKGQpe3ZhciBmPWUoZCk7KG51bGw9PWcmJmY9PWImJiFiLl9fdGFtZWUub3Zlcnx8YyhmLGcsYikmJihudWxsPT1mLl9fdGFtZWV8fCFmLl9fdGFtZWUub3ZlcikpJiYocShcIm1vdXNlZW50ZXJcIixkLGIsZiksZi5fX3RhbWVlPWYuX190YW1lZXx8e30sZi5fX3RhbWVlLm92ZXI9ITAsYS5wdXNoKGYpKX0saj1mdW5jdGlvbihkKXtmb3IodmFyIGY9ZShkKSxnPTA7ZzxhLmxlbmd0aDtnKyspZiE9YVtnXXx8YyhkLnJlbGF0ZWRUYXJnZXR8fGQudG9FbGVtZW50LFwiKlwiLGYpfHwoZi5fX3RhbWVlLm92ZXI9ITEsYS5zcGxpY2UoZywxKSxxKFwibW91c2VleGl0XCIsZCxiLGYpKX07RShiLFwibW91c2VvdmVyXCIsayhnLGIsaCxcIm1vdXNlb3ZlclwiKSxoKSxFKGIsXCJtb3VzZW91dFwiLGsoZyxiLGosXCJtb3VzZW91dFwiKSxqKX1mLl9fdGFVbnN0b3JlPWZ1bmN0aW9uKCl7ZGVsZXRlIGIuX190YW1lZVtkXVtmLl9fdGF1aWRdfSxpKGIsZCxmKSxiLl9fdGFtZWVbZF1bZi5fX3RhdWlkXT1mfX0scz1cIm9udG91Y2hzdGFydFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHQ9XCJvbm1vdXNlZG93blwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHU9e21vdXNlZG93bjpcInRvdWNoc3RhcnRcIixtb3VzZXVwOlwidG91Y2hlbmRcIixtb3VzZW1vdmU6XCJ0b3VjaG1vdmVcIn0sdj1mdW5jdGlvbigpe3ZhciBhPS0xO2lmKFwiTWljcm9zb2Z0IEludGVybmV0IEV4cGxvcmVyXCI9PW5hdmlnYXRvci5hcHBOYW1lKXt2YXIgYj1uYXZpZ2F0b3IudXNlckFnZW50LGM9bmV3IFJlZ0V4cChcIk1TSUUgKFswLTldezEsfVsuMC05XXswLH0pXCIpO251bGwhPWMuZXhlYyhiKSYmKGE9cGFyc2VGbG9hdChSZWdFeHAuJDEpKX1yZXR1cm4gYX0oKSx3PXY+LTEmJjk+dix4PWZ1bmN0aW9uKGEsYil7aWYobnVsbD09YSlyZXR1cm5bMCwwXTt2YXIgYz1DKGEpLGQ9QihjLDApO3JldHVybltkW2IrXCJYXCJdLGRbYitcIllcIl1dfSx5PWZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hP1swLDBdOnc/W2EuY2xpZW50WCtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCxhLmNsaWVudFkrZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcF06eChhLFwicGFnZVwiKX0sej1mdW5jdGlvbihhKXtyZXR1cm4geChhLFwic2NyZWVuXCIpfSxBPWZ1bmN0aW9uKGEpe3JldHVybiB4KGEsXCJjbGllbnRcIil9LEI9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5pdGVtP2EuaXRlbShiKTphW2JdfSxDPWZ1bmN0aW9uKGEpe3JldHVybiBhLnRvdWNoZXMmJmEudG91Y2hlcy5sZW5ndGg+MD9hLnRvdWNoZXM6YS5jaGFuZ2VkVG91Y2hlcyYmYS5jaGFuZ2VkVG91Y2hlcy5sZW5ndGg+MD9hLmNoYW5nZWRUb3VjaGVzOmEudGFyZ2V0VG91Y2hlcyYmYS50YXJnZXRUb3VjaGVzLmxlbmd0aD4wP2EudGFyZ2V0VG91Y2hlczpbYV19LEQ9ZnVuY3Rpb24oYSl7cmV0dXJuIEMoYSkubGVuZ3RofSxFPWZ1bmN0aW9uKGEsYixjLGQpe2lmKGkoYSxiLGMpLGQuX190YXVpZD1jLl9fdGF1aWQsYS5hZGRFdmVudExpc3RlbmVyKWEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpO2Vsc2UgaWYoYS5hdHRhY2hFdmVudCl7dmFyIGU9YitjLl9fdGF1aWQ7YVtcImVcIitlXT1jLGFbZV09ZnVuY3Rpb24oKXthW1wiZVwiK2VdJiZhW1wiZVwiK2VdKHdpbmRvdy5ldmVudCl9LGEuYXR0YWNoRXZlbnQoXCJvblwiK2IsYVtlXSl9fSxGPWZ1bmN0aW9uKGEsYixjKXtudWxsIT1jJiZHKGEsZnVuY3Rpb24oKXt2YXIgZT1kKHRoaXMpO2lmKGooZSxiLGMpLG51bGwhPWMuX190YXVpZClpZihlLnJlbW92ZUV2ZW50TGlzdGVuZXIpZS5yZW1vdmVFdmVudExpc3RlbmVyKGIsYywhMSkscyYmdVtiXSYmZS5yZW1vdmVFdmVudExpc3RlbmVyKHVbYl0sYywhMSk7ZWxzZSBpZih0aGlzLmRldGFjaEV2ZW50KXt2YXIgZj1iK2MuX190YXVpZDtlW2ZdJiZlLmRldGFjaEV2ZW50KFwib25cIitiLGVbZl0pLGVbZl09bnVsbCxlW1wiZVwiK2ZdPW51bGx9Yy5fX3RhVG91Y2hQcm94eSYmRihhLGMuX190YVRvdWNoUHJveHlbMV0sYy5fX3RhVG91Y2hQcm94eVswXSl9KX0sRz1mdW5jdGlvbihhLGIpe2lmKG51bGwhPWEpe2E9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFdpbmRvdyYmXCJ1bmtub3duXCIhPXR5cGVvZiBhLnRvcCYmYT09YS50b3A/W2FdOlwic3RyaW5nXCIhPXR5cGVvZiBhJiZudWxsPT1hLnRhZ05hbWUmJm51bGwhPWEubGVuZ3RoP2E6XCJzdHJpbmdcIj09dHlwZW9mIGE/ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChhKTpbYV07Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspYi5hcHBseShhW2NdKX19O2EuTW90dGxlPWZ1bmN0aW9uKGEpe2E9YXx8e307dmFyIGM9YS5jbGlja1RocmVzaG9sZHx8MjUwLGU9YS5kYmxDbGlja1RocmVzaG9sZHx8NDUwLGY9bmV3IHIsZz1uZXcgcChjLGUpLGg9YS5zbWFydENsaWNrcyxpPWZ1bmN0aW9uKGEsYixjLGUpe251bGwhPWMmJkcoYSxmdW5jdGlvbigpe3ZhciBhPWQodGhpcyk7aCYmXCJjbGlja1wiPT09Yj9uKGEsYixjLGUpOlwidGFwXCI9PT1ifHxcImRibHRhcFwiPT09Ynx8XCJjb250ZXh0bWVudVwiPT09Yj9nKGEsYixjLGUpOlwibW91c2VlbnRlclwiPT09Ynx8XCJtb3VzZWV4aXRcIj09Yj9mKGEsYixjLGUpOm0oYSxiLGMsZSl9KX07dGhpcy5yZW1vdmU9ZnVuY3Rpb24oYSl7cmV0dXJuIEcoYSxmdW5jdGlvbigpe3ZhciBhPWQodGhpcyk7aWYoYS5fX3RhKWZvcih2YXIgYiBpbiBhLl9fdGEpaWYoYS5fX3RhLmhhc093blByb3BlcnR5KGIpKWZvcih2YXIgYyBpbiBhLl9fdGFbYl0pYS5fX3RhW2JdLmhhc093blByb3BlcnR5KGMpJiZGKGEsYixhLl9fdGFbYl1bY10pO2EucGFyZW50Tm9kZSYmYS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGEpfSksdGhpc30sdGhpcy5vbj1mdW5jdGlvbigpe3ZhciBhPWFyZ3VtZW50c1swXSxiPTQ9PWFyZ3VtZW50cy5sZW5ndGg/YXJndW1lbnRzWzJdOm51bGwsYz1hcmd1bWVudHNbMV0sZD1hcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0xXTtyZXR1cm4gaShhLGMsZCxiKSx0aGlzfSx0aGlzLm9mZj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIEYoYSxiLGMpLHRoaXN9LHRoaXMudHJpZ2dlcj1mdW5jdGlvbihhLGMsZSxmKXt2YXIgZz10JiYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIE1vdXNlRXZlbnR8fG51bGw9PWV8fGUuY29uc3RydWN0b3I9PT1Nb3VzZUV2ZW50KSxoPXMmJiF0JiZ1W2NdP3VbY106YyxpPSEocyYmIXQmJnVbY10pLGo9eShlKSxrPXooZSksbD1BKGUpO3JldHVybiBHKGEsZnVuY3Rpb24oKXt2YXIgYSxtPWQodGhpcyk7ZT1lfHx7c2NyZWVuWDprWzBdLHNjcmVlblk6a1sxXSxjbGllbnRYOmxbMF0sY2xpZW50WTpsWzFdfTt2YXIgbj1mdW5jdGlvbihhKXtmJiYoYS5wYXlsb2FkPWYpfSxvPXtUb3VjaEV2ZW50OmZ1bmN0aW9uKGEpe3ZhciBiPWRvY3VtZW50LmNyZWF0ZVRvdWNoKHdpbmRvdyxtLDAsalswXSxqWzFdLGtbMF0sa1sxXSxsWzBdLGxbMV0sMCwwLDAsMCksYz1kb2N1bWVudC5jcmVhdGVUb3VjaExpc3QoYiksZD1kb2N1bWVudC5jcmVhdGVUb3VjaExpc3QoYiksZT1kb2N1bWVudC5jcmVhdGVUb3VjaExpc3QoYik7YS5pbml0VG91Y2hFdmVudChoLCEwLCEwLHdpbmRvdyxudWxsLGtbMF0sa1sxXSxsWzBdLGxbMV0sITEsITEsITEsITEsYyxkLGUsMSwwKX0sTW91c2VFdmVudHM6ZnVuY3Rpb24oYSl7aWYoYS5pbml0TW91c2VFdmVudChoLCEwLCEwLHdpbmRvdywwLGtbMF0sa1sxXSxsWzBdLGxbMV0sITEsITEsITEsITEsMSxtKSxiLmFuZHJvaWQpe3ZhciBjPWRvY3VtZW50LmNyZWF0ZVRvdWNoKHdpbmRvdyxtLDAsalswXSxqWzFdLGtbMF0sa1sxXSxsWzBdLGxbMV0sMCwwLDAsMCk7YS50b3VjaGVzPWEudGFyZ2V0VG91Y2hlcz1hLmNoYW5nZWRUb3VjaGVzPWRvY3VtZW50LmNyZWF0ZVRvdWNoTGlzdChjKX19fTtpZihkb2N1bWVudC5jcmVhdGVFdmVudCl7dmFyIHA9IWkmJiFnJiZzJiZ1W2NdJiYhYi5hbmRyb2lkLHE9cD9cIlRvdWNoRXZlbnRcIjpcIk1vdXNlRXZlbnRzXCI7YT1kb2N1bWVudC5jcmVhdGVFdmVudChxKSxvW3FdKGEpLG4oYSksbS5kaXNwYXRjaEV2ZW50KGEpfWVsc2UgZG9jdW1lbnQuY3JlYXRlRXZlbnRPYmplY3QmJihhPWRvY3VtZW50LmNyZWF0ZUV2ZW50T2JqZWN0KCksYS5ldmVudFR5cGU9YS5ldmVudE5hbWU9aCxhLnNjcmVlblg9a1swXSxhLnNjcmVlblk9a1sxXSxhLmNsaWVudFg9bFswXSxhLmNsaWVudFk9bFsxXSxuKGEpLG0uZmlyZUV2ZW50KFwib25cIitoLGEpKX0pLHRoaXN9fSxhLk1vdHRsZS5jb25zdW1lPWZ1bmN0aW9uKGEsYil7YS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTphLnJldHVyblZhbHVlPSExLCFiJiZhLnByZXZlbnREZWZhdWx0JiZhLnByZXZlbnREZWZhdWx0KCl9LGEuTW90dGxlLnBhZ2VMb2NhdGlvbj15LGEuTW90dGxlLnNldEZvcmNlVG91Y2hFdmVudHM9ZnVuY3Rpb24oYSl7cz1hfSxhLk1vdHRsZS5zZXRGb3JjZU1vdXNlRXZlbnRzPWZ1bmN0aW9uKGEpe3Q9YX0sYS5Nb3R0bGUudmVyc2lvbj1cIjAuOC4wXCIsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGV4cG9ydHMmJihleHBvcnRzLk1vdHRsZT1hLk1vdHRsZSl9LmNhbGwoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHdpbmRvdz90aGlzOndpbmRvdyksZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgYT10aGlzLGI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybi0xPT09YS5pbmRleE9mKGIpPyhjP2EudW5zaGlmdChiKTphLnB1c2goYiksITApOiExfSxjPWZ1bmN0aW9uKGEsYil7dmFyIGM9YS5pbmRleE9mKGIpOy0xIT1jJiZhLnNwbGljZShjLDEpfSxkPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPVtdLGQ9MDtkPGEubGVuZ3RoO2QrKyktMT09Yi5pbmRleE9mKGFbZF0pJiZjLnB1c2goYVtkXSk7cmV0dXJuIGN9LGU9ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/ITE6XCJzdHJpbmdcIj09dHlwZW9mIGF8fGEuY29uc3RydWN0b3I9PVN0cmluZ30sZj1mdW5jdGlvbihhKXt2YXIgYj1hLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGM9ZG9jdW1lbnQuYm9keSxkPWRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxlPXdpbmRvdy5wYWdlWU9mZnNldHx8ZC5zY3JvbGxUb3B8fGMuc2Nyb2xsVG9wLGY9d2luZG93LnBhZ2VYT2Zmc2V0fHxkLnNjcm9sbExlZnR8fGMuc2Nyb2xsTGVmdCxnPWQuY2xpZW50VG9wfHxjLmNsaWVudFRvcHx8MCxoPWQuY2xpZW50TGVmdHx8Yy5jbGllbnRMZWZ0fHwwLGk9Yi50b3ArZS1nLGo9Yi5sZWZ0K2YtaDtyZXR1cm57dG9wOk1hdGgucm91bmQoaSksbGVmdDpNYXRoLnJvdW5kKGopfX0sZz1mdW5jdGlvbihhLGIsYyl7Yz1jfHxhLnBhcmVudE5vZGU7Zm9yKHZhciBkPWMucXVlcnlTZWxlY3RvckFsbChiKSxlPTA7ZTxkLmxlbmd0aDtlKyspaWYoZFtlXT09PWEpcmV0dXJuITA7cmV0dXJuITF9LGg9ZnVuY3Rpb24oKXt2YXIgYT0tMTtpZihcIk1pY3Jvc29mdCBJbnRlcm5ldCBFeHBsb3JlclwiPT1uYXZpZ2F0b3IuYXBwTmFtZSl7dmFyIGI9bmF2aWdhdG9yLnVzZXJBZ2VudCxjPW5ldyBSZWdFeHAoXCJNU0lFIChbMC05XXsxLH1bLjAtOV17MCx9KVwiKTtudWxsIT1jLmV4ZWMoYikmJihhPXBhcnNlRmxvYXQoUmVnRXhwLiQxKSl9cmV0dXJuIGF9KCksaT01MCxqPTUwLGs9aD4tMSYmOT5oLGw9OT09aCxtPWZ1bmN0aW9uKGEpe2lmKGspcmV0dXJuW2EuY2xpZW50WCtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCxhLmNsaWVudFkrZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcF07dmFyIGI9byhhKSxjPW4oYiwwKTtyZXR1cm4gbD9bYy5wYWdlWHx8Yy5jbGllbnRYLGMucGFnZVl8fGMuY2xpZW50WV06W2MucGFnZVgsYy5wYWdlWV19LG49ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5pdGVtP2EuaXRlbShiKTphW2JdfSxvPWZ1bmN0aW9uKGEpe3JldHVybiBhLnRvdWNoZXMmJmEudG91Y2hlcy5sZW5ndGg+MD9hLnRvdWNoZXM6YS5jaGFuZ2VkVG91Y2hlcyYmYS5jaGFuZ2VkVG91Y2hlcy5sZW5ndGg+MD9hLmNoYW5nZWRUb3VjaGVzOmEudGFyZ2V0VG91Y2hlcyYmYS50YXJnZXRUb3VjaGVzLmxlbmd0aD4wP2EudGFyZ2V0VG91Y2hlczpbYV19LHA9e2RyYWdnYWJsZTpcImthdGF2b3Jpby1kcmFnZ2FibGVcIixkcm9wcGFibGU6XCJrYXRhdm9yaW8tZHJvcHBhYmxlXCIsZHJhZzpcImthdGF2b3Jpby1kcmFnXCIsc2VsZWN0ZWQ6XCJrYXRhdm9yaW8tZHJhZy1zZWxlY3RlZFwiLGFjdGl2ZTpcImthdGF2b3Jpby1kcmFnLWFjdGl2ZVwiLGhvdmVyOlwia2F0YXZvcmlvLWRyYWctaG92ZXJcIixub1NlbGVjdDpcImthdGF2b3Jpby1kcmFnLW5vLXNlbGVjdFwiLGdob3N0UHJveHk6XCJrYXRhdm9yaW8tZ2hvc3QtcHJveHlcIn0scT1cImthdGF2b3Jpby1kcmFnLXNjb3BlXCIscj1bXCJzdG9wXCIsXCJzdGFydFwiLFwiZHJhZ1wiLFwiZHJvcFwiLFwib3ZlclwiLFwib3V0XCIsXCJiZWZvcmVTdGFydFwiXSxzPWZ1bmN0aW9uKCl7fSx0PWZ1bmN0aW9uKCl7cmV0dXJuITB9LHU9ZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZD0wO2Q8YS5sZW5ndGg7ZCsrKWFbZF0hPWMmJmIoYVtkXSl9LHY9ZnVuY3Rpb24oYSxiLGMsZCl7dShhLGZ1bmN0aW9uKGEpe2Euc2V0QWN0aXZlKGIpLGImJmEudXBkYXRlUG9zaXRpb24oKSxjJiZhLnNldEhvdmVyKGQsYil9KX0sdz1mdW5jdGlvbihhLGIpe2lmKG51bGwhPWEpe2E9ZShhKXx8bnVsbCE9YS50YWdOYW1lfHxudWxsPT1hLmxlbmd0aD9bYV06YTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyliLmFwcGx5KGFbY10sW2FbY11dKX19LHg9ZnVuY3Rpb24oYSl7YS5zdG9wUHJvcGFnYXRpb24/KGEuc3RvcFByb3BhZ2F0aW9uKCksYS5wcmV2ZW50RGVmYXVsdCgpKTphLnJldHVyblZhbHVlPSExfSx5PVwiaW5wdXQsdGV4dGFyZWEsc2VsZWN0LGJ1dHRvbixvcHRpb25cIix6PWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1hLnNyY0VsZW1lbnR8fGEudGFyZ2V0O3JldHVybiFnKGQsYy5nZXRJbnB1dEZpbHRlclNlbGVjdG9yKCksYil9LEE9ZnVuY3Rpb24oYSxiLGMsZCl7dGhpcy5wYXJhbXM9Ynx8e30sdGhpcy5lbD1hLHRoaXMucGFyYW1zLmFkZENsYXNzKHRoaXMuZWwsdGhpcy5fY2xhc3MpLHRoaXMudXVpZD1GKCk7dmFyIGU9ITA7cmV0dXJuIHRoaXMuc2V0RW5hYmxlZD1mdW5jdGlvbihhKXtlPWF9LHRoaXMuaXNFbmFibGVkPWZ1bmN0aW9uKCl7cmV0dXJuIGV9LHRoaXMudG9nZ2xlRW5hYmxlZD1mdW5jdGlvbigpe2U9IWV9LHRoaXMuc2V0U2NvcGU9ZnVuY3Rpb24oYSl7dGhpcy5zY29wZXM9YT9hLnNwbGl0KC9cXHMrLyk6W2RdfSx0aGlzLmFkZFNjb3BlPWZ1bmN0aW9uKGEpe3ZhciBiPXt9O3codGhpcy5zY29wZXMsZnVuY3Rpb24oYSl7YlthXT0hMH0pLHcoYT9hLnNwbGl0KC9cXHMrLyk6W10sZnVuY3Rpb24oYSl7YlthXT0hMH0pLHRoaXMuc2NvcGVzPVtdO2Zvcih2YXIgYyBpbiBiKXRoaXMuc2NvcGVzLnB1c2goYyl9LHRoaXMucmVtb3ZlU2NvcGU9ZnVuY3Rpb24oYSl7dmFyIGI9e307dyh0aGlzLnNjb3BlcyxmdW5jdGlvbihhKXtiW2FdPSEwfSksdyhhP2Euc3BsaXQoL1xccysvKTpbXSxmdW5jdGlvbihhKXtkZWxldGUgYlthXX0pLHRoaXMuc2NvcGVzPVtdO2Zvcih2YXIgYyBpbiBiKXRoaXMuc2NvcGVzLnB1c2goYyl9LHRoaXMudG9nZ2xlU2NvcGU9ZnVuY3Rpb24oYSl7dmFyIGI9e307dyh0aGlzLnNjb3BlcyxmdW5jdGlvbihhKXtiW2FdPSEwfSksdyhhP2Euc3BsaXQoL1xccysvKTpbXSxmdW5jdGlvbihhKXtiW2FdP2RlbGV0ZSBiW2FdOmJbYV09ITB9KSx0aGlzLnNjb3Blcz1bXTtmb3IodmFyIGMgaW4gYil0aGlzLnNjb3Blcy5wdXNoKGMpfSx0aGlzLnNldFNjb3BlKGIuc2NvcGUpLHRoaXMuaz1iLmthdGF2b3JpbyxiLmthdGF2b3Jpb30sQj1mdW5jdGlvbigpe3JldHVybiEwfSxDPWZ1bmN0aW9uKCl7cmV0dXJuITF9LEQ9ZnVuY3Rpb24oYSxiLGMpe3RoaXMuX2NsYXNzPWMuZHJhZ2dhYmxlO3ZhciBkPUEuYXBwbHkodGhpcyxhcmd1bWVudHMpO3RoaXMucmlnaHRCdXR0b25DYW5EcmFnPXRoaXMucGFyYW1zLnJpZ2h0QnV0dG9uQ2FuRHJhZzt2YXIgaD1bMCwwXSxrPW51bGwsbD1udWxsLG49WzAsMF0sbz0hMSxxPXRoaXMucGFyYW1zLmNvbnN1bWVTdGFydEV2ZW50IT09ITEscj10aGlzLmVsLHM9dGhpcy5wYXJhbXMuY2xvbmUsdT0odGhpcy5wYXJhbXMuc2Nyb2xsLGIubXVsdGlwbGVEcm9wIT09ITEpLHc9ITEseT1iLmdob3N0UHJveHk9PT0hMD9COmIuZ2hvc3RQcm94eSYmXCJmdW5jdGlvblwiPT10eXBlb2YgYi5naG9zdFByb3h5P2IuZ2hvc3RQcm94eTpDLEQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGEuY2xvbmVOb2RlKCEwKX0sRT1iLnNuYXBUaHJlc2hvbGR8fDUsSD1mdW5jdGlvbihhLGIsYyxkLGUpe2Q9ZHx8RSxlPWV8fEU7dmFyIGY9TWF0aC5mbG9vcihhWzBdL2IpLGc9YipmLGg9ZytiLGk9TWF0aC5hYnMoYVswXS1nKTw9ZD9nOk1hdGguYWJzKGgtYVswXSk8PWQ/aDphWzBdLGo9TWF0aC5mbG9vcihhWzFdL2MpLGs9YypqLGw9aytjLG09TWF0aC5hYnMoYVsxXS1rKTw9ZT9rOk1hdGguYWJzKGwtYVsxXSk8PWU/bDphWzFdO3JldHVybltpLG1dfTt0aGlzLnBvc3Nlcz1bXSx0aGlzLnBvc3NlUm9sZXM9e30sdGhpcy50b0dyaWQ9ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PXRoaXMucGFyYW1zLmdyaWQ/YTpIKGEsdGhpcy5wYXJhbXMuZ3JpZFswXSx0aGlzLnBhcmFtcy5ncmlkWzFdKX0sdGhpcy5zbmFwPWZ1bmN0aW9uKGEsYil7aWYobnVsbCE9cil7YT1hfHwodGhpcy5wYXJhbXMuZ3JpZD90aGlzLnBhcmFtcy5ncmlkWzBdOmkpLGI9Ynx8KHRoaXMucGFyYW1zLmdyaWQ/dGhpcy5wYXJhbXMuZ3JpZFsxXTpqKTt2YXIgYz10aGlzLnBhcmFtcy5nZXRQb3NpdGlvbihyKTt0aGlzLnBhcmFtcy5zZXRQb3NpdGlvbihyLEgoYyxhLGIsYSxiKSl9fSx0aGlzLnNldFVzZUdob3N0UHJveHk9ZnVuY3Rpb24oYSl7eT1hP0I6Q307dmFyIEksSj1mdW5jdGlvbihhKXtyZXR1cm4gYi5hbGxvd05lZ2F0aXZlPT09ITE/W01hdGgubWF4KDAsYVswXSksTWF0aC5tYXgoMCxhWzFdKV06YX0sSz1mdW5jdGlvbihhKXtJPVwiZnVuY3Rpb25cIj09dHlwZW9mIGE/YTphP2Z1bmN0aW9uKGEpe3JldHVybiBKKFtNYXRoLm1heCgwLE1hdGgubWluKFEudy10aGlzLnNpemVbMF0sYVswXSkpLE1hdGgubWF4KDAsTWF0aC5taW4oUS5oLXRoaXMuc2l6ZVsxXSxhWzFdKSldKX0uYmluZCh0aGlzKTpmdW5jdGlvbihhKXtyZXR1cm4gSihhKX19LmJpbmQodGhpcyk7SyhcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLnBhcmFtcy5jb25zdHJhaW4/dGhpcy5wYXJhbXMuY29uc3RyYWluOnRoaXMucGFyYW1zLmNvbnN0cmFpbnx8dGhpcy5wYXJhbXMuY29udGFpbm1lbnQpLHRoaXMuc2V0Q29uc3RyYWluPWZ1bmN0aW9uKGEpe0soYSl9O3ZhciBMO3RoaXMuc2V0UmV2ZXJ0PWZ1bmN0aW9uKGEpe0w9YX07dmFyIE09ZnVuY3Rpb24oYSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgYT8oYS5fa2F0YXZvcmlvSWQ9RigpLGEuX2thdGF2b3Jpb0lkKTphfSxOPXt9LE89ZnVuY3Rpb24oYSl7Zm9yKHZhciBiIGluIE4pe3ZhciBjPU5bYl0sZD1jWzBdKGEpO2lmKGNbMV0mJihkPSFkKSwhZClyZXR1cm4hMX1yZXR1cm4hMH0sUD10aGlzLnNldEZpbHRlcj1mdW5jdGlvbihiLGMpe2lmKGIpe3ZhciBkPU0oYik7TltkXT1bZnVuY3Rpb24oYyl7dmFyIGQsZj1jLnNyY0VsZW1lbnR8fGMudGFyZ2V0O3JldHVybiBlKGIpP2Q9ZyhmLGIsYSk6XCJmdW5jdGlvblwiPT10eXBlb2YgYiYmKGQ9YihjLGEpKSxkfSxjIT09ITFdfX07dGhpcy5hZGRGaWx0ZXI9UCx0aGlzLnJlbW92ZUZpbHRlcj1mdW5jdGlvbihhKXt2YXIgYj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBhP2EuX2thdGF2b3Jpb0lkOmE7ZGVsZXRlIE5bYl19LHRoaXMuY2xlYXJBbGxGaWx0ZXJzPWZ1bmN0aW9uKCl7Tj17fX0sdGhpcy5jYW5EcmFnPXRoaXMucGFyYW1zLmNhbkRyYWd8fHQ7dmFyIFEsUj1bXSxTPVtdO3RoaXMuZG93bkxpc3RlbmVyPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMucmlnaHRCdXR0b25DYW5EcmFnfHwzIT09YS53aGljaCYmMiE9PWEuYnV0dG9uO2lmKGImJnRoaXMuaXNFbmFibGVkKCkmJnRoaXMuY2FuRHJhZygpKXt2YXIgZT1PKGEpJiZ6KGEsdGhpcy5lbCx0aGlzLmspO2lmKGUpe2lmKHMpe3I9dGhpcy5lbC5jbG9uZU5vZGUoITApLHIuc2V0QXR0cmlidXRlKFwiaWRcIixudWxsKSxyLnN0eWxlLnBvc2l0aW9uPVwiYWJzb2x1dGVcIjt2YXIgZz1mKHRoaXMuZWwpO3Iuc3R5bGUubGVmdD1nLmxlZnQrXCJweFwiLHIuc3R5bGUudG9wPWcudG9wK1wicHhcIixkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHIpfWVsc2Ugcj10aGlzLmVsO3EmJngoYSksaD1tKGEpLHRoaXMucGFyYW1zLmJpbmQoZG9jdW1lbnQsXCJtb3VzZW1vdmVcIix0aGlzLm1vdmVMaXN0ZW5lciksdGhpcy5wYXJhbXMuYmluZChkb2N1bWVudCxcIm1vdXNldXBcIix0aGlzLnVwTGlzdGVuZXIpLGQubWFya1NlbGVjdGlvbih0aGlzKSxkLm1hcmtQb3NzZXModGhpcyksdGhpcy5wYXJhbXMuYWRkQ2xhc3MoZG9jdW1lbnQuYm9keSxjLm5vU2VsZWN0KSxVKFwiYmVmb3JlU3RhcnRcIix7ZWw6dGhpcy5lbCxwb3M6ayxlOmEsZHJhZzp0aGlzfSl9ZWxzZSB0aGlzLnBhcmFtcy5jb25zdW1lRmlsdGVyZWRFdmVudHMmJngoYSl9fS5iaW5kKHRoaXMpLHRoaXMubW92ZUxpc3RlbmVyPWZ1bmN0aW9uKGEpe2lmKGgpe2lmKCFvKXt2YXIgYj1VKFwic3RhcnRcIix7ZWw6dGhpcy5lbCxwb3M6ayxlOmEsZHJhZzp0aGlzfSk7aWYoYiE9PSExKXtpZighaClyZXR1cm47dGhpcy5tYXJrKCEwKSxvPSEwfX1pZihoKXtTLmxlbmd0aD0wO3ZhciBjPW0oYSksZT1jWzBdLWhbMF0sZj1jWzFdLWhbMV0sZz10aGlzLnBhcmFtcy5pZ25vcmVab29tPzE6ZC5nZXRab29tKCk7ZS89ZyxmLz1nLHRoaXMubW92ZUJ5KGUsZixhKSxkLnVwZGF0ZVNlbGVjdGlvbihlLGYsdGhpcyksZC51cGRhdGVQb3NzZXMoZSxmLHRoaXMpfX19LmJpbmQodGhpcyksdGhpcy51cExpc3RlbmVyPWZ1bmN0aW9uKGEpe2gmJihoPW51bGwsdGhpcy5wYXJhbXMudW5iaW5kKGRvY3VtZW50LFwibW91c2Vtb3ZlXCIsdGhpcy5tb3ZlTGlzdGVuZXIpLHRoaXMucGFyYW1zLnVuYmluZChkb2N1bWVudCxcIm1vdXNldXBcIix0aGlzLnVwTGlzdGVuZXIpLHRoaXMucGFyYW1zLnJlbW92ZUNsYXNzKGRvY3VtZW50LmJvZHksYy5ub1NlbGVjdCksdGhpcy51bm1hcmsoYSksZC51bm1hcmtTZWxlY3Rpb24odGhpcyxhKSxkLnVubWFya1Bvc3Nlcyh0aGlzLGEpLHRoaXMuc3RvcChhKSxkLm5vdGlmeVNlbGVjdGlvbkRyYWdTdG9wKHRoaXMsYSksZC5ub3RpZnlQb3NzZURyYWdTdG9wKHRoaXMsYSksbz0hMSxzJiYociYmci5wYXJlbnROb2RlJiZyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocikscj1udWxsKSxTLmxlbmd0aD0wLEwmJkwodGhpcy5lbCx0aGlzLnBhcmFtcy5nZXRQb3NpdGlvbih0aGlzLmVsKSk9PT0hMCYmKHRoaXMucGFyYW1zLnNldFBvc2l0aW9uKHRoaXMuZWwsayksVShcInJldmVydFwiLHRoaXMuZWwpKSl9LmJpbmQodGhpcyksdGhpcy5nZXRGaWx0ZXJzPWZ1bmN0aW9uKCl7cmV0dXJuIE59LHRoaXMuYWJvcnQ9ZnVuY3Rpb24oKXtudWxsIT1oJiZ0aGlzLnVwTGlzdGVuZXIoKX0sdGhpcy5nZXREcmFnRWxlbWVudD1mdW5jdGlvbigpe3JldHVybiByfHx0aGlzLmVsfTt2YXIgVD17c3RhcnQ6W10sZHJhZzpbXSxzdG9wOltdLG92ZXI6W10sb3V0OltdLGJlZm9yZVN0YXJ0OltdLHJldmVydDpbXX07Yi5ldmVudHMuc3RhcnQmJlQuc3RhcnQucHVzaChiLmV2ZW50cy5zdGFydCksYi5ldmVudHMuYmVmb3JlU3RhcnQmJlQuYmVmb3JlU3RhcnQucHVzaChiLmV2ZW50cy5iZWZvcmVTdGFydCksYi5ldmVudHMuc3RvcCYmVC5zdG9wLnB1c2goYi5ldmVudHMuc3RvcCksYi5ldmVudHMuZHJhZyYmVC5kcmFnLnB1c2goYi5ldmVudHMuZHJhZyksYi5ldmVudHMucmV2ZXJ0JiZULnJldmVydC5wdXNoKGIuZXZlbnRzLnJldmVydCksdGhpcy5vbj1mdW5jdGlvbihhLGIpe1RbYV0mJlRbYV0ucHVzaChiKX0sdGhpcy5vZmY9ZnVuY3Rpb24oYSxiKXtpZihUW2FdKXtmb3IodmFyIGM9W10sZD0wO2Q8VFthXS5sZW5ndGg7ZCsrKVRbYV1bZF0hPT1iJiZjLnB1c2goVFthXVtkXSk7VFthXT1jfX07dmFyIFU9ZnVuY3Rpb24oYSxiKXtpZihUW2FdKWZvcih2YXIgYz0wO2M8VFthXS5sZW5ndGg7YysrKXRyeXtUW2FdW2NdKGIpfWNhdGNoKGQpe319O3RoaXMubm90aWZ5U3RhcnQ9ZnVuY3Rpb24oYSl7VShcInN0YXJ0XCIse2VsOnRoaXMuZWwscG9zOnRoaXMucGFyYW1zLmdldFBvc2l0aW9uKHIpLGU6YSxkcmFnOnRoaXN9KX0sdGhpcy5zdG9wPWZ1bmN0aW9uKGEsYil7aWYoYnx8byl7dmFyIGM9W10sZT1kLmdldFNlbGVjdGlvbigpLGY9dGhpcy5wYXJhbXMuZ2V0UG9zaXRpb24ocik7aWYoZS5sZW5ndGg+MSlmb3IodmFyIGc9MDtnPGUubGVuZ3RoO2crKyl7dmFyIGg9dGhpcy5wYXJhbXMuZ2V0UG9zaXRpb24oZVtnXS5lbCk7Yy5wdXNoKFtlW2ddLmVsLHtsZWZ0OmhbMF0sdG9wOmhbMV19LGVbZ11dKX1lbHNlIGMucHVzaChbcix7bGVmdDpmWzBdLHRvcDpmWzFdfSx0aGlzXSk7VShcInN0b3BcIix7ZWw6cixwb3M6Vnx8ZixmaW5hbFBvczpmLGU6YSxkcmFnOnRoaXMsc2VsZWN0aW9uOmN9KX19LHRoaXMubWFyaz1mdW5jdGlvbihhKXtrPXRoaXMucGFyYW1zLmdldFBvc2l0aW9uKHIpLGw9dGhpcy5wYXJhbXMuZ2V0UG9zaXRpb24ociwhMCksbj1bbFswXS1rWzBdLGxbMV0ta1sxXV0sdGhpcy5zaXplPXRoaXMucGFyYW1zLmdldFNpemUociksUj1kLmdldE1hdGNoaW5nRHJvcHBhYmxlcyh0aGlzKSx2KFIsITAsITEsdGhpcyksdGhpcy5wYXJhbXMuYWRkQ2xhc3Mocix0aGlzLnBhcmFtcy5kcmFnQ2xhc3N8fGMuZHJhZyk7dmFyIGI9dGhpcy5wYXJhbXMuZ2V0U2l6ZShyLnBhcmVudE5vZGUpO1E9e3c6YlswXSxoOmJbMV19LGEmJmQubm90aWZ5U2VsZWN0aW9uRHJhZ1N0YXJ0KHRoaXMpfTt2YXIgVjt0aGlzLnVubWFyaz1mdW5jdGlvbihhLGQpe2lmKHYoUiwhMSwhMCx0aGlzKSx3JiZ5KHRoaXMuZWwpPyhWPVtyLm9mZnNldExlZnQsci5vZmZzZXRUb3BdLHRoaXMuZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyKSxyPXRoaXMuZWwpOlY9bnVsbCx0aGlzLnBhcmFtcy5yZW1vdmVDbGFzcyhyLHRoaXMucGFyYW1zLmRyYWdDbGFzc3x8Yy5kcmFnKSxSLmxlbmd0aD0wLHc9ITEsIWQpe1MubGVuZ3RoPjAmJlYmJmIuc2V0UG9zaXRpb24odGhpcy5lbCxWKSxTLnNvcnQoRyk7Zm9yKHZhciBlPTA7ZTxTLmxlbmd0aDtlKyspe3ZhciBmPVNbZV0uZHJvcCh0aGlzLGEpO2lmKGY9PT0hMClicmVha319fSx0aGlzLm1vdmVCeT1mdW5jdGlvbihhLGMsZCl7Uy5sZW5ndGg9MDt2YXIgZT10aGlzLnRvR3JpZChba1swXSthLGtbMV0rY10pLGY9SShlLHIpO2lmKHkodGhpcy5lbCkpaWYoZVswXSE9ZlswXXx8ZVsxXSE9ZlsxXSl7aWYoIXcpe3ZhciBnPUQodGhpcy5lbCk7Yi5hZGRDbGFzcyhnLHAuZ2hvc3RQcm94eSksdGhpcy5lbC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKGcpLHI9Zyx3PSEwfWY9ZX1lbHNlIHcmJih0aGlzLmVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocikscj10aGlzLmVsLHc9ITEpO3ZhciBoPXt4OmZbMF0seTpmWzFdLHc6dGhpcy5zaXplWzBdLGg6dGhpcy5zaXplWzFdfSxpPXt4OmgueCtuWzBdLHk6aC55K25bMV0sdzpoLncsaDpoLmh9LGo9bnVsbDt0aGlzLnBhcmFtcy5zZXRQb3NpdGlvbihyLGYpO2Zvcih2YXIgbD0wO2w8Ui5sZW5ndGg7bCsrKXt2YXIgbT17eDpSW2xdLnBhZ2VQb3NpdGlvblswXSx5OlJbbF0ucGFnZVBvc2l0aW9uWzFdLHc6UltsXS5zaXplWzBdLGg6UltsXS5zaXplWzFdfTt0aGlzLnBhcmFtcy5pbnRlcnNlY3RzKGksbSkmJih1fHxudWxsPT1qfHxqPT1SW2xdLmVsKSYmUltsXS5jYW5Ecm9wKHRoaXMpPyhqfHwoaj1SW2xdLmVsKSxTLnB1c2goUltsXSksUltsXS5zZXRIb3Zlcih0aGlzLCEwLGQpKTpSW2xdLmlzSG92ZXIoKSYmUltsXS5zZXRIb3Zlcih0aGlzLCExLGQpfVUoXCJkcmFnXCIse2VsOnRoaXMuZWwscG9zOmYsZTpkLGRyYWc6dGhpc30pfSx0aGlzLmRlc3Ryb3k9ZnVuY3Rpb24oKXt0aGlzLnBhcmFtcy51bmJpbmQodGhpcy5lbCxcIm1vdXNlZG93blwiLHRoaXMuZG93bkxpc3RlbmVyKSx0aGlzLnBhcmFtcy51bmJpbmQoZG9jdW1lbnQsXCJtb3VzZW1vdmVcIix0aGlzLm1vdmVMaXN0ZW5lciksdGhpcy5wYXJhbXMudW5iaW5kKGRvY3VtZW50LFwibW91c2V1cFwiLHRoaXMudXBMaXN0ZW5lciksdGhpcy5kb3duTGlzdGVuZXI9bnVsbCx0aGlzLnVwTGlzdGVuZXI9bnVsbCx0aGlzLm1vdmVMaXN0ZW5lcj1udWxsfSx0aGlzLnBhcmFtcy5iaW5kKHRoaXMuZWwsXCJtb3VzZWRvd25cIix0aGlzLmRvd25MaXN0ZW5lciksdGhpcy5wYXJhbXMuaGFuZGxlP1AodGhpcy5wYXJhbXMuaGFuZGxlLCExKTpQKHRoaXMucGFyYW1zLmZpbHRlcix0aGlzLnBhcmFtcy5maWx0ZXJFeGNsdWRlKX0sRT1mdW5jdGlvbihhLGIsYyl7dGhpcy5fY2xhc3M9Yy5kcm9wcGFibGUsdGhpcy5wYXJhbXM9Ynx8e30sdGhpcy5yYW5rPWIucmFua3x8MCx0aGlzLl9hY3RpdmVDbGFzcz10aGlzLnBhcmFtcy5hY3RpdmVDbGFzc3x8Yy5hY3RpdmUsdGhpcy5faG92ZXJDbGFzcz10aGlzLnBhcmFtcy5ob3ZlckNsYXNzfHxjLmhvdmVyLEEuYXBwbHkodGhpcyxhcmd1bWVudHMpO3ZhciBkPSExO3RoaXMuYWxsb3dMb29wYmFjaz10aGlzLnBhcmFtcy5hbGxvd0xvb3BiYWNrIT09ITEsdGhpcy5zZXRBY3RpdmU9ZnVuY3Rpb24oYSl7dGhpcy5wYXJhbXNbYT9cImFkZENsYXNzXCI6XCJyZW1vdmVDbGFzc1wiXSh0aGlzLmVsLHRoaXMuX2FjdGl2ZUNsYXNzKX0sdGhpcy51cGRhdGVQb3NpdGlvbj1mdW5jdGlvbigpe3RoaXMucG9zaXRpb249dGhpcy5wYXJhbXMuZ2V0UG9zaXRpb24odGhpcy5lbCksdGhpcy5wYWdlUG9zaXRpb249dGhpcy5wYXJhbXMuZ2V0UG9zaXRpb24odGhpcy5lbCwhMCksdGhpcy5zaXplPXRoaXMucGFyYW1zLmdldFNpemUodGhpcy5lbCl9LHRoaXMuY2FuRHJvcD10aGlzLnBhcmFtcy5jYW5Ecm9wfHxmdW5jdGlvbigpe3JldHVybiEwfSx0aGlzLmlzSG92ZXI9ZnVuY3Rpb24oKXtyZXR1cm4gZH0sdGhpcy5zZXRIb3Zlcj1mdW5jdGlvbihhLGIsYyl7KGJ8fG51bGw9PXRoaXMuZWwuX2thdGF2b3Jpb0RyYWdIb3Zlcnx8dGhpcy5lbC5fa2F0YXZvcmlvRHJhZ0hvdmVyPT1hLmVsLl9rYXRhdm9yaW8pJiYodGhpcy5wYXJhbXNbYj9cImFkZENsYXNzXCI6XCJyZW1vdmVDbGFzc1wiXSh0aGlzLmVsLHRoaXMuX2hvdmVyQ2xhc3MpLHRoaXMuZWwuX2thdGF2b3Jpb0RyYWdIb3Zlcj1iP2EuZWwuX2thdGF2b3JpbzpudWxsLGQhPT1iJiZ0aGlzLnBhcmFtcy5ldmVudHNbYj9cIm92ZXJcIjpcIm91dFwiXSh7ZWw6dGhpcy5lbCxlOmMsZHJhZzphLGRyb3A6dGhpc30pLGQ9Yil9LHRoaXMuZHJvcD1mdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLnBhcmFtcy5ldmVudHMuZHJvcCh7ZHJhZzphLGU6Yixkcm9wOnRoaXN9KX0sdGhpcy5kZXN0cm95PWZ1bmN0aW9uKCl7dGhpcy5fY2xhc3M9bnVsbCx0aGlzLl9hY3RpdmVDbGFzcz1udWxsLHRoaXMuX2hvdmVyQ2xhc3M9bnVsbCxkPW51bGx9fSxGPWZ1bmN0aW9uKCl7cmV0dXJuXCJ4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHhcIi5yZXBsYWNlKC9beHldL2csZnVuY3Rpb24oYSl7dmFyIGI9MHwxNipNYXRoLnJhbmRvbSgpLGM9XCJ4XCI9PWE/Yjo4fDMmYjtyZXR1cm4gYy50b1N0cmluZygxNil9KX0sRz1mdW5jdGlvbihhLGIpe3JldHVybiBhLnJhbms8Yi5yYW5rPzE6YS5yYW5rPmIucmFuaz8tMTowfSxIPWZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hP251bGw6KGE9XCJzdHJpbmdcIj09dHlwZW9mIGF8fGEuY29uc3RydWN0b3I9PVN0cmluZz9kb2N1bWVudC5nZXRFbGVtZW50QnlJZChhKTphLG51bGw9PWE/bnVsbDooYS5fa2F0YXZvcmlvPWEuX2thdGF2b3Jpb3x8RigpLGEpKX07YS5LYXRhdm9yaW89ZnVuY3Rpb24oYSl7dmFyIGY9W10sZz17fTt0aGlzLl9kcmFnc0J5U2NvcGU9e30sdGhpcy5fZHJvcHNCeVNjb3BlPXt9O3ZhciBoPTEsaT1mdW5jdGlvbihhLGIpe3coYSxmdW5jdGlvbihhKXtmb3IodmFyIGM9MDtjPGEuc2NvcGVzLmxlbmd0aDtjKyspYlthLnNjb3Blc1tjXV09YlthLnNjb3Blc1tjXV18fFtdLGJbYS5zY29wZXNbY11dLnB1c2goYSl9KX0saj1mdW5jdGlvbihiLGMpe3ZhciBkPTA7cmV0dXJuIHcoYixmdW5jdGlvbihiKXtmb3IodmFyIGU9MDtlPGIuc2NvcGVzLmxlbmd0aDtlKyspaWYoY1tiLnNjb3Blc1tlXV0pe3ZhciBmPWEuaW5kZXhPZihjW2Iuc2NvcGVzW2VdXSxiKTstMSE9ZiYmKGNbYi5zY29wZXNbZV1dLnNwbGljZShmLDEpLGQrKyl9fSksZD4wfSxrPSh0aGlzLmdldE1hdGNoaW5nRHJvcHBhYmxlcz1mdW5jdGlvbihhKXtmb3IodmFyIGI9W10sYz17fSxkPTA7ZDxhLnNjb3Blcy5sZW5ndGg7ZCsrKXt2YXIgZT10aGlzLl9kcm9wc0J5U2NvcGVbYS5zY29wZXNbZF1dO2lmKGUpZm9yKHZhciBmPTA7ZjxlLmxlbmd0aDtmKyspIWVbZl0uY2FuRHJvcChhKXx8Y1tlW2ZdLnV1aWRdfHwhZVtmXS5hbGxvd0xvb3BiYWNrJiZlW2ZdLmVsPT09YS5lbHx8KGNbZVtmXS51dWlkXT0hMCxiLnB1c2goZVtmXSkpfXJldHVybiBiLnNvcnQoRyksYn0sZnVuY3Rpb24oYil7Yj1ifHx7fTt2YXIgYyxkPXtldmVudHM6e319O2ZvcihjIGluIGEpZFtjXT1hW2NdO2ZvcihjIGluIGIpZFtjXT1iW2NdO2ZvcihjPTA7YzxyLmxlbmd0aDtjKyspZC5ldmVudHNbcltjXV09YltyW2NdXXx8cztyZXR1cm4gZC5rYXRhdm9yaW89dGhpcyxkfS5iaW5kKHRoaXMpKSxsPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPTA7YzxyLmxlbmd0aDtjKyspYltyW2NdXSYmYS5vbihyW2NdLGJbcltjXV0pfS5iaW5kKHRoaXMpLG09e30sbj1hLmNzc3x8e30sbz1hLnNjb3BlfHxxO2Zvcih2YXIgdCBpbiBwKW1bdF09cFt0XTtmb3IodmFyIHQgaW4gbiltW3RdPW5bdF07dmFyIHY9YS5pbnB1dEZpbHRlclNlbGVjdG9yfHx5O3RoaXMuZ2V0SW5wdXRGaWx0ZXJTZWxlY3Rvcj1mdW5jdGlvbigpe3JldHVybiB2fSx0aGlzLnNldElucHV0RmlsdGVyU2VsZWN0b3I9ZnVuY3Rpb24oYSl7cmV0dXJuIHY9YSx0aGlzfSx0aGlzLmRyYWdnYWJsZT1mdW5jdGlvbihiLGMpe3ZhciBkPVtdO3JldHVybiB3KGIsZnVuY3Rpb24oYil7aWYoYj1IKGIpLG51bGwhPWIpaWYobnVsbD09Yi5fa2F0YXZvcmlvRHJhZyl7dmFyIGU9ayhjKTtiLl9rYXRhdm9yaW9EcmFnPW5ldyBEKGIsZSxtLG8pLGkoYi5fa2F0YXZvcmlvRHJhZyx0aGlzLl9kcmFnc0J5U2NvcGUpLGQucHVzaChiLl9rYXRhdm9yaW9EcmFnKSxhLmFkZENsYXNzKGIsbS5kcmFnZ2FibGUpfWVsc2UgbChiLl9rYXRhdm9yaW9EcmFnLGMpfS5iaW5kKHRoaXMpKSxkfSx0aGlzLmRyb3BwYWJsZT1mdW5jdGlvbihiLGMpe3ZhciBkPVtdO3JldHVybiB3KGIsZnVuY3Rpb24oYil7aWYoYj1IKGIpLG51bGwhPWIpe3ZhciBlPW5ldyBFKGIsayhjKSxtLG8pO2IuX2thdGF2b3Jpb0Ryb3A9Yi5fa2F0YXZvcmlvRHJvcHx8W10sYi5fa2F0YXZvcmlvRHJvcC5wdXNoKGUpLGkoZSx0aGlzLl9kcm9wc0J5U2NvcGUpLGQucHVzaChlKSxhLmFkZENsYXNzKGIsbS5kcm9wcGFibGUpfX0uYmluZCh0aGlzKSksZH0sdGhpcy5zZWxlY3Q9ZnVuY3Rpb24oYil7cmV0dXJuIHcoYixmdW5jdGlvbigpe3ZhciBiPUgodGhpcyk7YiYmYi5fa2F0YXZvcmlvRHJhZyYmKGdbYi5fa2F0YXZvcmlvXXx8KGYucHVzaChiLl9rYXRhdm9yaW9EcmFnKSxnW2IuX2thdGF2b3Jpb109W2IsZi5sZW5ndGgtMV0sYS5hZGRDbGFzcyhiLG0uc2VsZWN0ZWQpKSl9KSx0aGlzfSx0aGlzLmRlc2VsZWN0PWZ1bmN0aW9uKGIpe3JldHVybiB3KGIsZnVuY3Rpb24oKXt2YXIgYj1IKHRoaXMpO2lmKGImJmIuX2thdGF2b3Jpbyl7dmFyIGM9Z1tiLl9rYXRhdm9yaW9dO2lmKGMpe2Zvcih2YXIgZD1bXSxlPTA7ZTxmLmxlbmd0aDtlKyspZltlXS5lbCE9PWImJmQucHVzaChmW2VdKTtmPWQsZGVsZXRlIGdbYi5fa2F0YXZvcmlvXSxhLnJlbW92ZUNsYXNzKGIsbS5zZWxlY3RlZCl9fX0pLHRoaXN9LHRoaXMuZGVzZWxlY3RBbGw9ZnVuY3Rpb24oKXtmb3IodmFyIGIgaW4gZyl7dmFyIGM9Z1tiXTthLnJlbW92ZUNsYXNzKGNbMF0sbS5zZWxlY3RlZCl9Zi5sZW5ndGg9MCxnPXt9fSx0aGlzLm1hcmtTZWxlY3Rpb249ZnVuY3Rpb24oYSl7dShmLGZ1bmN0aW9uKGEpe2EubWFyaygpfSxhKX0sdGhpcy5tYXJrUG9zc2VzPWZ1bmN0aW9uKGEpe2EucG9zc2VzJiZ3KGEucG9zc2VzLGZ1bmN0aW9uKGIpe2EucG9zc2VSb2xlc1tiXSYmQltiXSYmdShCW2JdLm1lbWJlcnMsZnVuY3Rpb24oYSl7YS5tYXJrKCl9LGEpfSl9LHRoaXMudW5tYXJrU2VsZWN0aW9uPWZ1bmN0aW9uKGEsYil7dShmLGZ1bmN0aW9uKGEpe2EudW5tYXJrKGIpfSxhKX0sdGhpcy51bm1hcmtQb3NzZXM9ZnVuY3Rpb24oYSxiKXthLnBvc3NlcyYmdyhhLnBvc3NlcyxmdW5jdGlvbihjKXthLnBvc3NlUm9sZXNbY10mJkJbY10mJnUoQltjXS5tZW1iZXJzLGZ1bmN0aW9uKGEpe2EudW5tYXJrKGIsITApfSxhKX0pfSx0aGlzLmdldFNlbGVjdGlvbj1mdW5jdGlvbigpe3JldHVybiBmLnNsaWNlKDApfSx0aGlzLnVwZGF0ZVNlbGVjdGlvbj1mdW5jdGlvbihhLGIsYyl7dShmLGZ1bmN0aW9uKGMpe2MubW92ZUJ5KGEsYil9LGMpfTt2YXIgeD1mdW5jdGlvbihhLGIpe2IucG9zc2VzJiZ3KGIucG9zc2VzLGZ1bmN0aW9uKGMpe2IucG9zc2VSb2xlc1tjXSYmQltjXSYmdShCW2NdLm1lbWJlcnMsZnVuY3Rpb24oYil7YShiKX0sYil9KX07dGhpcy51cGRhdGVQb3NzZXM9ZnVuY3Rpb24oYSxiLGMpe3goZnVuY3Rpb24oYyl7Yy5tb3ZlQnkoYSxiKX0sYyl9LHRoaXMubm90aWZ5UG9zc2VEcmFnU3RvcD1mdW5jdGlvbihhLGIpe3goZnVuY3Rpb24oYSl7YS5zdG9wKGIsITApfSxhKX0sdGhpcy5ub3RpZnlTZWxlY3Rpb25EcmFnU3RvcD1mdW5jdGlvbihhLGIpe3UoZixmdW5jdGlvbihhKXthLnN0b3AoYiwhMCl9LGEpfSx0aGlzLm5vdGlmeVNlbGVjdGlvbkRyYWdTdGFydD1mdW5jdGlvbihhLGIpe3UoZixmdW5jdGlvbihhKXthLm5vdGlmeVN0YXJ0KGIpfSxhKX0sdGhpcy5zZXRab29tPWZ1bmN0aW9uKGEpe2g9YX0sdGhpcy5nZXRab29tPWZ1bmN0aW9uKCl7cmV0dXJuIGh9O3ZhciB6PWZ1bmN0aW9uKGEsYixjLGQpe3coYSxmdW5jdGlvbihhKXtqKGEsYyksYVtkXShiKSxpKGEsYyl9KX07dyhbXCJzZXRcIixcImFkZFwiLFwicmVtb3ZlXCIsXCJ0b2dnbGVcIl0sZnVuY3Rpb24oYSl7dGhpc1thK1wiU2NvcGVcIl09ZnVuY3Rpb24oYixjKXt6KGIuX2thdGF2b3Jpb0RyYWcsYyx0aGlzLl9kcmFnc0J5U2NvcGUsYStcIlNjb3BlXCIpLHooYi5fa2F0YXZvcmlvRHJvcCxjLHRoaXMuX2Ryb3BzQnlTY29wZSxhK1wiU2NvcGVcIil9LmJpbmQodGhpcyksdGhpc1thK1wiRHJhZ1Njb3BlXCJdPWZ1bmN0aW9uKGIsYyl7eihiLmNvbnN0cnVjdG9yPT09RD9iOmIuX2thdGF2b3Jpb0RyYWcsYyx0aGlzLl9kcmFnc0J5U2NvcGUsYStcIlNjb3BlXCIpfS5iaW5kKHRoaXMpLHRoaXNbYStcIkRyb3BTY29wZVwiXT1mdW5jdGlvbihiLGMpe3ooYi5jb25zdHJ1Y3Rvcj09PUU/YjpiLl9rYXRhdm9yaW9Ecm9wLGMsdGhpcy5fZHJvcHNCeVNjb3BlLGErXCJTY29wZVwiKX0uYmluZCh0aGlzKX0uYmluZCh0aGlzKSksdGhpcy5zbmFwVG9HcmlkPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjIGluIHRoaXMuX2RyYWdzQnlTY29wZSl1KHRoaXMuX2RyYWdzQnlTY29wZVtjXSxmdW5jdGlvbihjKXtjLnNuYXAoYSxiKX0pfSx0aGlzLmdldERyYWdzRm9yU2NvcGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuX2RyYWdzQnlTY29wZVthXX0sdGhpcy5nZXREcm9wc0ZvclNjb3BlPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLl9kcm9wc0J5U2NvcGVbYV19O3ZhciBBPWZ1bmN0aW9uKGEsYixjKXtpZihhPUgoYSksYVtiXSl7dmFyIGQ9Zi5pbmRleE9mKGFbYl0pO2Q+PTAmJmYuc3BsaWNlKGQsMSksaihhW2JdLGMpJiZ3KGFbYl0sZnVuY3Rpb24oYSl7YS5kZXN0cm95KCl9KSxkZWxldGUgYVtiXX19O3RoaXMuZWxlbWVudFJlbW92ZWQ9ZnVuY3Rpb24oYSl7dGhpcy5kZXN0cm95RHJhZ2dhYmxlKGEpLHRoaXMuZGVzdHJveURyb3BwYWJsZShhKX0sdGhpcy5kZXN0cm95RHJhZ2dhYmxlPWZ1bmN0aW9uKGEpe0EoYSxcIl9rYXRhdm9yaW9EcmFnXCIsdGhpcy5fZHJhZ3NCeVNjb3BlKX0sdGhpcy5kZXN0cm95RHJvcHBhYmxlPWZ1bmN0aW9uKGEpe0EoYSxcIl9rYXRhdm9yaW9Ecm9wXCIsdGhpcy5fZHJvcHNCeVNjb3BlKX0sdGhpcy5yZXNldD1mdW5jdGlvbigpe3RoaXMuX2RyYWdzQnlTY29wZT17fSx0aGlzLl9kcm9wc0J5U2NvcGU9e30sZj1bXSxnPXt9LEI9e319O3ZhciBCPXt9LEM9ZnVuY3Rpb24oYSxjLGQpe3ZhciBmPWUoYyk/YzpjLmlkLGc9ZShjKT8hMDpjLmFjdGl2ZSE9PSExLGg9QltmXXx8ZnVuY3Rpb24oKXt2YXIgYT17bmFtZTpmLG1lbWJlcnM6W119O3JldHVybiBCW2ZdPWEsYX0oKTtyZXR1cm4gdyhhLGZ1bmN0aW9uKGEpe2lmKGEuX2thdGF2b3Jpb0RyYWcpe2lmKGQmJm51bGwhPWEuX2thdGF2b3Jpb0RyYWcucG9zc2VSb2xlc1toLm5hbWVdKXJldHVybjtiKGgubWVtYmVycyxhLl9rYXRhdm9yaW9EcmFnKSxiKGEuX2thdGF2b3Jpb0RyYWcucG9zc2VzLGgubmFtZSksYS5fa2F0YXZvcmlvRHJhZy5wb3NzZVJvbGVzW2gubmFtZV09Z319KSxofTt0aGlzLmFkZFRvUG9zc2U9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVtdLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIucHVzaChDKGEsYXJndW1lbnRzW2NdKSk7cmV0dXJuIDE9PWIubGVuZ3RoP2JbMF06Yn0sdGhpcy5zZXRQb3NzZT1mdW5jdGlvbihhKXtmb3IodmFyIGI9W10sYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYi5wdXNoKEMoYSxhcmd1bWVudHNbY10sITApLm5hbWUpO3JldHVybiB3KGEsZnVuY3Rpb24oYSl7aWYoYS5fa2F0YXZvcmlvRHJhZyl7dmFyIGM9ZChhLl9rYXRhdm9yaW9EcmFnLnBvc3NlcyxiKSxlPVtdO0FycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGUsYS5fa2F0YXZvcmlvRHJhZy5wb3NzZXMpO2Zvcih2YXIgZj0wO2Y8Yy5sZW5ndGg7ZisrKXRoaXMucmVtb3ZlRnJvbVBvc3NlKGEsY1tmXSl9fS5iaW5kKHRoaXMpKSwxPT1iLmxlbmd0aD9iWzBdOmJ9LHRoaXMucmVtb3ZlRnJvbVBvc3NlPWZ1bmN0aW9uKGEsYil7aWYoYXJndW1lbnRzLmxlbmd0aDwyKXRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBwb3NzZSBpZCBwcm92aWRlZCBmb3IgcmVtb3ZlIG9wZXJhdGlvblwiKTtmb3IodmFyIGQ9MTtkPGFyZ3VtZW50cy5sZW5ndGg7ZCsrKWI9YXJndW1lbnRzW2RdLHcoYSxmdW5jdGlvbihhKXtpZihhLl9rYXRhdm9yaW9EcmFnJiZhLl9rYXRhdm9yaW9EcmFnLnBvc3Nlcyl7dmFyIGQ9YS5fa2F0YXZvcmlvRHJhZzt3KGIsZnVuY3Rpb24oYSl7YyhCW2FdLm1lbWJlcnMsZCksYyhkLnBvc3NlcyxhKSxkZWxldGUgZC5wb3NzZVJvbGVzW2FdfSl9fSl9LHRoaXMucmVtb3ZlRnJvbUFsbFBvc3Nlcz1mdW5jdGlvbihhKXt3KGEsZnVuY3Rpb24oYSl7aWYoYS5fa2F0YXZvcmlvRHJhZyYmYS5fa2F0YXZvcmlvRHJhZy5wb3NzZXMpe3ZhciBiPWEuX2thdGF2b3Jpb0RyYWc7dyhiLnBvc3NlcyxmdW5jdGlvbihhKXtjKEJbYV0ubWVtYmVycyxiKX0pLGIucG9zc2VzLmxlbmd0aD0wLGIucG9zc2VSb2xlcz17fX19KX0sdGhpcy5zZXRQb3NzZVN0YXRlPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1CW2JdO2QmJncoYSxmdW5jdGlvbihhKXthLl9rYXRhdm9yaW9EcmFnJiZhLl9rYXRhdm9yaW9EcmFnLnBvc3NlcyYmKGEuX2thdGF2b3Jpb0RyYWcucG9zc2VSb2xlc1tkLm5hbWVdPWMpfSl9fSxhLkthdGF2b3Jpby52ZXJzaW9uPVwiMC4xOS4yXCIsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGV4cG9ydHMmJihleHBvcnRzLkthdGF2b3Jpbz1hLkthdGF2b3Jpbyl9LmNhbGwoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dGhpcyksZnVuY3Rpb24oKXt2YXIgYT1mdW5jdGlvbihhKXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSl9LGI9ZnVuY3Rpb24oYSl7cmV0dXJuXCJbb2JqZWN0IE51bWJlcl1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhKX0sYz1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgYX0sZD1mdW5jdGlvbihhKXtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIGF9LGU9ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWF9LGY9ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/ITE6XCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhKX0sZz1mdW5jdGlvbihhKXtyZXR1cm5cIltvYmplY3QgRGF0ZV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhKX0saD1mdW5jdGlvbihhKXtyZXR1cm5cIltvYmplY3QgRnVuY3Rpb25dXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSl9LGk9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShiKSlyZXR1cm4hMTtyZXR1cm4hMH0saj10aGlzO2ouanNQbHVtYlV0aWw9e2lzQXJyYXk6YSxpc1N0cmluZzpjLGlzQm9vbGVhbjpkLGlzTnVsbDplLGlzT2JqZWN0OmYsaXNEYXRlOmcsaXNGdW5jdGlvbjpoLGlzRW1wdHk6aSxpc051bWJlcjpiLGNsb25lOmZ1bmN0aW9uKGIpe2lmKGMoYikpcmV0dXJuXCJcIitiO2lmKGQoYikpcmV0dXJuISFiO2lmKGcoYikpcmV0dXJuIG5ldyBEYXRlKGIuZ2V0VGltZSgpKTtpZihoKGIpKXJldHVybiBiO2lmKGEoYikpe2Zvcih2YXIgZT1bXSxpPTA7aTxiLmxlbmd0aDtpKyspZS5wdXNoKHRoaXMuY2xvbmUoYltpXSkpO1xucmV0dXJuIGV9aWYoZihiKSl7dmFyIGo9e307Zm9yKHZhciBrIGluIGIpaltrXT10aGlzLmNsb25lKGJba10pO3JldHVybiBqfXJldHVybiBifSxtZXJnZTpmdW5jdGlvbihiLGUsZyl7dmFyIGgsaSxqPXt9O2ZvcihnPWd8fFtdLGk9MDtpPGcubGVuZ3RoO2krKylqW2dbaV1dPSEwO3ZhciBrPXRoaXMuY2xvbmUoYik7Zm9yKGkgaW4gZSlpZihudWxsPT1rW2ldKWtbaV09ZVtpXTtlbHNlIGlmKGMoZVtpXSl8fGQoZVtpXSkpaltpXT8oaD1bXSxoLnB1c2guYXBwbHkoaCxhKGtbaV0pP2tbaV06W2tbaV1dKSxoLnB1c2guYXBwbHkoaCxhKGVbaV0pP2VbaV06W2VbaV1dKSxrW2ldPWgpOmtbaV09ZVtpXTtlbHNlIGlmKGEoZVtpXSkpaD1bXSxhKGtbaV0pJiZoLnB1c2guYXBwbHkoaCxrW2ldKSxoLnB1c2guYXBwbHkoaCxlW2ldKSxrW2ldPWg7ZWxzZSBpZihmKGVbaV0pKXtmKGtbaV0pfHwoa1tpXT17fSk7Zm9yKHZhciBsIGluIGVbaV0pa1tpXVtsXT1lW2ldW2xdfXJldHVybiBrfSxyZXBsYWNlOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsIT1hKXt2YXIgZD1hLGU9ZDtyZXR1cm4gYi5yZXBsYWNlKC8oW15cXC5dKSsvZyxmdW5jdGlvbihhLGIsZCxmKXt2YXIgZz1hLm1hdGNoKC8oW15cXFswLTldKyl7MX0oXFxbKShbMC05K10pLyksaD1kK2EubGVuZ3RoPj1mLmxlbmd0aCxpPWZ1bmN0aW9uKCl7cmV0dXJuIGVbZ1sxXV18fGZ1bmN0aW9uKCl7cmV0dXJuIGVbZ1sxXV09W10sZVtnWzFdXX0oKX07aWYoaClnP2koKVtnWzNdXT1jOmVbYV09YztlbHNlIGlmKGcpe3ZhciBqPWkoKTtlPWpbZ1szXV18fGZ1bmN0aW9uKCl7cmV0dXJuIGpbZ1szXV09e30saltnWzNdXX0oKX1lbHNlIGU9ZVthXXx8ZnVuY3Rpb24oKXtyZXR1cm4gZVthXT17fSxlW2FdfSgpfSksYX19LGZ1bmN0aW9uQ2hhaW46ZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdWzBdW2NbZF1bMV1dLmFwcGx5KGNbZF1bMF0sY1tkXVsyXSk7aWYoZT09PWIpcmV0dXJuIGV9cmV0dXJuIGF9LHBvcHVsYXRlOmZ1bmN0aW9uKGIsZCxlKXt2YXIgZz1mdW5jdGlvbihhKXt2YXIgYj1hLm1hdGNoKC8oXFwkey4qP30pL2cpO2lmKG51bGwhPWIpZm9yKHZhciBjPTA7YzxiLmxlbmd0aDtjKyspe3ZhciBlPWRbYltjXS5zdWJzdHJpbmcoMixiW2NdLmxlbmd0aC0xKV18fFwiXCI7bnVsbCE9ZSYmKGE9YS5yZXBsYWNlKGJbY10sZSkpfXJldHVybiBhfSxpPWZ1bmN0aW9uKGIpe2lmKG51bGwhPWIpe2lmKGMoYikpcmV0dXJuIGcoYik7aWYoIWgoYil8fG51bGwhPWUmJjAhPT0oYi5uYW1lfHxcIlwiKS5pbmRleE9mKGUpKXtpZihhKGIpKXtmb3IodmFyIGo9W10saz0wO2s8Yi5sZW5ndGg7aysrKWoucHVzaChpKGJba10pKTtyZXR1cm4gan1pZihmKGIpKXt2YXIgbD17fTtmb3IodmFyIG0gaW4gYilsW21dPWkoYlttXSk7cmV0dXJuIGx9cmV0dXJuIGJ9cmV0dXJuIGIoZCl9fTtyZXR1cm4gaShiKX0sZmluZFdpdGhGdW5jdGlvbjpmdW5jdGlvbihhLGIpe2lmKGEpZm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspaWYoYihhW2NdKSlyZXR1cm4gYztyZXR1cm4tMX0scmVtb3ZlV2l0aEZ1bmN0aW9uOmZ1bmN0aW9uKGEsYil7dmFyIGM9ai5qc1BsdW1iVXRpbC5maW5kV2l0aEZ1bmN0aW9uKGEsYik7cmV0dXJuIGM+LTEmJmEuc3BsaWNlKGMsMSksLTEhPWN9LHJlbW92ZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEuaW5kZXhPZihiKTtyZXR1cm4gYz4tMSYmYS5zcGxpY2UoYywxKSwtMSE9Y30sYWRkV2l0aEZ1bmN0aW9uOmZ1bmN0aW9uKGEsYixjKXstMT09ai5qc1BsdW1iVXRpbC5maW5kV2l0aEZ1bmN0aW9uKGEsYykmJmEucHVzaChiKX0sYWRkVG9MaXN0OmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWFbYl07cmV0dXJuIG51bGw9PWUmJihlPVtdLGFbYl09ZSksZVtkP1widW5zaGlmdFwiOlwicHVzaFwiXShjKSxlfSxzdWdnZXN0OmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4tMT09PWEuaW5kZXhPZihiKT8oYz9hLnVuc2hpZnQoYik6YS5wdXNoKGIpLCEwKTohMX0sZXh0ZW5kOmZ1bmN0aW9uKGIsYyl7dmFyIGQ7Zm9yKGM9YShjKT9jOltjXSxkPTA7ZDxjLmxlbmd0aDtkKyspZm9yKHZhciBlIGluIGNbZF0ucHJvdG90eXBlKWNbZF0ucHJvdG90eXBlLmhhc093blByb3BlcnR5KGUpJiYoYi5wcm90b3R5cGVbZV09Y1tkXS5wcm90b3R5cGVbZV0pO3ZhciBmPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGZ1bmN0aW9uKCl7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKyljW2RdLnByb3RvdHlwZVthXSYmY1tkXS5wcm90b3R5cGVbYV0uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19LGc9ZnVuY3Rpb24oYSl7Zm9yKHZhciBjIGluIGEpYi5wcm90b3R5cGVbY109ZihjLGFbY10pfTtpZihhcmd1bWVudHMubGVuZ3RoPjIpZm9yKGQ9MjtkPGFyZ3VtZW50cy5sZW5ndGg7ZCsrKWcoYXJndW1lbnRzW2RdKTtyZXR1cm4gYn0sdXVpZDpmdW5jdGlvbigpe3JldHVyblwieHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4XCIucmVwbGFjZSgvW3h5XS9nLGZ1bmN0aW9uKGEpe3ZhciBiPTB8MTYqTWF0aC5yYW5kb20oKSxjPVwieFwiPT1hP2I6OHwzJmI7cmV0dXJuIGMudG9TdHJpbmcoMTYpfSl9LGxvZ0VuYWJsZWQ6ITAsbG9nOmZ1bmN0aW9uKCl7aWYoai5qc1BsdW1iVXRpbC5sb2dFbmFibGVkJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgY29uc29sZSl0cnl7dmFyIGE9YXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGgtMV07Y29uc29sZS5sb2coYSl9Y2F0Y2goYil7fX0sd3JhcDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGE9YXx8ZnVuY3Rpb24oKXt9LGI9Ynx8ZnVuY3Rpb24oKXt9LGZ1bmN0aW9uKCl7dmFyIGQ9bnVsbDt0cnl7ZD1iLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1jYXRjaChlKXtqLmpzUGx1bWJVdGlsLmxvZyhcImpzUGx1bWIgZnVuY3Rpb24gZmFpbGVkIDogXCIrZSl9aWYobnVsbD09Y3x8ZCE9PWMpdHJ5e2Q9YS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9Y2F0Y2goZSl7ai5qc1BsdW1iVXRpbC5sb2coXCJ3cmFwcGVkIGZ1bmN0aW9uIGZhaWxlZCA6IFwiK2UpfXJldHVybiBkfX19LGouanNQbHVtYlV0aWwuRXZlbnRHZW5lcmF0b3I9ZnVuY3Rpb24oKXt2YXIgYT17fSxiPSExLGM9e3JlYWR5OiEwfTt0aGlzLmJpbmQ9ZnVuY3Rpb24oYixjLGQpe3ZhciBlPWZ1bmN0aW9uKGIpe2ouanNQbHVtYlV0aWwuYWRkVG9MaXN0KGEsYixjLGQpLGMuX19qc1BsdW1iPWMuX19qc1BsdW1ifHx7fSxjLl9fanNQbHVtYltqLmpzUGx1bWJVdGlsLnV1aWQoKV09Yn07aWYoXCJzdHJpbmdcIj09dHlwZW9mIGIpZShiKTtlbHNlIGlmKG51bGwhPWIubGVuZ3RoKWZvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7ZisrKWUoYltmXSk7cmV0dXJuIHRoaXN9LHRoaXMuZmlyZT1mdW5jdGlvbihkLGUsZil7aWYoIWImJmFbZF0pe3ZhciBnPWFbZF0ubGVuZ3RoLGg9MCxpPSExLGs9bnVsbDtpZighdGhpcy5zaG91bGRGaXJlRXZlbnR8fHRoaXMuc2hvdWxkRmlyZUV2ZW50KGQsZSxmKSlmb3IoOyFpJiZnPmgmJmshPT0hMTspe2lmKGNbZF0pYVtkXVtoXS5hcHBseSh0aGlzLFtlLGZdKTtlbHNlIHRyeXtrPWFbZF1baF0uYXBwbHkodGhpcyxbZSxmXSl9Y2F0Y2gobCl7ai5qc1BsdW1iVXRpbC5sb2coXCJqc1BsdW1iOiBmaXJlIGZhaWxlZCBmb3IgZXZlbnQgXCIrZCtcIiA6IFwiK2wpfWgrKywobnVsbD09YXx8bnVsbD09YVtkXSkmJihpPSEwKX19cmV0dXJuIHRoaXN9LHRoaXMudW5iaW5kPWZ1bmN0aW9uKGIsYyl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpYT17fTtlbHNlIGlmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXtpZihcInN0cmluZ1wiPT10eXBlb2YgYilkZWxldGUgYVtiXTtlbHNlIGlmKGIuX19qc1BsdW1iKXt2YXIgZDtmb3IodmFyIGUgaW4gYi5fX2pzUGx1bWIpZD1iLl9fanNQbHVtYltlXSxqLmpzUGx1bWJVdGlsLnJlbW92ZShhW2RdfHxbXSxiKX19ZWxzZSAyPT09YXJndW1lbnRzLmxlbmd0aCYmai5qc1BsdW1iVXRpbC5yZW1vdmUoYVtiXXx8W10sYyk7cmV0dXJuIHRoaXN9LHRoaXMuZ2V0TGlzdGVuZXI9ZnVuY3Rpb24oYil7cmV0dXJuIGFbYl19LHRoaXMuc2V0U3VzcGVuZEV2ZW50cz1mdW5jdGlvbihhKXtiPWF9LHRoaXMuaXNTdXNwZW5kRXZlbnRzPWZ1bmN0aW9uKCl7cmV0dXJuIGJ9LHRoaXMuc2lsZW50bHk9ZnVuY3Rpb24oYSl7dGhpcy5zZXRTdXNwZW5kRXZlbnRzKCEwKTt0cnl7YSgpfWNhdGNoKGIpe2ouanNQbHVtYlV0aWwubG9nKFwiQ2Fubm90IGV4ZWN1dGUgc2lsZW50IGZ1bmN0aW9uIFwiK2IpfXRoaXMuc2V0U3VzcGVuZEV2ZW50cyghMSl9LHRoaXMuY2xlYW51cExpc3RlbmVycz1mdW5jdGlvbigpe2Zvcih2YXIgYiBpbiBhKWFbYl09bnVsbH19LGouanNQbHVtYlV0aWwuRXZlbnRHZW5lcmF0b3IucHJvdG90eXBlPXtjbGVhbnVwOmZ1bmN0aW9uKCl7dGhpcy5jbGVhbnVwTGlzdGVuZXJzKCl9fSxcInVuZGVmaW5lZFwiIT10eXBlb2YgZXhwb3J0cyYmKGV4cG9ydHMuanNQbHVtYlV0aWw9ai5qc1BsdW1iVXRpbCl9LmNhbGwoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dGhpcyksZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgYT10aGlzO2EuanNQbHVtYlV0aWwubWF0Y2hlc1NlbGVjdG9yPWZ1bmN0aW9uKGEsYixjKXtjPWN8fGEucGFyZW50Tm9kZTtmb3IodmFyIGQ9Yy5xdWVyeVNlbGVjdG9yQWxsKGIpLGU9MDtlPGQubGVuZ3RoO2UrKylpZihkW2VdPT09YSlyZXR1cm4hMDtyZXR1cm4hMX0sYS5qc1BsdW1iVXRpbC5jb25zdW1lPWZ1bmN0aW9uKGEsYil7YS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTphLnJldHVyblZhbHVlPSExLCFiJiZhLnByZXZlbnREZWZhdWx0JiZhLnByZXZlbnREZWZhdWx0KCl9LGEuanNQbHVtYlV0aWwuc2l6ZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGMsZCxlKXthJiYoYS5zdHlsZS5oZWlnaHQ9ZStcInB4XCIsYS5oZWlnaHQ9ZSxhLnN0eWxlLndpZHRoPWQrXCJweFwiLGEud2lkdGg9ZCxhLnN0eWxlLmxlZnQ9YitcInB4XCIsYS5zdHlsZS50b3A9YytcInB4XCIpfX0uY2FsbChcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp0aGlzKSxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBhLGI9dGhpcyxjPVtdLGQ9Yi5qc1BsdW1iVXRpbCxlPWZ1bmN0aW9uKCl7cmV0dXJuXCJcIisobmV3IERhdGUpLmdldFRpbWUoKX0sZj1mdW5jdGlvbihhKXtpZihhLl9qc1BsdW1iLnBhaW50U3R5bGUmJmEuX2pzUGx1bWIuaG92ZXJQYWludFN0eWxlKXt2YXIgYj17fTtyLmV4dGVuZChiLGEuX2pzUGx1bWIucGFpbnRTdHlsZSksci5leHRlbmQoYixhLl9qc1BsdW1iLmhvdmVyUGFpbnRTdHlsZSksZGVsZXRlIGEuX2pzUGx1bWIuaG92ZXJQYWludFN0eWxlLGIuZ3JhZGllbnQmJmEuX2pzUGx1bWIucGFpbnRTdHlsZS5maWxsJiZkZWxldGUgYi5ncmFkaWVudCxhLl9qc1BsdW1iLmhvdmVyUGFpbnRTdHlsZT1ifX0sZz1bXCJ0YXBcIixcImRibHRhcFwiLFwiY2xpY2tcIixcImRibGNsaWNrXCIsXCJtb3VzZW92ZXJcIixcIm1vdXNlb3V0XCIsXCJtb3VzZW1vdmVcIixcIm1vdXNlZG93blwiLFwibW91c2V1cFwiLFwiY29udGV4dG1lbnVcIl0saD1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLmdldEF0dGFjaGVkRWxlbWVudHMoKTtpZihlKWZvcih2YXIgZj0wLGc9ZS5sZW5ndGg7Zz5mO2YrKylkJiZkPT1lW2ZdfHxlW2ZdLnNldEhvdmVyKGIsITAsYyl9LGk9ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/bnVsbDphLnNwbGl0KFwiIFwiKX0saj1mdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkIGluIGIpYVtkXT1jfSxrPWZ1bmN0aW9uKGEsYil7Yj1kLmlzQXJyYXkoYil8fG51bGwhPWIubGVuZ3RoJiYhZC5pc1N0cmluZyhiKT9iOltiXTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl0cnl7YS5hcHBseShiW2NdLFtiW2NdXSl9Y2F0Y2goZSl7ZC5sb2coXCIuZWFjaCBpdGVyYXRpb24gZmFpbGVkIDogXCIrZSl9fSxsPWZ1bmN0aW9uKGEsYixjKXtpZihhLmdldERlZmF1bHRUeXBlKXt2YXIgZT1hLmdldFR5cGVEZXNjcmlwdG9yKCksZj17fSxnPWEuZ2V0RGVmYXVsdFR5cGUoKSxoPWQubWVyZ2Uoe30sZyk7aihmLGcsXCJfX2RlZmF1bHRcIik7Zm9yKHZhciBpPTAsaz1hLl9qc1BsdW1iLnR5cGVzLmxlbmd0aDtrPmk7aSsrKXt2YXIgbD1hLl9qc1BsdW1iLnR5cGVzW2ldO2lmKFwiX19kZWZhdWx0XCIhPT1sKXt2YXIgbT1hLl9qc1BsdW1iLmluc3RhbmNlLmdldFR5cGUobCxlKTtudWxsIT1tJiYoaD1kLm1lcmdlKGgsbSxbXCJjc3NDbGFzc1wiXSksaihmLG0sbCkpfX1iJiYoaD1kLnBvcHVsYXRlKGgsYixcIl9cIikpLGEuYXBwbHlUeXBlKGgsYyxmKSxjfHxhLnJlcGFpbnQoKX19LG09Yi5qc1BsdW1iVUlDb21wb25lbnQ9ZnVuY3Rpb24oYSl7ZC5FdmVudEdlbmVyYXRvci5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dmFyIGI9dGhpcyxjPWFyZ3VtZW50cyxlPWIuaWRQcmVmaXgsZj1lKyhuZXcgRGF0ZSkuZ2V0VGltZSgpO3RoaXMuX2pzUGx1bWI9e2luc3RhbmNlOmEuX2pzUGx1bWIscGFyYW1ldGVyczphLnBhcmFtZXRlcnN8fHt9LHBhaW50U3R5bGU6bnVsbCxob3ZlclBhaW50U3R5bGU6bnVsbCxwYWludFN0eWxlSW5Vc2U6bnVsbCxob3ZlcjohMSxiZWZvcmVEZXRhY2g6YS5iZWZvcmVEZXRhY2gsYmVmb3JlRHJvcDphLmJlZm9yZURyb3Asb3ZlcmxheVBsYWNlbWVudHM6W10saG92ZXJDbGFzczphLmhvdmVyQ2xhc3N8fGEuX2pzUGx1bWIuRGVmYXVsdHMuSG92ZXJDbGFzcyx0eXBlczpbXSx0eXBlQ2FjaGU6e319LHRoaXMuY2FjaGVUeXBlSXRlbT1mdW5jdGlvbihhLGIsYyl7dGhpcy5fanNQbHVtYi50eXBlQ2FjaGVbY109dGhpcy5fanNQbHVtYi50eXBlQ2FjaGVbY118fHt9LHRoaXMuX2pzUGx1bWIudHlwZUNhY2hlW2NdW2FdPWJ9LHRoaXMuZ2V0Q2FjaGVkVHlwZUl0ZW09ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5fanNQbHVtYi50eXBlQ2FjaGVbYl0/dGhpcy5fanNQbHVtYi50eXBlQ2FjaGVbYl1bYV06bnVsbH0sdGhpcy5nZXRJZD1mdW5jdGlvbigpe3JldHVybiBmfTt2YXIgZz1hLm92ZXJsYXlzfHxbXSxoPXt9O2lmKHRoaXMuZGVmYXVsdE92ZXJsYXlLZXlzKXtmb3IodmFyIGk9MDtpPHRoaXMuZGVmYXVsdE92ZXJsYXlLZXlzLmxlbmd0aDtpKyspQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoZyx0aGlzLl9qc1BsdW1iLmluc3RhbmNlLkRlZmF1bHRzW3RoaXMuZGVmYXVsdE92ZXJsYXlLZXlzW2ldXXx8W10pO2ZvcihpPTA7aTxnLmxlbmd0aDtpKyspe3ZhciBqPXIuY29udmVydFRvRnVsbE92ZXJsYXlTcGVjKGdbaV0pO2hbalsxXS5pZF09an19dmFyIGs9e292ZXJsYXlzOmgscGFyYW1ldGVyczphLnBhcmFtZXRlcnN8fHt9LHNjb3BlOmEuc2NvcGV8fHRoaXMuX2pzUGx1bWIuaW5zdGFuY2UuZ2V0RGVmYXVsdFNjb3BlKCl9O2lmKHRoaXMuZ2V0RGVmYXVsdFR5cGU9ZnVuY3Rpb24oKXtyZXR1cm4ga30sdGhpcy5hcHBlbmRUb0RlZmF1bHRUeXBlPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYiBpbiBhKWtbYl09YVtiXX0sYS5ldmVudHMpZm9yKGkgaW4gYS5ldmVudHMpYi5iaW5kKGksYS5ldmVudHNbaV0pO3RoaXMuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgYT1PYmplY3QuY3JlYXRlKHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlKTtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5hcHBseShhLGMpLGF9LmJpbmQodGhpcyksdGhpcy5pc0RldGFjaEFsbG93ZWQ9ZnVuY3Rpb24oYSl7dmFyIGI9ITA7aWYodGhpcy5fanNQbHVtYi5iZWZvcmVEZXRhY2gpdHJ5e2I9dGhpcy5fanNQbHVtYi5iZWZvcmVEZXRhY2goYSl9Y2F0Y2goYyl7ZC5sb2coXCJqc1BsdW1iOiBiZWZvcmVEZXRhY2ggY2FsbGJhY2sgZmFpbGVkXCIsYyl9cmV0dXJuIGJ9LHRoaXMuaXNEcm9wQWxsb3dlZD1mdW5jdGlvbihhLGIsYyxlLGYsZyxoKXt2YXIgaT10aGlzLl9qc1BsdW1iLmluc3RhbmNlLmNoZWNrQ29uZGl0aW9uKFwiYmVmb3JlRHJvcFwiLHtzb3VyY2VJZDphLHRhcmdldElkOmIsc2NvcGU6Yyxjb25uZWN0aW9uOmUsZHJvcEVuZHBvaW50OmYsc291cmNlOmcsdGFyZ2V0Omh9KTtpZih0aGlzLl9qc1BsdW1iLmJlZm9yZURyb3ApdHJ5e2k9dGhpcy5fanNQbHVtYi5iZWZvcmVEcm9wKHtzb3VyY2VJZDphLHRhcmdldElkOmIsc2NvcGU6Yyxjb25uZWN0aW9uOmUsZHJvcEVuZHBvaW50OmYsc291cmNlOmcsdGFyZ2V0Omh9KX1jYXRjaChqKXtkLmxvZyhcImpzUGx1bWI6IGJlZm9yZURyb3AgY2FsbGJhY2sgZmFpbGVkXCIsail9cmV0dXJuIGl9O3ZhciBsPVtdO3RoaXMuc2V0TGlzdGVuZXJDb21wb25lbnQ9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPTA7YjxsLmxlbmd0aDtiKyspbFtiXVszXT1hfX0sbj1mdW5jdGlvbihhLGIpe3ZhciBjPWEuX2pzUGx1bWIudHlwZXNbYl0sZD1hLl9qc1BsdW1iLmluc3RhbmNlLmdldFR5cGUoYyxhLmdldFR5cGVEZXNjcmlwdG9yKCkpO251bGwhPWQmJmQuY3NzQ2xhc3MmJmEuY2FudmFzJiZhLl9qc1BsdW1iLmluc3RhbmNlLnJlbW92ZUNsYXNzKGEuY2FudmFzLGQuY3NzQ2xhc3MpfTtkLmV4dGVuZChiLmpzUGx1bWJVSUNvbXBvbmVudCxkLkV2ZW50R2VuZXJhdG9yLHtnZXRQYXJhbWV0ZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuX2pzUGx1bWIucGFyYW1ldGVyc1thXX0sc2V0UGFyYW1ldGVyOmZ1bmN0aW9uKGEsYil7dGhpcy5fanNQbHVtYi5wYXJhbWV0ZXJzW2FdPWJ9LGdldFBhcmFtZXRlcnM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fanNQbHVtYi5wYXJhbWV0ZXJzfSxzZXRQYXJhbWV0ZXJzOmZ1bmN0aW9uKGEpe3RoaXMuX2pzUGx1bWIucGFyYW1ldGVycz1hfSxnZXRDbGFzczpmdW5jdGlvbigpe3JldHVybiByLmdldENsYXNzKHRoaXMuY2FudmFzKX0saGFzQ2xhc3M6ZnVuY3Rpb24oYSl7cmV0dXJuIHIuaGFzQ2xhc3ModGhpcy5jYW52YXMsYSl9LGFkZENsYXNzOmZ1bmN0aW9uKGEpe3IuYWRkQ2xhc3ModGhpcy5jYW52YXMsYSl9LHJlbW92ZUNsYXNzOmZ1bmN0aW9uKGEpe3IucmVtb3ZlQ2xhc3ModGhpcy5jYW52YXMsYSl9LHVwZGF0ZUNsYXNzZXM6ZnVuY3Rpb24oYSxiKXtyLnVwZGF0ZUNsYXNzZXModGhpcy5jYW52YXMsYSxiKX0sc2V0VHlwZTpmdW5jdGlvbihhLGIsYyl7dGhpcy5jbGVhclR5cGVzKCksdGhpcy5fanNQbHVtYi50eXBlcz1pKGEpfHxbXSxsKHRoaXMsYixjKX0sZ2V0VHlwZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9qc1BsdW1iLnR5cGVzfSxyZWFwcGx5VHlwZXM6ZnVuY3Rpb24oYSxiKXtsKHRoaXMsYSxiKX0saGFzVHlwZTpmdW5jdGlvbihhKXtyZXR1cm4tMSE9dGhpcy5fanNQbHVtYi50eXBlcy5pbmRleE9mKGEpfSxhZGRUeXBlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1pKGEpLGU9ITE7aWYobnVsbCE9ZCl7Zm9yKHZhciBmPTAsZz1kLmxlbmd0aDtnPmY7ZisrKXRoaXMuaGFzVHlwZShkW2ZdKXx8KHRoaXMuX2pzUGx1bWIudHlwZXMucHVzaChkW2ZdKSxlPSEwKTtlJiZsKHRoaXMsYixjKX19LHJlbW92ZVR5cGU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWkoYSksZT0hMSxmPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2pzUGx1bWIudHlwZXMuaW5kZXhPZihhKTtyZXR1cm4tMSE9Yj8obih0aGlzLGIpLHRoaXMuX2pzUGx1bWIudHlwZXMuc3BsaWNlKGIsMSksITApOiExfS5iaW5kKHRoaXMpO2lmKG51bGwhPWQpe2Zvcih2YXIgZz0wLGg9ZC5sZW5ndGg7aD5nO2crKyllPWYoZFtnXSl8fGU7ZSYmbCh0aGlzLGIsYyl9fSxjbGVhclR5cGVzOmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPXRoaXMuX2pzUGx1bWIudHlwZXMubGVuZ3RoLGQ9MDtjPmQ7ZCsrKW4odGhpcywwKSx0aGlzLl9qc1BsdW1iLnR5cGVzLnNwbGljZSgwLDEpO2wodGhpcyxhLGIpfSx0b2dnbGVUeXBlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1pKGEpO2lmKG51bGwhPWQpe2Zvcih2YXIgZT0wLGY9ZC5sZW5ndGg7Zj5lO2UrKyl7dmFyIGc9dGhpcy5fanNQbHVtYi50eXBlcy5pbmRleE9mKGRbZV0pOy0xIT1nPyhuKHRoaXMsZyksdGhpcy5fanNQbHVtYi50eXBlcy5zcGxpY2UoZywxKSk6dGhpcy5fanNQbHVtYi50eXBlcy5wdXNoKGRbZV0pfWwodGhpcyxiLGMpfX0sYXBwbHlUeXBlOmZ1bmN0aW9uKGEsYil7aWYodGhpcy5zZXRQYWludFN0eWxlKGEucGFpbnRTdHlsZSxiKSx0aGlzLnNldEhvdmVyUGFpbnRTdHlsZShhLmhvdmVyUGFpbnRTdHlsZSxiKSxhLnBhcmFtZXRlcnMpZm9yKHZhciBjIGluIGEucGFyYW1ldGVycyl0aGlzLnNldFBhcmFtZXRlcihjLGEucGFyYW1ldGVyc1tjXSk7dGhpcy5fanNQbHVtYi5wYWludFN0eWxlSW5Vc2U9dGhpcy5nZXRQYWludFN0eWxlKCl9LHNldFBhaW50U3R5bGU6ZnVuY3Rpb24oYSxiKXt0aGlzLl9qc1BsdW1iLnBhaW50U3R5bGU9YSx0aGlzLl9qc1BsdW1iLnBhaW50U3R5bGVJblVzZT10aGlzLl9qc1BsdW1iLnBhaW50U3R5bGUsZih0aGlzKSxifHx0aGlzLnJlcGFpbnQoKX0sZ2V0UGFpbnRTdHlsZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9qc1BsdW1iLnBhaW50U3R5bGV9LHNldEhvdmVyUGFpbnRTdHlsZTpmdW5jdGlvbihhLGIpe3RoaXMuX2pzUGx1bWIuaG92ZXJQYWludFN0eWxlPWEsZih0aGlzKSxifHx0aGlzLnJlcGFpbnQoKX0sZ2V0SG92ZXJQYWludFN0eWxlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2pzUGx1bWIuaG92ZXJQYWludFN0eWxlfSxkZXN0cm95OmZ1bmN0aW9uKGEpeyhhfHxudWxsPT10aGlzLnR5cGVJZCkmJih0aGlzLmNsZWFudXBMaXN0ZW5lcnMoKSx0aGlzLmNsb25lPW51bGwsdGhpcy5fanNQbHVtYj1udWxsKX0saXNIb3ZlcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9qc1BsdW1iLmhvdmVyfSxzZXRIb3ZlcjpmdW5jdGlvbihhLGIsYyl7aWYodGhpcy5fanNQbHVtYiYmIXRoaXMuX2pzUGx1bWIuaW5zdGFuY2UuY3VycmVudGx5RHJhZ2dpbmcmJiF0aGlzLl9qc1BsdW1iLmluc3RhbmNlLmlzSG92ZXJTdXNwZW5kZWQoKSl7aWYodGhpcy5fanNQbHVtYi5ob3Zlcj1hLG51bGwhPXRoaXMuY2FudmFzKXtpZihudWxsIT10aGlzLl9qc1BsdW1iLmluc3RhbmNlLmhvdmVyQ2xhc3Mpe3ZhciBkPWE/XCJhZGRDbGFzc1wiOlwicmVtb3ZlQ2xhc3NcIjt0aGlzLl9qc1BsdW1iLmluc3RhbmNlW2RdKHRoaXMuY2FudmFzLHRoaXMuX2pzUGx1bWIuaW5zdGFuY2UuaG92ZXJDbGFzcyl9bnVsbCE9dGhpcy5fanNQbHVtYi5ob3ZlckNsYXNzJiZ0aGlzLl9qc1BsdW1iLmluc3RhbmNlW2RdKHRoaXMuY2FudmFzLHRoaXMuX2pzUGx1bWIuaG92ZXJDbGFzcyl9bnVsbCE9dGhpcy5fanNQbHVtYi5ob3ZlclBhaW50U3R5bGUmJih0aGlzLl9qc1BsdW1iLnBhaW50U3R5bGVJblVzZT1hP3RoaXMuX2pzUGx1bWIuaG92ZXJQYWludFN0eWxlOnRoaXMuX2pzUGx1bWIucGFpbnRTdHlsZSx0aGlzLl9qc1BsdW1iLmluc3RhbmNlLmlzU3VzcGVuZERyYXdpbmcoKXx8KGM9Y3x8ZSgpLHRoaXMucmVwYWludCh7dGltZXN0YW1wOmMscmVjYWxjOiExfSkpKSx0aGlzLmdldEF0dGFjaGVkRWxlbWVudHMmJiFiJiZoKHRoaXMsYSxlKCksdGhpcyl9fX0pO3ZhciBvPTAscD1mdW5jdGlvbigpe3ZhciBhPW8rMTtyZXR1cm4gbysrLGF9LHE9Yi5qc1BsdW1iSW5zdGFuY2U9ZnVuY3Rpb24oZil7dGhpcy52ZXJzaW9uPVwiMi4zLjJcIixmJiZyLmV4dGVuZCh0aGlzLkRlZmF1bHRzLGYpLHRoaXMubG9nRW5hYmxlZD10aGlzLkRlZmF1bHRzLkxvZ0VuYWJsZWQsdGhpcy5fY29ubmVjdGlvblR5cGVzPXt9LHRoaXMuX2VuZHBvaW50VHlwZXM9e30sZC5FdmVudEdlbmVyYXRvci5hcHBseSh0aGlzKTt2YXIgaD10aGlzLGk9cCgpLGo9aC5iaW5kLGw9e30sbj0xLG89ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigzPT1hLm5vZGVUeXBlfHw4PT1hLm5vZGVUeXBlKXJldHVybntlbDphLHRleHQ6ITB9O3ZhciBiPWguZ2V0RWxlbWVudChhKTtyZXR1cm57ZWw6YixpZDpkLmlzU3RyaW5nKGEpJiZudWxsPT1iP2E6WihiKX19O3RoaXMuZ2V0SW5zdGFuY2VJbmRleD1mdW5jdGlvbigpe3JldHVybiBpfSx0aGlzLnNldFpvb209ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbj1hLGguZmlyZShcInpvb21cIixuKSxiJiZoLnJlcGFpbnRFdmVyeXRoaW5nKCksITB9LHRoaXMuZ2V0Wm9vbT1mdW5jdGlvbigpe3JldHVybiBufTtmb3IodmFyIHEgaW4gdGhpcy5EZWZhdWx0cylsW3FdPXRoaXMuRGVmYXVsdHNbcV07dmFyIHMsdD1bXTt0aGlzLnVuYmluZENvbnRhaW5lcj1mdW5jdGlvbigpe2lmKG51bGwhPXMmJnQubGVuZ3RoPjApZm9yKHZhciBhPTA7YTx0Lmxlbmd0aDthKyspaC5vZmYocyx0W2FdWzBdLHRbYV1bMV0pfSx0aGlzLnNldENvbnRhaW5lcj1mdW5jdGlvbihhKXt0aGlzLnVuYmluZENvbnRhaW5lcigpLGE9dGhpcy5nZXRFbGVtZW50KGEpLHRoaXMuc2VsZWN0KCkuZWFjaChmdW5jdGlvbihiKXtiLm1vdmVQYXJlbnQoYSl9KSx0aGlzLnNlbGVjdEVuZHBvaW50cygpLmVhY2goZnVuY3Rpb24oYil7Yi5tb3ZlUGFyZW50KGEpfSk7dmFyIGI9cztzPWEsdC5sZW5ndGg9MDtmb3IodmFyIGM9e2VuZHBvaW50Y2xpY2s6XCJlbmRwb2ludENsaWNrXCIsZW5kcG9pbnRkYmxjbGljazpcImVuZHBvaW50RGJsQ2xpY2tcIn0sZD1mdW5jdGlvbihhLGIsZCl7dmFyIGU9Yi5zcmNFbGVtZW50fHxiLnRhcmdldCxmPShlJiZlLnBhcmVudE5vZGU/ZS5wYXJlbnROb2RlLl9qc1BsdW1iOm51bGwpfHwoZT9lLl9qc1BsdW1iOm51bGwpfHwoZSYmZS5wYXJlbnROb2RlJiZlLnBhcmVudE5vZGUucGFyZW50Tm9kZT9lLnBhcmVudE5vZGUucGFyZW50Tm9kZS5fanNQbHVtYjpudWxsKTtpZihmKXtmLmZpcmUoYSxmLGIpO3ZhciBnPWQ/Y1tkK2FdfHxhOmE7aC5maXJlKGcsZi5jb21wb25lbnR8fGYsYil9fSxlPWZ1bmN0aW9uKGEsYixjKXt0LnB1c2goW2EsY10pLGgub24ocyxhLGIsYyl9LGY9ZnVuY3Rpb24oYSl7ZShhLFwiLmp0ay1jb25uZWN0b3JcIixmdW5jdGlvbihiKXtkKGEsYil9KSxlKGEsXCIuanRrLWVuZHBvaW50XCIsZnVuY3Rpb24oYil7ZChhLGIsXCJlbmRwb2ludFwiKX0pLGUoYSxcIi5qdGstb3ZlcmxheVwiLGZ1bmN0aW9uKGIpe2QoYSxiKX0pfSxpPTA7aTxnLmxlbmd0aDtpKyspZihnW2ldKTtmb3IodmFyIGogaW4geil7dmFyIGs9eltqXS5lbDtrLnBhcmVudE5vZGU9PT1iJiYoYi5yZW1vdmVDaGlsZChrKSxzLmFwcGVuZENoaWxkKGspKX19LHRoaXMuZ2V0Q29udGFpbmVyPWZ1bmN0aW9uKCl7cmV0dXJuIHN9LHRoaXMuYmluZD1mdW5jdGlvbihhLGIpe1wicmVhZHlcIj09PWEmJnY/YigpOmouYXBwbHkoaCxbYSxiXSl9LGguaW1wb3J0RGVmYXVsdHM9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiIGluIGEpaC5EZWZhdWx0c1tiXT1hW2JdO3JldHVybiBhLkNvbnRhaW5lciYmaC5zZXRDb250YWluZXIoYS5Db250YWluZXIpLGh9LGgucmVzdG9yZURlZmF1bHRzPWZ1bmN0aW9uKCl7cmV0dXJuIGguRGVmYXVsdHM9ci5leHRlbmQoe30sbCksaH07dmFyIHU9bnVsbCx2PSExLHc9W10seD17fSx5PXt9LHo9e30sQT17fSxCPXt9LEM9e30sRD0hMSxFPVtdLEY9ITEsRz1udWxsLEg9dGhpcy5EZWZhdWx0cy5TY29wZSxJPTEsSj1mdW5jdGlvbigpe3JldHVyblwiXCIrSSsrfSxLPWZ1bmN0aW9uKGEsYil7cz9zLmFwcGVuZENoaWxkKGEpOmI/dGhpcy5nZXRFbGVtZW50KGIpLmFwcGVuZENoaWxkKGEpOnRoaXMuYXBwZW5kVG9Sb290KGEpfS5iaW5kKHRoaXMpLEw9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIUYpe3ZhciBmLGc9WihhKSxpPWguZ2V0RHJhZ01hbmFnZXIoKTtpJiYoZj1pLmdldEVsZW1lbnRzRm9yRHJhZ2dhYmxlKGcpKSxudWxsPT1jJiYoYz1lKCkpO3ZhciBqPXJiKHtlbElkOmcsb2Zmc2V0OmIscmVjYWxjOiExLHRpbWVzdGFtcDpjfSk7aWYoZiYmaiYmai5vKWZvcih2YXIgayBpbiBmKXJiKHtlbElkOmZba10uaWQsb2Zmc2V0OntsZWZ0Omouby5sZWZ0K2Zba10ub2Zmc2V0LmxlZnQsdG9wOmouby50b3ArZltrXS5vZmZzZXQudG9wfSxyZWNhbGM6ITEsdGltZXN0YW1wOmN9KTtpZihoLmFuY2hvck1hbmFnZXIucmVkcmF3KGcsYixjLG51bGwsZCksZilmb3IodmFyIGwgaW4gZiloLmFuY2hvck1hbmFnZXIucmVkcmF3KGZbbF0uaWQsYixjLGZbbF0ub2Zmc2V0LGQsITApfX0sTT1mdW5jdGlvbihhKXtyZXR1cm4geVthXX0sTj1mdW5jdGlvbihhLGIsYyxlLGYpe2lmKCFyLmhlYWRsZXNzKXt2YXIgZz1udWxsPT1iPyExOmI7aWYoZyYmci5pc0RyYWdTdXBwb3J0ZWQoYSxoKSl7dmFyIGk9Y3x8aC5EZWZhdWx0cy5EcmFnT3B0aW9ucztpZihpPXIuZXh0ZW5kKHt9LGkpLHIuaXNBbHJlYWR5RHJhZ2dhYmxlKGEsaCkpYy5mb3JjZSYmaC5pbml0RHJhZ2dhYmxlKGEsaSk7ZWxzZXt2YXIgaj1yLmRyYWdFdmVudHMuZHJhZyxrPXIuZHJhZ0V2ZW50cy5zdG9wLGw9ci5kcmFnRXZlbnRzLnN0YXJ0LG09ITE7cWIoZSxhKSxpW2xdPWQud3JhcChpW2xdLGZ1bmN0aW9uKCl7cmV0dXJuIGguc2V0SG92ZXJTdXNwZW5kZWQoITApLGguc2VsZWN0KHtzb3VyY2U6YX0pLmFkZENsYXNzKGguZWxlbWVudERyYWdnaW5nQ2xhc3MrXCIgXCIraC5zb3VyY2VFbGVtZW50RHJhZ2dpbmdDbGFzcywhMCksaC5zZWxlY3Qoe3RhcmdldDphfSkuYWRkQ2xhc3MoaC5lbGVtZW50RHJhZ2dpbmdDbGFzcytcIiBcIitoLnRhcmdldEVsZW1lbnREcmFnZ2luZ0NsYXNzLCEwKSxoLnNldENvbm5lY3Rpb25CZWluZ0RyYWdnZWQoITApLGkuY2FuRHJhZz9jLmNhbkRyYWcoKTp2b2lkIDB9LCExKSxpW2pdPWQud3JhcChpW2pdLGZ1bmN0aW9uKCl7dmFyIGI9aC5nZXRVSVBvc2l0aW9uKGFyZ3VtZW50cyxoLmdldFpvb20oKSk7bnVsbCE9YiYmKEwoYSxiLG51bGwsITApLG0mJmguYWRkQ2xhc3MoYSxcImp0ay1kcmFnZ2VkXCIpLG09ITApfSksaVtrXT1kLndyYXAoaVtrXSxmdW5jdGlvbigpe2Zvcih2YXIgYSxiPWFyZ3VtZW50c1swXS5zZWxlY3Rpb24sYz1mdW5jdGlvbihiKXtudWxsIT1iWzFdJiYoYT1oLmdldFVJUG9zaXRpb24oW3tlbDpiWzJdLmVsLHBvczpbYlsxXS5sZWZ0LGJbMV0udG9wXX1dKSxMKGJbMl0uZWwsYSkpLGgucmVtb3ZlQ2xhc3MoYlswXSxcImp0ay1kcmFnZ2VkXCIpLGguc2VsZWN0KHtzb3VyY2U6YlsyXS5lbH0pLnJlbW92ZUNsYXNzKGguZWxlbWVudERyYWdnaW5nQ2xhc3MrXCIgXCIraC5zb3VyY2VFbGVtZW50RHJhZ2dpbmdDbGFzcywhMCksaC5zZWxlY3Qoe3RhcmdldDpiWzJdLmVsfSkucmVtb3ZlQ2xhc3MoaC5lbGVtZW50RHJhZ2dpbmdDbGFzcytcIiBcIitoLnRhcmdldEVsZW1lbnREcmFnZ2luZ0NsYXNzLCEwKSxoLmdldERyYWdNYW5hZ2VyKCkuZHJhZ0VuZGVkKGJbMl0uZWwpfSxkPTA7ZDxiLmxlbmd0aDtkKyspYyhiW2RdKTttPSExLGguc2V0SG92ZXJTdXNwZW5kZWQoITEpLGguc2V0Q29ubmVjdGlvbkJlaW5nRHJhZ2dlZCghMSl9KTt2YXIgbj1aKGEpO0Nbbl09ITA7dmFyIG89Q1tuXTtpLmRpc2FibGVkPW51bGw9PW8/ITE6IW8saC5pbml0RHJhZ2dhYmxlKGEsaSksaC5nZXREcmFnTWFuYWdlcigpLnJlZ2lzdGVyKGEpLGYmJmguZmlyZShcImVsZW1lbnREcmFnZ2FibGVcIix7ZWw6YSxvcHRpb25zOml9KX19fX0sTz1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1hLnNjb3BlLnNwbGl0KC9cXHMvKSxkPWIuc2NvcGUuc3BsaXQoL1xccy8pLGU9MDtlPGMubGVuZ3RoO2UrKylmb3IodmFyIGY9MDtmPGQubGVuZ3RoO2YrKylpZihkW2ZdPT1jW2VdKXJldHVybiEwO3JldHVybiExfSxQPWZ1bmN0aW9uKGEsYil7dmFyIGM9ci5leHRlbmQoe30sYSk7aWYoYiYmci5leHRlbmQoYyxiKSxjLnNvdXJjZSYmKGMuc291cmNlLmVuZHBvaW50P2Muc291cmNlRW5kcG9pbnQ9Yy5zb3VyY2U6Yy5zb3VyY2U9aC5nZXRFbGVtZW50KGMuc291cmNlKSksYy50YXJnZXQmJihjLnRhcmdldC5lbmRwb2ludD9jLnRhcmdldEVuZHBvaW50PWMudGFyZ2V0OmMudGFyZ2V0PWguZ2V0RWxlbWVudChjLnRhcmdldCkpLGEudXVpZHMmJihjLnNvdXJjZUVuZHBvaW50PU0oYS51dWlkc1swXSksYy50YXJnZXRFbmRwb2ludD1NKGEudXVpZHNbMV0pKSxjLnNvdXJjZUVuZHBvaW50JiZjLnNvdXJjZUVuZHBvaW50LmlzRnVsbCgpKXJldHVybiBkLmxvZyhoLFwiY291bGQgbm90IGFkZCBjb25uZWN0aW9uOyBzb3VyY2UgZW5kcG9pbnQgaXMgZnVsbFwiKSx2b2lkIDA7aWYoYy50YXJnZXRFbmRwb2ludCYmYy50YXJnZXRFbmRwb2ludC5pc0Z1bGwoKSlyZXR1cm4gZC5sb2coaCxcImNvdWxkIG5vdCBhZGQgY29ubmVjdGlvbjsgdGFyZ2V0IGVuZHBvaW50IGlzIGZ1bGxcIiksdm9pZCAwO2lmKCFjLnR5cGUmJmMuc291cmNlRW5kcG9pbnQmJihjLnR5cGU9Yy5zb3VyY2VFbmRwb2ludC5jb25uZWN0aW9uVHlwZSksYy5zb3VyY2VFbmRwb2ludCYmYy5zb3VyY2VFbmRwb2ludC5jb25uZWN0b3JPdmVybGF5cyl7Yy5vdmVybGF5cz1jLm92ZXJsYXlzfHxbXTtmb3IodmFyIGU9MCxmPWMuc291cmNlRW5kcG9pbnQuY29ubmVjdG9yT3ZlcmxheXMubGVuZ3RoO2Y+ZTtlKyspYy5vdmVybGF5cy5wdXNoKGMuc291cmNlRW5kcG9pbnQuY29ubmVjdG9yT3ZlcmxheXNbZV0pfWMuc291cmNlRW5kcG9pbnQmJmMuc291cmNlRW5kcG9pbnQuc2NvcGUmJihjLnNjb3BlPWMuc291cmNlRW5kcG9pbnQuc2NvcGUpLCFjW1wicG9pbnRlci1ldmVudHNcIl0mJmMuc291cmNlRW5kcG9pbnQmJmMuc291cmNlRW5kcG9pbnQuY29ubmVjdG9yUG9pbnRlckV2ZW50cyYmKGNbXCJwb2ludGVyLWV2ZW50c1wiXT1jLnNvdXJjZUVuZHBvaW50LmNvbm5lY3RvclBvaW50ZXJFdmVudHMpO3ZhciBnPWZ1bmN0aW9uKGEsYil7dmFyIGM9ci5leHRlbmQoe30sYSk7Zm9yKHZhciBkIGluIGIpYltkXSYmKGNbZF09YltkXSk7cmV0dXJuIGN9LGk9ZnVuY3Rpb24oYSxiLGQpe3JldHVybiBoLmFkZEVuZHBvaW50KGEsZyhiLHthbmNob3I6Yy5hbmNob3JzP2MuYW5jaG9yc1tkXTpjLmFuY2hvcixlbmRwb2ludDpjLmVuZHBvaW50cz9jLmVuZHBvaW50c1tkXTpjLmVuZHBvaW50LHBhaW50U3R5bGU6Yy5lbmRwb2ludFN0eWxlcz9jLmVuZHBvaW50U3R5bGVzW2RdOmMuZW5kcG9pbnRTdHlsZSxob3ZlclBhaW50U3R5bGU6Yy5lbmRwb2ludEhvdmVyU3R5bGVzP2MuZW5kcG9pbnRIb3ZlclN0eWxlc1tkXTpjLmVuZHBvaW50SG92ZXJTdHlsZX0pKX0saj1mdW5jdGlvbihhLGIsZCxlKXtpZihjW2FdJiYhY1thXS5lbmRwb2ludCYmIWNbYStcIkVuZHBvaW50XCJdJiYhYy5uZXdDb25uZWN0aW9uKXt2YXIgZj1aKGNbYV0pLGc9ZFtmXTtpZihnPWc/Z1tlXTpudWxsKXtpZighZy5lbmFibGVkKXJldHVybiExO3ZhciBoPW51bGwhPWcuZW5kcG9pbnQmJmcuZW5kcG9pbnQuX2pzUGx1bWI/Zy5lbmRwb2ludDppKGNbYV0sZy5kZWYsYik7aWYoaC5pc0Z1bGwoKSlyZXR1cm4hMTtjW2ErXCJFbmRwb2ludFwiXT1oLCFjLnNjb3BlJiZnLmRlZi5zY29wZSYmKGMuc2NvcGU9Zy5kZWYuc2NvcGUpLGguX2RvTm90RGVsZXRlT25EZXRhY2g9ITEsaC5fZGVsZXRlT25EZXRhY2g9ITAsZy51bmlxdWVFbmRwb2ludCYmKGcuZW5kcG9pbnQ/aC5maW5hbEVuZHBvaW50PWcuZW5kcG9pbnQ6KGcuZW5kcG9pbnQ9aCxoLl9kZWxldGVPbkRldGFjaD0hMSxoLl9kb05vdERlbGV0ZU9uRGV0YWNoPSEwKSl9fX07cmV0dXJuIGooXCJzb3VyY2VcIiwwLHRoaXMuc291cmNlRW5kcG9pbnREZWZpbml0aW9ucyxjLnR5cGV8fFwiZGVmYXVsdFwiKSE9PSExJiZqKFwidGFyZ2V0XCIsMSx0aGlzLnRhcmdldEVuZHBvaW50RGVmaW5pdGlvbnMsYy50eXBlfHxcImRlZmF1bHRcIikhPT0hMT8oYy5zb3VyY2VFbmRwb2ludCYmYy50YXJnZXRFbmRwb2ludCYmKE8oYy5zb3VyY2VFbmRwb2ludCxjLnRhcmdldEVuZHBvaW50KXx8KGM9bnVsbCkpLGMpOnZvaWQgMH0uYmluZChoKSxRPWZ1bmN0aW9uKGEpe3ZhciBiPWguRGVmYXVsdHMuQ29ubmVjdGlvblR5cGV8fGguZ2V0RGVmYXVsdENvbm5lY3Rpb25UeXBlKCk7YS5fanNQbHVtYj1oLGEubmV3Q29ubmVjdGlvbj1RLGEubmV3RW5kcG9pbnQ9UyxhLmVuZHBvaW50c0J5VVVJRD15LGEuZW5kcG9pbnRzQnlFbGVtZW50PXgsYS5maW5hbGlzZUNvbm5lY3Rpb249UixhLmlkPVwiY29uX1wiK0ooKTt2YXIgYz1uZXcgYihhKTtyZXR1cm4gYy5pc0RldGFjaGFibGUoKSYmKGMuZW5kcG9pbnRzWzBdLmluaXREcmFnZ2FibGUoXCJfanNQbHVtYlNvdXJjZVwiKSxjLmVuZHBvaW50c1sxXS5pbml0RHJhZ2dhYmxlKFwiX2pzUGx1bWJUYXJnZXRcIikpLGN9LFI9aC5maW5hbGlzZUNvbm5lY3Rpb249ZnVuY3Rpb24oYSxiLGMsZCl7aWYoYj1ifHx7fSxhLnN1c3BlbmRlZEVuZHBvaW50fHx3LnB1c2goYSksYS5wZW5kaW5nPW51bGwsYS5lbmRwb2ludHNbMF0uaXNUZW1wb3JhcnlTb3VyY2U9ITEsZCE9PSExJiZoLmFuY2hvck1hbmFnZXIubmV3Q29ubmVjdGlvbihhKSxMKGEuc291cmNlKSwhYi5kb05vdEZpcmVDb25uZWN0aW9uRXZlbnQmJmIuZmlyZUV2ZW50IT09ITEpe3ZhciBlPXtjb25uZWN0aW9uOmEsc291cmNlOmEuc291cmNlLHRhcmdldDphLnRhcmdldCxzb3VyY2VJZDphLnNvdXJjZUlkLHRhcmdldElkOmEudGFyZ2V0SWQsc291cmNlRW5kcG9pbnQ6YS5lbmRwb2ludHNbMF0sdGFyZ2V0RW5kcG9pbnQ6YS5lbmRwb2ludHNbMV19O2guZmlyZShcImNvbm5lY3Rpb25cIixlLGMpfX0sUz1mdW5jdGlvbihhLGIpe3ZhciBjPWguRGVmYXVsdHMuRW5kcG9pbnRUeXBlfHxyLkVuZHBvaW50LGQ9ci5leHRlbmQoe30sYSk7ZC5fanNQbHVtYj1oLGQubmV3Q29ubmVjdGlvbj1RLGQubmV3RW5kcG9pbnQ9UyxkLmVuZHBvaW50c0J5VVVJRD15LGQuZW5kcG9pbnRzQnlFbGVtZW50PXgsZC5maXJlRGV0YWNoRXZlbnQ9YWIsZC5lbGVtZW50SWQ9Ynx8WihkLnNvdXJjZSk7dmFyIGU9bmV3IGMoZCk7cmV0dXJuIGUuaWQ9XCJlcF9cIitKKCkscWIoZC5lbGVtZW50SWQsZC5zb3VyY2UpLHIuaGVhZGxlc3N8fGguZ2V0RHJhZ01hbmFnZXIoKS5lbmRwb2ludEFkZGVkKGQuc291cmNlLGIpLGV9LFQ9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXhbYV07aWYoZCYmZC5sZW5ndGgpZm9yKHZhciBlPTAsZj1kLmxlbmd0aDtmPmU7ZSsrKXtmb3IodmFyIGc9MCxoPWRbZV0uY29ubmVjdGlvbnMubGVuZ3RoO2g+ZztnKyspe3ZhciBpPWIoZFtlXS5jb25uZWN0aW9uc1tnXSk7aWYoaSlyZXR1cm59YyYmYyhkW2VdKX19LFU9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gci5lYWNoKGEsZnVuY3Rpb24oYSl7aC5pc0RyYWdTdXBwb3J0ZWQoYSkmJihDW2guZ2V0QXR0cmlidXRlKGEsXCJpZFwiKV09YixoLnNldEVsZW1lbnREcmFnZ2FibGUoYSxiKSl9KX0sVj1mdW5jdGlvbihhLGIsYyl7Yj1cImJsb2NrXCI9PT1iO3ZhciBkPW51bGw7YyYmKGQ9ZnVuY3Rpb24oYSl7YS5zZXRWaXNpYmxlKGIsITAsITApfSk7dmFyIGU9byhhKTtUKGUuaWQsZnVuY3Rpb24oYSl7aWYoYiYmYyl7dmFyIGQ9YS5zb3VyY2VJZD09PWUuaWQ/MTowO2EuZW5kcG9pbnRzW2RdLmlzVmlzaWJsZSgpJiZhLnNldFZpc2libGUoITApfWVsc2UgYS5zZXRWaXNpYmxlKGIpfSxkKX0sVz1mdW5jdGlvbihhKXt2YXIgYjtyZXR1cm4gci5lYWNoKGEsZnVuY3Rpb24oYSl7dmFyIGM9aC5nZXRBdHRyaWJ1dGUoYSxcImlkXCIpO3JldHVybiBiPW51bGw9PUNbY10/ITE6Q1tjXSxiPSFiLENbY109YixoLnNldERyYWdnYWJsZShhLGIpLGJ9LmJpbmQodGhpcykpLGJ9LFg9ZnVuY3Rpb24oYSxiKXt2YXIgYz1udWxsO2ImJihjPWZ1bmN0aW9uKGEpe3ZhciBiPWEuaXNWaXNpYmxlKCk7YS5zZXRWaXNpYmxlKCFiKX0pLFQoYSxmdW5jdGlvbihhKXt2YXIgYj1hLmlzVmlzaWJsZSgpO2Euc2V0VmlzaWJsZSghYil9LGMpfSxZPWZ1bmN0aW9uKGEpe3ZhciBiPUFbYV07cmV0dXJuIGI/e286YixzOkVbYV19OnJiKHtlbElkOmF9KX0sWj1mdW5jdGlvbihhLGIsYyl7aWYoZC5pc1N0cmluZyhhKSlyZXR1cm4gYTtpZihudWxsPT1hKXJldHVybiBudWxsO3ZhciBlPWguZ2V0QXR0cmlidXRlKGEsXCJpZFwiKTtyZXR1cm4gZSYmXCJ1bmRlZmluZWRcIiE9PWV8fCgyPT1hcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/ZT1iOigxPT1hcmd1bWVudHMubGVuZ3RofHwzPT1hcmd1bWVudHMubGVuZ3RoJiYhYXJndW1lbnRzWzJdKSYmKGU9XCJqc1BsdW1iX1wiK2krXCJfXCIrSigpKSxjfHxoLnNldEF0dHJpYnV0ZShhLFwiaWRcIixlKSksZX07dGhpcy5zZXRDb25uZWN0aW9uQmVpbmdEcmFnZ2VkPWZ1bmN0aW9uKGEpe0Q9YX0sdGhpcy5pc0Nvbm5lY3Rpb25CZWluZ0RyYWdnZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gRH0sdGhpcy5nZXRNYW5hZ2VkRWxlbWVudHM9ZnVuY3Rpb24oKXtyZXR1cm4gen0sdGhpcy5jb25uZWN0b3JDbGFzcz1cImp0ay1jb25uZWN0b3JcIix0aGlzLmNvbm5lY3Rvck91dGxpbmVDbGFzcz1cImp0ay1jb25uZWN0b3Itb3V0bGluZVwiLHRoaXMuZWRpdGFibGVDb25uZWN0b3JDbGFzcz1cImp0ay1jb25uZWN0b3ItZWRpdGFibGVcIix0aGlzLmNvbm5lY3RlZENsYXNzPVwianRrLWNvbm5lY3RlZFwiLHRoaXMuaG92ZXJDbGFzcz1cImp0ay1ob3ZlclwiLHRoaXMuZW5kcG9pbnRDbGFzcz1cImp0ay1lbmRwb2ludFwiLHRoaXMuZW5kcG9pbnRDb25uZWN0ZWRDbGFzcz1cImp0ay1lbmRwb2ludC1jb25uZWN0ZWRcIix0aGlzLmVuZHBvaW50RnVsbENsYXNzPVwianRrLWVuZHBvaW50LWZ1bGxcIix0aGlzLmVuZHBvaW50RHJvcEFsbG93ZWRDbGFzcz1cImp0ay1lbmRwb2ludC1kcm9wLWFsbG93ZWRcIix0aGlzLmVuZHBvaW50RHJvcEZvcmJpZGRlbkNsYXNzPVwianRrLWVuZHBvaW50LWRyb3AtZm9yYmlkZGVuXCIsdGhpcy5vdmVybGF5Q2xhc3M9XCJqdGstb3ZlcmxheVwiLHRoaXMuZHJhZ2dpbmdDbGFzcz1cImp0ay1kcmFnZ2luZ1wiLHRoaXMuZWxlbWVudERyYWdnaW5nQ2xhc3M9XCJqdGstZWxlbWVudC1kcmFnZ2luZ1wiLHRoaXMuc291cmNlRWxlbWVudERyYWdnaW5nQ2xhc3M9XCJqdGstc291cmNlLWVsZW1lbnQtZHJhZ2dpbmdcIix0aGlzLnRhcmdldEVsZW1lbnREcmFnZ2luZ0NsYXNzPVwianRrLXRhcmdldC1lbGVtZW50LWRyYWdnaW5nXCIsdGhpcy5lbmRwb2ludEFuY2hvckNsYXNzUHJlZml4PVwianRrLWVuZHBvaW50LWFuY2hvclwiLHRoaXMuaG92ZXJTb3VyY2VDbGFzcz1cImp0ay1zb3VyY2UtaG92ZXJcIix0aGlzLmhvdmVyVGFyZ2V0Q2xhc3M9XCJqdGstdGFyZ2V0LWhvdmVyXCIsdGhpcy5kcmFnU2VsZWN0Q2xhc3M9XCJqdGstZHJhZy1zZWxlY3RcIix0aGlzLkFuY2hvcnM9e30sdGhpcy5Db25uZWN0b3JzPXtzdmc6e319LHRoaXMuRW5kcG9pbnRzPXtzdmc6e319LHRoaXMuT3ZlcmxheXM9e3N2Zzp7fX0sdGhpcy5Db25uZWN0b3JSZW5kZXJlcnM9e30sdGhpcy5TVkc9XCJzdmdcIix0aGlzLmFkZEVuZHBvaW50PWZ1bmN0aW9uKGEsYixjKXtjPWN8fHt9O3ZhciBlPXIuZXh0ZW5kKHt9LGMpO3IuZXh0ZW5kKGUsYiksZS5lbmRwb2ludD1lLmVuZHBvaW50fHxoLkRlZmF1bHRzLkVuZHBvaW50LGUucGFpbnRTdHlsZT1lLnBhaW50U3R5bGV8fGguRGVmYXVsdHMuRW5kcG9pbnRTdHlsZTtmb3IodmFyIGY9W10sZz1kLmlzQXJyYXkoYSl8fG51bGwhPWEubGVuZ3RoJiYhZC5pc1N0cmluZyhhKT9hOlthXSxpPTAsaj1nLmxlbmd0aDtqPmk7aSsrKXtlLnNvdXJjZT1oLmdldEVsZW1lbnQoZ1tpXSksb2IoZS5zb3VyY2UpO3ZhciBrPVooZS5zb3VyY2UpLGw9UyhlLGspLG09cWIoayxlLnNvdXJjZSkuaW5mby5vO2QuYWRkVG9MaXN0KHgsayxsKSxGfHxsLnBhaW50KHthbmNob3JMb2M6bC5hbmNob3IuY29tcHV0ZSh7eHk6W20ubGVmdCxtLnRvcF0sd2g6RVtrXSxlbGVtZW50OmwsdGltZXN0YW1wOkd9KSx0aW1lc3RhbXA6R30pLGYucHVzaChsKSxsLl9kb05vdERlbGV0ZU9uRGV0YWNoPSEwfXJldHVybiAxPT1mLmxlbmd0aD9mWzBdOmZ9LHRoaXMuYWRkRW5kcG9pbnRzPWZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGU9W10sZj0wLGc9Yi5sZW5ndGg7Zz5mO2YrKyl7dmFyIGk9aC5hZGRFbmRwb2ludChhLGJbZl0sYyk7ZC5pc0FycmF5KGkpP0FycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGUsaSk6ZS5wdXNoKGkpfXJldHVybiBlfSx0aGlzLmFuaW1hdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCF0aGlzLmFuaW1hdGlvblN1cHBvcnRlZClyZXR1cm4hMTtjPWN8fHt9O3ZhciBlPWguZ2V0RWxlbWVudChhKSxmPVooZSksZz1yLmFuaW1FdmVudHMuc3RlcCxpPXIuYW5pbUV2ZW50cy5jb21wbGV0ZTtjW2ddPWQud3JhcChjW2ddLGZ1bmN0aW9uKCl7aC5yZXZhbGlkYXRlKGYpfSksY1tpXT1kLndyYXAoY1tpXSxmdW5jdGlvbigpe2gucmV2YWxpZGF0ZShmKX0pLGguZG9BbmltYXRlKGUsYixjKX0sdGhpcy5jaGVja0NvbmRpdGlvbj1mdW5jdGlvbihhKXt2YXIgYj1oLmdldExpc3RlbmVyKGEpLGM9ITA7aWYoYiYmYi5sZW5ndGg+MCl7dmFyIGU9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO3RyeXtmb3IodmFyIGY9MCxnPWIubGVuZ3RoO2c+ZjtmKyspYz1jJiZiW2ZdLmFwcGx5KGJbZl0sZSl9Y2F0Y2goaSl7ZC5sb2coaCxcImNhbm5vdCBjaGVjayBjb25kaXRpb24gW1wiK2ErXCJdXCIraSl9fXJldHVybiBjfSx0aGlzLmNvbm5lY3Q9ZnVuY3Rpb24oYSxiKXt2YXIgYyxlPVAoYSxiKTtpZihlKXtpZihudWxsPT1lLnNvdXJjZSYmbnVsbD09ZS5zb3VyY2VFbmRwb2ludClyZXR1cm4gZC5sb2coXCJDYW5ub3QgZXN0YWJsaXNoIGNvbm5lY3Rpb24gLSBzb3VyY2UgZG9lcyBub3QgZXhpc3RcIiksdm9pZCAwO2lmKG51bGw9PWUudGFyZ2V0JiZudWxsPT1lLnRhcmdldEVuZHBvaW50KXJldHVybiBkLmxvZyhcIkNhbm5vdCBlc3RhYmxpc2ggY29ubmVjdGlvbiAtIHRhcmdldCBkb2VzIG5vdCBleGlzdFwiKSx2b2lkIDA7b2IoZS5zb3VyY2UpLGM9UShlKSxSKGMsZSl9cmV0dXJuIGN9O3ZhciAkPVt7ZWw6XCJzb3VyY2VcIixlbElkOlwic291cmNlSWRcIixlcERlZnM6XCJzb3VyY2VFbmRwb2ludERlZmluaXRpb25zXCJ9LHtlbDpcInRhcmdldFwiLGVsSWQ6XCJ0YXJnZXRJZFwiLGVwRGVmczpcInRhcmdldEVuZHBvaW50RGVmaW5pdGlvbnNcIn1dLF89ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGUsZixnLGg9JFtjXSxpPWFbaC5lbElkXSxqPShhW2guZWxdLGEuZW5kcG9pbnRzW2NdKSxrPXtpbmRleDpjLG9yaWdpbmFsU291cmNlSWQ6MD09PWM/aTphLnNvdXJjZUlkLG5ld1NvdXJjZUlkOmEuc291cmNlSWQsb3JpZ2luYWxUYXJnZXRJZDoxPT1jP2k6YS50YXJnZXRJZCxuZXdUYXJnZXRJZDphLnRhcmdldElkLGNvbm5lY3Rpb246YX07aWYoYi5jb25zdHJ1Y3Rvcj09ci5FbmRwb2ludCllPWIsZS5hZGRDb25uZWN0aW9uKGEpLGI9ZS5lbGVtZW50O2Vsc2UgaWYoZj1aKGIpLGc9dGhpc1toLmVwRGVmc11bZl0sZj09PWFbaC5lbElkXSllPW51bGw7ZWxzZSBpZihnKWZvcih2YXIgbCBpbiBnKXtpZighZ1tsXS5lbmFibGVkKXJldHVybjtlPW51bGwhPWdbbF0uZW5kcG9pbnQmJmdbbF0uZW5kcG9pbnQuX2pzUGx1bWI/Z1tsXS5lbmRwb2ludDp0aGlzLmFkZEVuZHBvaW50KGIsZ1tsXS5kZWYpLGdbbF0udW5pcXVlRW5kcG9pbnQmJihnW2xdLmVuZHBvaW50PWUpLGUuX2RvTm90RGVsZXRlT25EZXRhY2g9ITEsZS5fZGVsZXRlT25EZXRhY2g9ITAsZS5hZGRDb25uZWN0aW9uKGEpfWVsc2UgZT1hLm1ha2VFbmRwb2ludCgwPT09YyxiLGYpLGUuX2RvTm90RGVsZXRlT25EZXRhY2g9ITEsZS5fZGVsZXRlT25EZXRhY2g9ITA7cmV0dXJuIG51bGwhPWUmJihqLmRldGFjaEZyb21Db25uZWN0aW9uKGEpLGEuZW5kcG9pbnRzW2NdPWUsYVtoLmVsXT1lLmVsZW1lbnQsYVtoLmVsSWRdPWUuZWxlbWVudElkLGtbMD09PWM/XCJuZXdTb3VyY2VJZFwiOlwibmV3VGFyZ2V0SWRcIl09ZS5lbGVtZW50SWQsYmIoayksZHx8YS5yZXBhaW50KCkpLGsuZWxlbWVudD1iLGt9LmJpbmQodGhpcyk7dGhpcy5zZXRTb3VyY2U9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPV8oYSxiLDAsYyk7dGhpcy5hbmNob3JNYW5hZ2VyLnNvdXJjZUNoYW5nZWQoZC5vcmlnaW5hbFNvdXJjZUlkLGQubmV3U291cmNlSWQsYSxkLmVsKX0sdGhpcy5zZXRUYXJnZXQ9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPV8oYSxiLDEsYyk7dGhpcy5hbmNob3JNYW5hZ2VyLnVwZGF0ZU90aGVyRW5kcG9pbnQoZC5vcmlnaW5hbFNvdXJjZUlkLGQub3JpZ2luYWxUYXJnZXRJZCxkLm5ld1RhcmdldElkLGEpfSx0aGlzLmRlbGV0ZUVuZHBvaW50PWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1cInN0cmluZ1wiPT10eXBlb2YgYT95W2FdOmE7cmV0dXJuIGQmJmguZGVsZXRlT2JqZWN0KHtlbmRwb2ludDpkLGRvbnRVcGRhdGVIb3ZlcjpiLGRlbGV0ZUF0dGFjaGVkT2JqZWN0czpjfSksaH0sdGhpcy5kZWxldGVFdmVyeUVuZHBvaW50PWZ1bmN0aW9uKCl7dmFyIGE9aC5zZXRTdXNwZW5kRHJhd2luZyghMCk7Zm9yKHZhciBiIGluIHgpe3ZhciBjPXhbYl07aWYoYyYmYy5sZW5ndGgpZm9yKHZhciBkPTAsZT1jLmxlbmd0aDtlPmQ7ZCsrKWguZGVsZXRlRW5kcG9pbnQoY1tkXSwhMCl9cmV0dXJuIHg9e30sej17fSx5PXt9LEE9e30sQj17fSxoLmFuY2hvck1hbmFnZXIucmVzZXQoKSxoLmdldERyYWdNYW5hZ2VyKCkucmVzZXQoKSxhfHxoLnNldFN1c3BlbmREcmF3aW5nKCExKSxofTt2YXIgYWI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWguRGVmYXVsdHMuQ29ubmVjdGlvblR5cGV8fGguZ2V0RGVmYXVsdENvbm5lY3Rpb25UeXBlKCksZT1hLmNvbnN0cnVjdG9yPT1kLGY9ZT97Y29ubmVjdGlvbjphLHNvdXJjZTphLnNvdXJjZSx0YXJnZXQ6YS50YXJnZXQsc291cmNlSWQ6YS5zb3VyY2VJZCx0YXJnZXRJZDphLnRhcmdldElkLHNvdXJjZUVuZHBvaW50OmEuZW5kcG9pbnRzWzBdLHRhcmdldEVuZHBvaW50OmEuZW5kcG9pbnRzWzFdfTphO2ImJmguZmlyZShcImNvbm5lY3Rpb25EZXRhY2hlZFwiLGYsYyksaC5maXJlKFwiaW50ZXJuYWwuY29ubmVjdGlvbkRldGFjaGVkXCIsZixjKSxoLmFuY2hvck1hbmFnZXIuY29ubmVjdGlvbkRldGFjaGVkKGYpfSxiYj1oLmZpcmVNb3ZlRXZlbnQ9ZnVuY3Rpb24oYSxiKXtoLmZpcmUoXCJjb25uZWN0aW9uTW92ZWRcIixhLGIpfTt0aGlzLnVucmVnaXN0ZXJFbmRwb2ludD1mdW5jdGlvbihhKXthLl9qc1BsdW1iLnV1aWQmJih5W2EuX2pzUGx1bWIudXVpZF09bnVsbCksaC5hbmNob3JNYW5hZ2VyLmRlbGV0ZUVuZHBvaW50KGEpO2Zvcih2YXIgYiBpbiB4KXt2YXIgYz14W2JdO2lmKGMpe2Zvcih2YXIgZD1bXSxlPTAsZj1jLmxlbmd0aDtmPmU7ZSsrKWNbZV0hPWEmJmQucHVzaChjW2VdKTt4W2JdPWR9eFtiXS5sZW5ndGg8MSYmZGVsZXRlIHhbYl19fSx0aGlzLmRldGFjaD1mdW5jdGlvbigpe2lmKDAhPT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgYT1oLkRlZmF1bHRzLkNvbm5lY3Rpb25UeXBlfHxoLmdldERlZmF1bHRDb25uZWN0aW9uVHlwZSgpLGI9YXJndW1lbnRzWzBdLmNvbnN0cnVjdG9yPT1hLGM9Mj09YXJndW1lbnRzLmxlbmd0aD9iP2FyZ3VtZW50c1sxXXx8e306YXJndW1lbnRzWzBdOmFyZ3VtZW50c1swXSxlPWMuZmlyZUV2ZW50IT09ITEsZj1jLmZvcmNlRGV0YWNoLGc9Yj9hcmd1bWVudHNbMF06Yy5jb25uZWN0aW9uLGk9Yj9udWxsOmMuZGVsZXRlQXR0YWNoZWRPYmplY3RzO2lmKGcpKGZ8fGQuZnVuY3Rpb25DaGFpbighMCwhMSxbW2cuZW5kcG9pbnRzWzBdLFwiaXNEZXRhY2hBbGxvd2VkXCIsW2ddXSxbZy5lbmRwb2ludHNbMV0sXCJpc0RldGFjaEFsbG93ZWRcIixbZ11dLFtnLFwiaXNEZXRhY2hBbGxvd2VkXCIsW2ddXSxbaCxcImNoZWNrQ29uZGl0aW9uXCIsW1wiYmVmb3JlRGV0YWNoXCIsZ11dXSkpJiZnLmVuZHBvaW50c1swXS5kZXRhY2goe2Nvbm5lY3Rpb246ZyxpZ25vcmVUYXJnZXQ6ITEsZm9yY2VEZXRhY2g6ITAsZmlyZUV2ZW50OmUsZGVsZXRlQXR0YWNoZWRPYmplY3RzOml9KTtlbHNle3ZhciBqPXIuZXh0ZW5kKHt9LGMpO2lmKGoudXVpZHMpTShqLnV1aWRzWzBdKS5kZXRhY2hGcm9tKE0oai51dWlkc1sxXSksZSk7ZWxzZSBpZihqLnNvdXJjZUVuZHBvaW50JiZqLnRhcmdldEVuZHBvaW50KWouc291cmNlRW5kcG9pbnQuZGV0YWNoRnJvbShqLnRhcmdldEVuZHBvaW50KTtlbHNle3ZhciBrPVooaC5nZXRFbGVtZW50KGouc291cmNlKSksbD1aKGguZ2V0RWxlbWVudChqLnRhcmdldCkpO1QoayxmdW5jdGlvbihhKXsoYS5zb3VyY2VJZD09ayYmYS50YXJnZXRJZD09bHx8YS50YXJnZXRJZD09ayYmYS5zb3VyY2VJZD09bCkmJmguY2hlY2tDb25kaXRpb24oXCJiZWZvcmVEZXRhY2hcIixhKSYmYS5lbmRwb2ludHNbMF0uZGV0YWNoKHtjb25uZWN0aW9uOmEsaWdub3JlVGFyZ2V0OiExLGZvcmNlRGV0YWNoOiEwLGZpcmVFdmVudDplfSl9KX19fX0sdGhpcy5kZXRhY2hBbGxDb25uZWN0aW9ucz1mdW5jdGlvbihhLGIpe2I9Ynx8e30sYT1oLmdldEVsZW1lbnQoYSk7dmFyIGM9WihhKSxkPXhbY107aWYoZCYmZC5sZW5ndGgpZm9yKHZhciBlPTAsZj1kLmxlbmd0aDtmPmU7ZSsrKWRbZV0uZGV0YWNoQWxsKGIuZmlyZUV2ZW50IT09ITEsYi5mb3JjZURldGFjaCk7cmV0dXJuIGh9LHRoaXMuZGV0YWNoRXZlcnlDb25uZWN0aW9uPWZ1bmN0aW9uKGEpe3JldHVybiBhPWF8fHt9LGguYmF0Y2goZnVuY3Rpb24oKXtmb3IodmFyIGIgaW4geCl7dmFyIGM9eFtiXTtpZihjJiZjLmxlbmd0aClmb3IodmFyIGQ9MCxlPWMubGVuZ3RoO2U+ZDtkKyspY1tkXS5kZXRhY2hBbGwoYS5maXJlRXZlbnQhPT0hMSxhLmZvcmNlRGV0YWNoKX13Lmxlbmd0aD0wfSksaH0sdGhpcy5kZWxldGVPYmplY3Q9ZnVuY3Rpb24oYSl7dmFyIGI9e2VuZHBvaW50czp7fSxjb25uZWN0aW9uczp7fSxlbmRwb2ludENvdW50OjAsY29ubmVjdGlvbkNvdW50OjB9LGM9KGEuZmlyZUV2ZW50IT09ITEsYS5kZWxldGVBdHRhY2hlZE9iamVjdHMhPT0hMSksZT1mdW5jdGlvbihkKXtpZihudWxsIT1kJiZudWxsPT1iLmNvbm5lY3Rpb25zW2QuaWRdJiYoYS5kb250VXBkYXRlSG92ZXJ8fG51bGw9PWQuX2pzUGx1bWJ8fGQuc2V0SG92ZXIoITEpLGIuY29ubmVjdGlvbnNbZC5pZF09ZCxiLmNvbm5lY3Rpb25Db3VudCsrLGMpKWZvcih2YXIgZT0wO2U8ZC5lbmRwb2ludHMubGVuZ3RoO2UrKylkLmVuZHBvaW50c1tlXS5fZGVsZXRlT25EZXRhY2gmJmYoZC5lbmRwb2ludHNbZV0pfSxmPWZ1bmN0aW9uKGQpe2lmKG51bGwhPWQmJm51bGw9PWIuZW5kcG9pbnRzW2QuaWRdJiYoYS5kb250VXBkYXRlSG92ZXJ8fG51bGw9PWQuX2pzUGx1bWJ8fGQuc2V0SG92ZXIoITEpLGIuZW5kcG9pbnRzW2QuaWRdPWQsYi5lbmRwb2ludENvdW50KyssYykpZm9yKHZhciBmPTA7ZjxkLmNvbm5lY3Rpb25zLmxlbmd0aDtmKyspe3ZhciBnPWQuY29ubmVjdGlvbnNbZl07ZShnKX19O2EuY29ubmVjdGlvbj9lKGEuY29ubmVjdGlvbik6ZihhLmVuZHBvaW50KTtmb3IodmFyIGcgaW4gYi5jb25uZWN0aW9ucyl7dmFyIGk9Yi5jb25uZWN0aW9uc1tnXTtpZihpLl9qc1BsdW1iKXtkLnJlbW92ZVdpdGhGdW5jdGlvbih3LGZ1bmN0aW9uKGEpe3JldHVybiBpLmlkPT1hLmlkfSksYWIoaSxhLmZpcmVFdmVudD09PSExPyExOiFpLnBlbmRpbmcsYS5vcmlnaW5hbEV2ZW50KTt2YXIgaj1udWxsPT1hLmRlbGV0ZUF0dGFjaGVkT2JqZWN0cz9udWxsOiFhLmRlbGV0ZUF0dGFjaGVkT2JqZWN0cztpLmVuZHBvaW50c1swXS5kZXRhY2hGcm9tQ29ubmVjdGlvbihpLG51bGwsaiksaS5lbmRwb2ludHNbMV0uZGV0YWNoRnJvbUNvbm5lY3Rpb24oaSxudWxsLGopLGkuY2xlYW51cCghMCksaS5kZXN0cm95KCEwKX19Zm9yKHZhciBrIGluIGIuZW5kcG9pbnRzKXt2YXIgbD1iLmVuZHBvaW50c1trXTtsLl9qc1BsdW1iJiYoaC51bnJlZ2lzdGVyRW5kcG9pbnQobCksbC5jbGVhbnVwKCEwKSxsLmRlc3Ryb3koITApKX1yZXR1cm4gYn0sdGhpcy5kcmFnZ2FibGU9ZnVuY3Rpb24oYSxiKXt2YXIgYztyZXR1cm4gayhmdW5jdGlvbihhKXtjPW8oYSksYy5lbCYmTihjLmVsLCEwLGIsYy5pZCwhMCl9LGEpLGh9LHRoaXMuZHJvcHBhYmxlPWZ1bmN0aW9uKGEsYil7dmFyIGM7cmV0dXJuIGI9Ynx8e30sYi5hbGxvd0xvb3BiYWNrPSExLGsoZnVuY3Rpb24oYSl7Yz1vKGEpLGMuZWwmJmguaW5pdERyb3BwYWJsZShjLmVsLGIpfSxhKSxofTt2YXIgY2I9ZnVuY3Rpb24oYSxiLGMsZCl7Zm9yKHZhciBlPTAsZj1hLmxlbmd0aDtmPmU7ZSsrKWFbZV1bYl0uYXBwbHkoYVtlXSxjKTtyZXR1cm4gZChhKX0sZGI9ZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZD1bXSxlPTAsZj1hLmxlbmd0aDtmPmU7ZSsrKWQucHVzaChbYVtlXVtiXS5hcHBseShhW2VdLGMpLGFbZV1dKTtyZXR1cm4gZH0sZWI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBjYihhLGIsYXJndW1lbnRzLGMpfX0sZmI9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZGIoYSxiLGFyZ3VtZW50cyl9fSxnYj1mdW5jdGlvbihhLGIpe3ZhciBjPVtdO2lmKGEpaWYoXCJzdHJpbmdcIj09dHlwZW9mIGEpe2lmKFwiKlwiPT09YSlyZXR1cm4gYTtjLnB1c2goYSl9ZWxzZSBpZihiKWM9YTtlbHNlIGlmKGEubGVuZ3RoKWZvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZT5kO2QrKyljLnB1c2gobyhhW2RdKS5pZCk7ZWxzZSBjLnB1c2gobyhhKS5pZCk7cmV0dXJuIGN9LGhiPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm5cIipcIj09PWE/ITA6YS5sZW5ndGg+MD8tMSE9YS5pbmRleE9mKGIpOiFjfTt0aGlzLmdldENvbm5lY3Rpb25zPWZ1bmN0aW9uKGEsYil7YT9hLmNvbnN0cnVjdG9yPT1TdHJpbmcmJihhPXtzY29wZTphfSk6YT17fTtmb3IodmFyIGM9YS5zY29wZXx8aC5nZXREZWZhdWx0U2NvcGUoKSxkPWdiKGMsITApLGU9Z2IoYS5zb3VyY2UpLGY9Z2IoYS50YXJnZXQpLGc9IWImJmQubGVuZ3RoPjE/e306W10saT1mdW5jdGlvbihhLGMpe2lmKCFiJiZkLmxlbmd0aD4xKXt2YXIgZT1nW2FdO251bGw9PWUmJihlPWdbYV09W10pLGUucHVzaChjKX1lbHNlIGcucHVzaChjKX0saj0wLGs9dy5sZW5ndGg7az5qO2orKyl7dmFyIGw9d1tqXSxtPWwucHJveGllcyYmbC5wcm94aWVzWzBdP2wucHJveGllc1swXS5vcmlnaW5hbEVwLmVsZW1lbnRJZDpsLnNvdXJjZUlkLG49bC5wcm94aWVzJiZsLnByb3hpZXNbMV0/bC5wcm94aWVzWzFdLm9yaWdpbmFsRXAuZWxlbWVudElkOmwudGFyZ2V0SWQ7aGIoZCxsLnNjb3BlKSYmaGIoZSxtKSYmaGIoZixuKSYmaShsLnNjb3BlLGwpfXJldHVybiBnfTt2YXIgaWI9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gZnVuY3Rpb24oYyl7Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtlPmQ7ZCsrKWMoYVtkXSk7cmV0dXJuIGIoYSl9fSxqYj1mdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIGFbYl19fSxrYj1mdW5jdGlvbihhLGIpe3ZhciBjLGQsZT17bGVuZ3RoOmEubGVuZ3RoLGVhY2g6aWIoYSxiKSxnZXQ6amIoYSl9LGY9W1wic2V0SG92ZXJcIixcInJlbW92ZUFsbE92ZXJsYXlzXCIsXCJzZXRMYWJlbFwiLFwiYWRkQ2xhc3NcIixcImFkZE92ZXJsYXlcIixcInJlbW92ZU92ZXJsYXlcIixcInJlbW92ZU92ZXJsYXlzXCIsXCJzaG93T3ZlcmxheVwiLFwiaGlkZU92ZXJsYXlcIixcInNob3dPdmVybGF5c1wiLFwiaGlkZU92ZXJsYXlzXCIsXCJzZXRQYWludFN0eWxlXCIsXCJzZXRIb3ZlclBhaW50U3R5bGVcIixcInNldFN1c3BlbmRFdmVudHNcIixcInNldFBhcmFtZXRlclwiLFwic2V0UGFyYW1ldGVyc1wiLFwic2V0VmlzaWJsZVwiLFwicmVwYWludFwiLFwiYWRkVHlwZVwiLFwidG9nZ2xlVHlwZVwiLFwicmVtb3ZlVHlwZVwiLFwicmVtb3ZlQ2xhc3NcIixcInNldFR5cGVcIixcImJpbmRcIixcInVuYmluZFwiXSxnPVtcImdldExhYmVsXCIsXCJnZXRPdmVybGF5XCIsXCJpc0hvdmVyXCIsXCJnZXRQYXJhbWV0ZXJcIixcImdldFBhcmFtZXRlcnNcIixcImdldFBhaW50U3R5bGVcIixcImdldEhvdmVyUGFpbnRTdHlsZVwiLFwiaXNWaXNpYmxlXCIsXCJoYXNUeXBlXCIsXCJnZXRUeXBlXCIsXCJpc1N1c3BlbmRFdmVudHNcIl07Zm9yKGM9MCxkPWYubGVuZ3RoO2Q+YztjKyspZVtmW2NdXT1lYihhLGZbY10sYik7Zm9yKGM9MCxkPWcubGVuZ3RoO2Q+YztjKyspZVtnW2NdXT1mYihhLGdbY10pO3JldHVybiBlfSxsYj1mdW5jdGlvbihhKXt2YXIgYj1rYihhLGxiKTtyZXR1cm4gci5leHRlbmQoYix7c2V0RGV0YWNoYWJsZTplYihhLFwic2V0RGV0YWNoYWJsZVwiLGxiKSxzZXRSZWF0dGFjaDplYihhLFwic2V0UmVhdHRhY2hcIixsYiksc2V0Q29ubmVjdG9yOmViKGEsXCJzZXRDb25uZWN0b3JcIixsYiksZGV0YWNoOmZ1bmN0aW9uKCl7Zm9yKHZhciBiPTAsYz1hLmxlbmd0aDtjPmI7YisrKWguZGV0YWNoKGFbYl0pfSxpc0RldGFjaGFibGU6ZmIoYSxcImlzRGV0YWNoYWJsZVwiKSxpc1JlYXR0YWNoOmZiKGEsXCJpc1JlYXR0YWNoXCIpfSl9LG1iPWZ1bmN0aW9uKGEpe3ZhciBiPWtiKGEsbWIpO3JldHVybiByLmV4dGVuZChiLHtzZXRFbmFibGVkOmViKGEsXCJzZXRFbmFibGVkXCIsbWIpLHNldEFuY2hvcjplYihhLFwic2V0QW5jaG9yXCIsbWIpLGlzRW5hYmxlZDpmYihhLFwiaXNFbmFibGVkXCIpLGRldGFjaEFsbDpmdW5jdGlvbigpe2Zvcih2YXIgYj0wLGM9YS5sZW5ndGg7Yz5iO2IrKylhW2JdLmRldGFjaEFsbCgpfSxyZW1vdmU6ZnVuY3Rpb24oKXtmb3IodmFyIGI9MCxjPWEubGVuZ3RoO2M+YjtiKyspaC5kZWxldGVPYmplY3Qoe2VuZHBvaW50OmFbYl19KX19KX07dGhpcy5zZWxlY3Q9ZnVuY3Rpb24oYSl7cmV0dXJuIGE9YXx8e30sYS5zY29wZT1hLnNjb3BlfHxcIipcIixsYihhLmNvbm5lY3Rpb25zfHxoLmdldENvbm5lY3Rpb25zKGEsITApKX0sdGhpcy5zZWxlY3RFbmRwb2ludHM9ZnVuY3Rpb24oYSl7YT1hfHx7fSxhLnNjb3BlPWEuc2NvcGV8fFwiKlwiO3ZhciBiPSFhLmVsZW1lbnQmJiFhLnNvdXJjZSYmIWEudGFyZ2V0LGM9Yj9cIipcIjpnYihhLmVsZW1lbnQpLGQ9Yj9cIipcIjpnYihhLnNvdXJjZSksZT1iP1wiKlwiOmdiKGEudGFyZ2V0KSxmPWdiKGEuc2NvcGUsITApLGc9W107Zm9yKHZhciBoIGluIHgpe3ZhciBpPWhiKGMsaCwhMCksaj1oYihkLGgsITApLGs9XCIqXCIhPWQsbD1oYihlLGgsITApLG09XCIqXCIhPWU7aWYoaXx8anx8bClhOmZvcih2YXIgbj0wLG89eFtoXS5sZW5ndGg7bz5uO24rKyl7dmFyIHA9eFtoXVtuXTtpZihoYihmLHAuc2NvcGUsITApKXt2YXIgcT1rJiZkLmxlbmd0aD4wJiYhcC5pc1NvdXJjZSxyPW0mJmUubGVuZ3RoPjAmJiFwLmlzVGFyZ2V0O2lmKHF8fHIpY29udGludWUgYTtnLnB1c2gocCl9fX1yZXR1cm4gbWIoZyl9LHRoaXMuZ2V0QWxsQ29ubmVjdGlvbnM9ZnVuY3Rpb24oKXtyZXR1cm4gd30sdGhpcy5nZXREZWZhdWx0U2NvcGU9ZnVuY3Rpb24oKXtyZXR1cm4gSH0sdGhpcy5nZXRFbmRwb2ludD1NLHRoaXMuZ2V0RW5kcG9pbnRzPWZ1bmN0aW9uKGEpe3JldHVybiB4W28oYSkuaWRdfSx0aGlzLmdldERlZmF1bHRFbmRwb2ludFR5cGU9ZnVuY3Rpb24oKXtyZXR1cm4gci5FbmRwb2ludH0sdGhpcy5nZXREZWZhdWx0Q29ubmVjdGlvblR5cGU9ZnVuY3Rpb24oKXtyZXR1cm4gci5Db25uZWN0aW9ufSx0aGlzLmdldElkPVosdGhpcy5hcHBlbmRFbGVtZW50PUs7dmFyIG5iPSExO3RoaXMuaXNIb3ZlclN1c3BlbmRlZD1mdW5jdGlvbigpe3JldHVybiBuYn0sdGhpcy5zZXRIb3ZlclN1c3BlbmRlZD1mdW5jdGlvbihhKXtuYj1hfSx0aGlzLmhpZGU9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVihhLFwibm9uZVwiLGIpLGh9LHRoaXMuaWRzdGFtcD1KLHRoaXMuY29ubmVjdG9yc0luaXRpYWxpemVkPSExLHRoaXMucmVnaXN0ZXJDb25uZWN0b3JUeXBlPWZ1bmN0aW9uKGEsYil7Yy5wdXNoKFthLGJdKX07dmFyIG9iPWZ1bmN0aW9uKGEpe2lmKCFzJiZhKXt2YXIgYj1oLmdldEVsZW1lbnQoYSk7Yi5vZmZzZXRQYXJlbnQmJmguc2V0Q29udGFpbmVyKGIub2Zmc2V0UGFyZW50KX19LHBiPWZ1bmN0aW9uKCl7aC5EZWZhdWx0cy5Db250YWluZXImJmguc2V0Q29udGFpbmVyKGguRGVmYXVsdHMuQ29udGFpbmVyKX0scWI9aC5tYW5hZ2U9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiB6W2FdfHwoelthXT17ZWw6YixlbmRwb2ludHM6W10sY29ubmVjdGlvbnM6W119LHpbYV0uaW5mbz1yYih7ZWxJZDphLHRpbWVzdGFtcDpHfSksY3x8aC5maXJlKFwibWFuYWdlRWxlbWVudFwiLHtpZDphLGluZm86elthXS5pbmZvLGVsOmJ9KSkselthXX0scmI9dGhpcy51cGRhdGVPZmZzZXQ9ZnVuY3Rpb24oYSl7dmFyIGIsYz1hLnRpbWVzdGFtcCxkPWEucmVjYWxjLGU9YS5vZmZzZXQsZj1hLmVsSWQ7cmV0dXJuIEYmJiFjJiYoYz1HKSwhZCYmYyYmYz09PUJbZl0/e286YS5vZmZzZXR8fEFbZl0sczpFW2ZdfTooZHx8IWUmJm51bGw9PUFbZl0/KGI9eltmXT96W2ZdLmVsOm51bGwsbnVsbCE9YiYmKEVbZl09aC5nZXRTaXplKGIpLEFbZl09aC5nZXRPZmZzZXQoYiksQltmXT1jKSk6KEFbZl09ZXx8QVtmXSxudWxsPT1FW2ZdJiYoYj16W2ZdLmVsLG51bGwhPWImJihFW2ZdPWguZ2V0U2l6ZShiKSkpLEJbZl09YyksQVtmXSYmIUFbZl0ucmlnaHQmJihBW2ZdLnJpZ2h0PUFbZl0ubGVmdCtFW2ZdWzBdLEFbZl0uYm90dG9tPUFbZl0udG9wK0VbZl1bMV0sQVtmXS53aWR0aD1FW2ZdWzBdLEFbZl0uaGVpZ2h0PUVbZl1bMV0sQVtmXS5jZW50ZXJ4PUFbZl0ubGVmdCtBW2ZdLndpZHRoLzIsQVtmXS5jZW50ZXJ5PUFbZl0udG9wK0FbZl0uaGVpZ2h0LzIpLHtvOkFbZl0sczpFW2ZdfSlcbn07dGhpcy5pbml0PWZ1bmN0aW9uKCl7YT1iLmpzUGx1bWIuZ2V0UmVuZGVyTW9kZXMoKTt2YXIgZT1mdW5jdGlvbihhLGMsZSl7Yi5qc1BsdW1iLkNvbm5lY3RvcnNbYV1bY109ZnVuY3Rpb24oKXtlLmFwcGx5KHRoaXMsYXJndW1lbnRzKSxiLmpzUGx1bWIuQ29ubmVjdG9yUmVuZGVyZXJzW2FdLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZC5leHRlbmQoYi5qc1BsdW1iLkNvbm5lY3RvcnNbYV1bY10sW2UsYi5qc1BsdW1iLkNvbm5lY3RvclJlbmRlcmVyc1thXV0pfTtpZighYi5qc1BsdW1iLmNvbm5lY3RvcnNJbml0aWFsaXplZCl7Zm9yKHZhciBmPTA7ZjxjLmxlbmd0aDtmKyspZm9yKHZhciBnPTA7ZzxhLmxlbmd0aDtnKyspZShhW2ddLGNbZl1bMV0sY1tmXVswXSk7Yi5qc1BsdW1iLmNvbm5lY3RvcnNJbml0aWFsaXplZD0hMH12fHwocGIoKSxoLmFuY2hvck1hbmFnZXI9bmV3IGIuanNQbHVtYi5BbmNob3JNYW5hZ2VyKHtqc1BsdW1iSW5zdGFuY2U6aH0pLHY9ITAsaC5maXJlKFwicmVhZHlcIixoKSl9LmJpbmQodGhpcyksdGhpcy5sb2c9dSx0aGlzLmpzUGx1bWJVSUNvbXBvbmVudD1tLHRoaXMubWFrZUFuY2hvcj1mdW5jdGlvbigpe3ZhciBhLGM9ZnVuY3Rpb24oYSxjKXtpZihiLmpzUGx1bWIuQW5jaG9yc1thXSlyZXR1cm4gbmV3IGIuanNQbHVtYi5BbmNob3JzW2FdKGMpO2lmKCFoLkRlZmF1bHRzLkRvTm90VGhyb3dFcnJvcnMpdGhyb3d7bXNnOlwianNQbHVtYjogdW5rbm93biBhbmNob3IgdHlwZSAnXCIrYStcIidcIn19O2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiBudWxsO3ZhciBlPWFyZ3VtZW50c1swXSxmPWFyZ3VtZW50c1sxXSxnPShhcmd1bWVudHNbMl0sbnVsbCk7aWYoZS5jb21wdXRlJiZlLmdldE9yaWVudGF0aW9uKXJldHVybiBlO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKWc9Yyhhcmd1bWVudHNbMF0se2VsZW1lbnRJZDpmLGpzUGx1bWJJbnN0YW5jZTpofSk7ZWxzZSBpZihkLmlzQXJyYXkoZSkpaWYoZC5pc0FycmF5KGVbMF0pfHxkLmlzU3RyaW5nKGVbMF0pKTI9PWUubGVuZ3RoJiZkLmlzT2JqZWN0KGVbMV0pP2QuaXNTdHJpbmcoZVswXSk/KGE9Yi5qc1BsdW1iLmV4dGVuZCh7ZWxlbWVudElkOmYsanNQbHVtYkluc3RhbmNlOmh9LGVbMV0pLGc9YyhlWzBdLGEpKTooYT1iLmpzUGx1bWIuZXh0ZW5kKHtlbGVtZW50SWQ6Zixqc1BsdW1iSW5zdGFuY2U6aCxhbmNob3JzOmVbMF19LGVbMV0pLGc9bmV3IGIuanNQbHVtYi5EeW5hbWljQW5jaG9yKGEpKTpnPW5ldyByLkR5bmFtaWNBbmNob3Ioe2FuY2hvcnM6ZSxzZWxlY3RvcjpudWxsLGVsZW1lbnRJZDpmLGpzUGx1bWJJbnN0YW5jZTpofSk7ZWxzZXt2YXIgaT17eDplWzBdLHk6ZVsxXSxvcmllbnRhdGlvbjplLmxlbmd0aD49ND9bZVsyXSxlWzNdXTpbMCwwXSxvZmZzZXRzOmUubGVuZ3RoPj02P1tlWzRdLGVbNV1dOlswLDBdLGVsZW1lbnRJZDpmLGpzUGx1bWJJbnN0YW5jZTpoLGNzc0NsYXNzOjc9PWUubGVuZ3RoP2VbNl06bnVsbH07Zz1uZXcgYi5qc1BsdW1iLkFuY2hvcihpKSxnLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBiLmpzUGx1bWIuQW5jaG9yKGkpfX1yZXR1cm4gZy5pZHx8KGcuaWQ9XCJhbmNob3JfXCIrSigpKSxnfSx0aGlzLm1ha2VBbmNob3JzPWZ1bmN0aW9uKGEsYyxlKXtmb3IodmFyIGY9W10sZz0wLGk9YS5sZW5ndGg7aT5nO2crKylcInN0cmluZ1wiPT10eXBlb2YgYVtnXT9mLnB1c2goYi5qc1BsdW1iLkFuY2hvcnNbYVtnXV0oe2VsZW1lbnRJZDpjLGpzUGx1bWJJbnN0YW5jZTplfSkpOmQuaXNBcnJheShhW2ddKSYmZi5wdXNoKGgubWFrZUFuY2hvcihhW2ddLGMsZSkpO3JldHVybiBmfSx0aGlzLm1ha2VEeW5hbWljQW5jaG9yPWZ1bmN0aW9uKGEsYyl7cmV0dXJuIG5ldyBiLmpzUGx1bWIuRHluYW1pY0FuY2hvcih7YW5jaG9yczphLHNlbGVjdG9yOmMsZWxlbWVudElkOm51bGwsanNQbHVtYkluc3RhbmNlOmh9KX0sdGhpcy50YXJnZXRFbmRwb2ludERlZmluaXRpb25zPXt9LHRoaXMuc291cmNlRW5kcG9pbnREZWZpbml0aW9ucz17fTt2YXIgc2I9ZnVuY3Rpb24oYSxiLGMsZCxlKXtmb3IodmFyIGY9YS50YXJnZXR8fGEuc3JjRWxlbWVudCxnPSExLGg9ZC5nZXRTZWxlY3RvcihiLGMpLGk9MDtpPGgubGVuZ3RoO2krKylpZihoW2ldPT1mKXtnPSEwO2JyZWFrfXJldHVybiBlPyFnOmd9LHRiPWZ1bmN0aW9uKGEsYyxlLGYsZyl7dmFyIGk9bmV3IG0oYyksaj1jLl9qc1BsdW1iLkVuZHBvaW50RHJvcEhhbmRsZXIoe2pzUGx1bWI6aCxlbmFibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIGEuZGVmLmVuYWJsZWR9LGlzRnVsbDpmdW5jdGlvbigpe3ZhciBiPWguc2VsZWN0KHt0YXJnZXQ6YS5pZH0pLmxlbmd0aDtyZXR1cm4gYS5kZWYubWF4Q29ubmVjdGlvbnM+MCYmYj49YS5kZWYubWF4Q29ubmVjdGlvbnN9LGVsZW1lbnQ6YS5lbCxlbGVtZW50SWQ6YS5pZCxpc1NvdXJjZTpmLGlzVGFyZ2V0OmcsYWRkQ2xhc3M6ZnVuY3Rpb24oYil7aC5hZGRDbGFzcyhhLmVsLGIpfSxyZW1vdmVDbGFzczpmdW5jdGlvbihiKXtoLnJlbW92ZUNsYXNzKGEuZWwsYil9LG9uRHJvcDpmdW5jdGlvbihhKXt2YXIgYj1hLmVuZHBvaW50c1swXTtiLmFuY2hvci5sb2NrZWQ9ITF9LGlzRHJvcEFsbG93ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gaS5pc0Ryb3BBbGxvd2VkLmFwcGx5KGksYXJndW1lbnRzKX0saXNSZWRyb3A6ZnVuY3Rpb24oYil7cmV0dXJuIG51bGwhPWIuc3VzcGVuZGVkRWxlbWVudCYmbnVsbCE9Yi5zdXNwZW5kZWRFbmRwb2ludCYmYi5zdXNwZW5kZWRFbmRwb2ludC5lbGVtZW50PT09YS5lbH0sZ2V0RW5kcG9pbnQ6ZnVuY3Rpb24oZCl7dmFyIGU9YS5kZWYuZW5kcG9pbnQ7aWYobnVsbD09ZXx8bnVsbD09ZS5fanNQbHVtYil7dmFyIGY9aC5kZXJpdmVFbmRwb2ludEFuZEFuY2hvclNwZWMoZC5nZXRUeXBlKCkuam9pbihcIiBcIiksITApLGc9Zi5lbmRwb2ludHM/Yi5qc1BsdW1iLmV4dGVuZChjLHtlbmRwb2ludDphLmRlZi5kZWYuZW5kcG9pbnR8fGYuZW5kcG9pbnRzWzFdfSk6YztmLmFuY2hvcnMmJihnPWIuanNQbHVtYi5leHRlbmQoZyx7YW5jaG9yOmEuZGVmLmRlZi5hbmNob3J8fGYuYW5jaG9yc1sxXX0pKSxlPWguYWRkRW5kcG9pbnQoYS5lbCxnKSxlLl9tdE5ldz0hMH1pZihjLnVuaXF1ZUVuZHBvaW50JiYoYS5kZWYuZW5kcG9pbnQ9ZSksZS5fZG9Ob3REZWxldGVPbkRldGFjaD0hMSxlLl9kZWxldGVPbkRldGFjaD0hMCxkLmlzRGV0YWNoYWJsZSgpJiZlLmluaXREcmFnZ2FibGUoKSxudWxsIT1lLmFuY2hvci5wb3NpdGlvbkZpbmRlcil7dmFyIGk9aC5nZXRVSVBvc2l0aW9uKGFyZ3VtZW50cyxoLmdldFpvb20oKSksaj1oLmdldE9mZnNldChhLmVsKSxrPWguZ2V0U2l6ZShhLmVsKSxsPW51bGw9PWk/WzAsMF06ZS5hbmNob3IucG9zaXRpb25GaW5kZXIoaSxqLGssZS5hbmNob3IuY29uc3RydWN0b3JQYXJhbXMpO2UuYW5jaG9yLng9bFswXSxlLmFuY2hvci55PWxbMV19cmV0dXJuIGV9LG1heWJlQ2xlYW51cDpmdW5jdGlvbihhKXthLl9tdE5ldyYmMD09PWEuY29ubmVjdGlvbnMubGVuZ3RoP2guZGVsZXRlT2JqZWN0KHtlbmRwb2ludDphfSk6ZGVsZXRlIGEuX210TmV3fX0pLGs9Yi5qc1BsdW1iLmRyYWdFdmVudHMuZHJvcDtyZXR1cm4gZS5zY29wZT1lLnNjb3BlfHxjLnNjb3BlfHxoLkRlZmF1bHRzLlNjb3BlLGVba109ZC53cmFwKGVba10saiwhMCksZyYmKGVbYi5qc1BsdW1iLmRyYWdFdmVudHMub3Zlcl09ZnVuY3Rpb24oKXtyZXR1cm4hMH0pLGMuYWxsb3dMb29wYmFjaz09PSExJiYoZS5jYW5Ecm9wPWZ1bmN0aW9uKGIpe3ZhciBjPWIuZ2V0RHJhZ0VsZW1lbnQoKS5fanNQbHVtYlJlbGF0ZWRFbGVtZW50O3JldHVybiBjIT1hLmVsfSksaC5pbml0RHJvcHBhYmxlKGEuZWwsZSxcImludGVybmFsXCIpLGp9O3RoaXMubWFrZVRhcmdldD1mdW5jdGlvbihhLGMsZCl7dmFyIGU9Yi5qc1BsdW1iLmV4dGVuZCh7X2pzUGx1bWI6dGhpc30sZCk7Yi5qc1BsdW1iLmV4dGVuZChlLGMpO2Zvcih2YXIgZj1lLm1heENvbm5lY3Rpb25zfHwtMSxnPWZ1bmN0aW9uKGEpe3ZhciBjPW8oYSksZD1jLmlkLGc9Yi5qc1BsdW1iLmV4dGVuZCh7fSxlLmRyb3BPcHRpb25zfHx7fSksaD1lLmNvbm5lY3Rpb25UeXBlfHxcImRlZmF1bHRcIjt0aGlzLnRhcmdldEVuZHBvaW50RGVmaW5pdGlvbnNbZF09dGhpcy50YXJnZXRFbmRwb2ludERlZmluaXRpb25zW2RdfHx7fSxvYihkKSxjLmVsLl9pc0pzUGx1bWJHcm91cCYmbnVsbD09Zy5yYW5rJiYoZy5yYW5rPS0xKTt2YXIgaT17ZGVmOmIuanNQbHVtYi5leHRlbmQoe30sZSksdW5pcXVlRW5kcG9pbnQ6ZS51bmlxdWVFbmRwb2ludCxtYXhDb25uZWN0aW9uczpmLGVuYWJsZWQ6ITB9O2MuZGVmPWksdGhpcy50YXJnZXRFbmRwb2ludERlZmluaXRpb25zW2RdW2hdPWksdGIoYyxlLGcsZS5pc1NvdXJjZT09PSEwLCEwKSxjLmVsLl9rYXRhdm9yaW9Ecm9wW2MuZWwuX2thdGF2b3Jpb0Ryb3AubGVuZ3RoLTFdLnRhcmdldERlZj1pfS5iaW5kKHRoaXMpLGg9YS5sZW5ndGgmJmEuY29uc3RydWN0b3IhPVN0cmluZz9hOlthXSxpPTAsaj1oLmxlbmd0aDtqPmk7aSsrKWcoaFtpXSk7cmV0dXJuIHRoaXN9LHRoaXMudW5tYWtlVGFyZ2V0PWZ1bmN0aW9uKGEsYil7dmFyIGM9byhhKTtyZXR1cm4gaC5kZXN0cm95RHJvcHBhYmxlKGMuZWwsXCJpbnRlcm5hbFwiKSxifHxkZWxldGUgdGhpcy50YXJnZXRFbmRwb2ludERlZmluaXRpb25zW2MuaWRdLHRoaXN9LHRoaXMubWFrZVNvdXJjZT1mdW5jdGlvbihhLGMsZSl7dmFyIGY9Yi5qc1BsdW1iLmV4dGVuZCh7X2pzUGx1bWI6dGhpc30sZSk7Yi5qc1BsdW1iLmV4dGVuZChmLGMpO3ZhciBnPWYuY29ubmVjdGlvblR5cGV8fFwiZGVmYXVsdFwiLGk9aC5kZXJpdmVFbmRwb2ludEFuZEFuY2hvclNwZWMoZyk7Zi5lbmRwb2ludD1mLmVuZHBvaW50fHxpLmVuZHBvaW50c1swXSxmLmFuY2hvcj1mLmFuY2hvcnx8aS5hbmNob3JzWzBdO2Zvcih2YXIgaj1mLm1heENvbm5lY3Rpb25zfHwtMSxrPWYub25NYXhDb25uZWN0aW9ucyxsPWZ1bmN0aW9uKGEpe3ZhciBjPWEuaWQsZT10aGlzLmdldEVsZW1lbnQoYS5lbCk7dGhpcy5zb3VyY2VFbmRwb2ludERlZmluaXRpb25zW2NdPXRoaXMuc291cmNlRW5kcG9pbnREZWZpbml0aW9uc1tjXXx8e30sb2IoYyk7dmFyIGk9e2RlZjpiLmpzUGx1bWIuZXh0ZW5kKHt9LGYpLHVuaXF1ZUVuZHBvaW50OmYudW5pcXVlRW5kcG9pbnQsbWF4Q29ubmVjdGlvbnM6aixlbmFibGVkOiEwfTt0aGlzLnNvdXJjZUVuZHBvaW50RGVmaW5pdGlvbnNbY11bZ109aSxhLmRlZj1pO3ZhciBsPWIuanNQbHVtYi5kcmFnRXZlbnRzLnN0b3AsbT1iLmpzUGx1bWIuZHJhZ0V2ZW50cy5kcmFnLG89Yi5qc1BsdW1iLmV4dGVuZCh7fSxmLmRyYWdPcHRpb25zfHx7fSkscD1vLmRyYWcscT1vLnN0b3Ascj1udWxsLHM9ITE7by5zY29wZT1vLnNjb3BlfHxmLnNjb3BlLG9bbV09ZC53cmFwKG9bbV0sZnVuY3Rpb24oKXtwJiZwLmFwcGx5KHRoaXMsYXJndW1lbnRzKSxzPSExfSksb1tsXT1kLndyYXAob1tsXSxmdW5jdGlvbigpe2lmKHEmJnEuYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMuY3VycmVudGx5RHJhZ2dpbmc9ITEsbnVsbCE9ci5fanNQbHVtYil7dmFyIGE9Zi5hbmNob3J8fHRoaXMuRGVmYXVsdHMuQW5jaG9yLGI9ci5hbmNob3IsZD1yLmNvbm5lY3Rpb25zWzBdLGU9dGhpcy5tYWtlQW5jaG9yKGEsYyx0aGlzKSxnPXIuZWxlbWVudDtpZihudWxsIT1lLnBvc2l0aW9uRmluZGVyKXt2YXIgaT1oLmdldE9mZnNldChnKSxqPXRoaXMuZ2V0U2l6ZShnKSxrPXtsZWZ0OmkubGVmdCtiLngqalswXSx0b3A6aS50b3ArYi55KmpbMV19LGw9ZS5wb3NpdGlvbkZpbmRlcihrLGksaixlLmNvbnN0cnVjdG9yUGFyYW1zKTtlLng9bFswXSxlLnk9bFsxXX1yLnNldEFuY2hvcihlLCEwKSxyLnJlcGFpbnQoKSx0aGlzLnJlcGFpbnQoci5lbGVtZW50SWQpLG51bGwhPWQmJnRoaXMucmVwYWludChkLnRhcmdldElkKX19LmJpbmQodGhpcykpO3ZhciB0PWZ1bmN0aW9uKGkpe2lmKDMhPT1pLndoaWNoJiYyIT09aS5idXR0b24pe3ZhciBsPXRoaXMuc291cmNlRW5kcG9pbnREZWZpbml0aW9uc1tjXVtnXTtpZihsLmVuYWJsZWQpe2lmKGM9dGhpcy5nZXRJZCh0aGlzLmdldEVsZW1lbnQoYS5lbCkpLGYuZmlsdGVyKXt2YXIgbT1kLmlzU3RyaW5nKGYuZmlsdGVyKT9zYihpLGEuZWwsZi5maWx0ZXIsdGhpcyxmLmZpbHRlckV4Y2x1ZGUpOmYuZmlsdGVyKGksYS5lbCk7aWYobT09PSExKXJldHVybn12YXIgcD10aGlzLnNlbGVjdCh7c291cmNlOmN9KS5sZW5ndGg7aWYobC5tYXhDb25uZWN0aW9ucz49MCYmcD49bC5tYXhDb25uZWN0aW9ucylyZXR1cm4gayYmayh7ZWxlbWVudDphLmVsLG1heENvbm5lY3Rpb25zOmp9LGkpLCExO3ZhciBxPWIuanNQbHVtYi5nZXRQb3NpdGlvbk9uRWxlbWVudChpLGUsbiksdD17fTtiLmpzUGx1bWIuZXh0ZW5kKHQsZiksdC5pc1RlbXBvcmFyeVNvdXJjZT0hMCx0LmFuY2hvcj1bcVswXSxxWzFdLDAsMF0sdC5kcmFnT3B0aW9ucz1vLGwuZGVmLnNjb3BlJiYodC5zY29wZT1sLmRlZi5zY29wZSkscj10aGlzLmFkZEVuZHBvaW50KGMsdCkscz0hMCxyLl9kb05vdERlbGV0ZU9uRGV0YWNoPSExLHIuX2RlbGV0ZU9uRGV0YWNoPSEwLGwudW5pcXVlRW5kcG9pbnQmJihsLmVuZHBvaW50P3IuZmluYWxFbmRwb2ludD1sLmVuZHBvaW50OihsLmVuZHBvaW50PXIsci5fZGVsZXRlT25EZXRhY2g9ITEsci5fZG9Ob3REZWxldGVPbkRldGFjaD0hMCkpO3ZhciB1PWZ1bmN0aW9uKCl7aC5vZmYoci5jYW52YXMsXCJtb3VzZXVwXCIsdSksaC5vZmYoYS5lbCxcIm1vdXNldXBcIix1KSxzJiYocz0hMSxoLmRlbGV0ZUVuZHBvaW50KHIpKX07aC5vbihyLmNhbnZhcyxcIm1vdXNldXBcIix1KSxoLm9uKGEuZWwsXCJtb3VzZXVwXCIsdSk7dmFyIHY9e307aWYobC5kZWYuZXh0cmFjdClmb3IodmFyIHcgaW4gbC5kZWYuZXh0cmFjdCl7dmFyIHg9KGkuc3JjRWxlbWVudHx8aS50YXJnZXQpLmdldEF0dHJpYnV0ZSh3KTt4JiYodltsLmRlZi5leHRyYWN0W3ddXT14KX1oLnRyaWdnZXIoci5jYW52YXMsXCJtb3VzZWRvd25cIixpLHYpLGQuY29uc3VtZShpKX19fS5iaW5kKHRoaXMpO3RoaXMub24oYS5lbCxcIm1vdXNlZG93blwiLHQpLGkudHJpZ2dlcj10LGYuZmlsdGVyJiYoZC5pc1N0cmluZyhmLmZpbHRlcil8fGQuaXNGdW5jdGlvbihmLmZpbHRlcikpJiZoLnNldERyYWdGaWx0ZXIoYS5lbCxmLmZpbHRlcik7dmFyIHU9Yi5qc1BsdW1iLmV4dGVuZCh7fSxmLmRyb3BPcHRpb25zfHx7fSk7dGIoYSxmLHUsITAsZi5pc1RhcmdldD09PSEwKX0uYmluZCh0aGlzKSxtPWEubGVuZ3RoJiZhLmNvbnN0cnVjdG9yIT1TdHJpbmc/YTpbYV0scD0wLHE9bS5sZW5ndGg7cT5wO3ArKylsKG8obVtwXSkpO3JldHVybiB0aGlzfSx0aGlzLnVubWFrZVNvdXJjZT1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9byhhKTtoLmRlc3Ryb3lEcm9wcGFibGUoZC5lbCxcImludGVybmFsXCIpO3ZhciBlPXRoaXMuc291cmNlRW5kcG9pbnREZWZpbml0aW9uc1tkLmlkXTtpZihlKWZvcih2YXIgZiBpbiBlKWlmKG51bGw9PWJ8fGI9PT1mKXt2YXIgZz1lW2ZdLnRyaWdnZXI7ZyYmaC5vZmYoZC5lbCxcIm1vdXNlZG93blwiLGcpLGN8fGRlbGV0ZSB0aGlzLnNvdXJjZUVuZHBvaW50RGVmaW5pdGlvbnNbZC5pZF1bZl19cmV0dXJuIHRoaXN9LHRoaXMudW5tYWtlRXZlcnlTb3VyY2U9ZnVuY3Rpb24oKXtmb3IodmFyIGEgaW4gdGhpcy5zb3VyY2VFbmRwb2ludERlZmluaXRpb25zKWgudW5tYWtlU291cmNlKGEsbnVsbCwhMCk7cmV0dXJuIHRoaXMuc291cmNlRW5kcG9pbnREZWZpbml0aW9ucz17fSx0aGlzfTt2YXIgdWI9ZnVuY3Rpb24oYSxiLGMpe2I9ZC5pc0FycmF5KGIpP2I6W2JdO3ZhciBlPVooYSk7Yz1jfHxcImRlZmF1bHRcIjtmb3IodmFyIGY9MDtmPGIubGVuZ3RoO2YrKyl7dmFyIGc9dGhpc1tiW2ZdXVtlXTtpZihnJiZnW2NdKXJldHVybiBnW2NdLmRlZi5zY29wZXx8dGhpcy5EZWZhdWx0cy5TY29wZX19LmJpbmQodGhpcyksdmI9ZnVuY3Rpb24oYSxiLGMsZSl7Yz1kLmlzQXJyYXkoYyk/YzpbY107dmFyIGY9WihhKTtlPWV8fFwiZGVmYXVsdFwiO2Zvcih2YXIgZz0wO2c8Yy5sZW5ndGg7ZysrKXt2YXIgaD10aGlzW2NbZ11dW2ZdO2gmJmhbZV0mJihoW2VdLmRlZi5zY29wZT1iKX19LmJpbmQodGhpcyk7dGhpcy5nZXRTY29wZT1mdW5jdGlvbihhKXtyZXR1cm4gdWIoYSxbXCJzb3VyY2VFbmRwb2ludERlZmluaXRpb25zXCIsXCJ0YXJnZXRFbmRwb2ludERlZmluaXRpb25zXCJdKX0sdGhpcy5nZXRTb3VyY2VTY29wZT1mdW5jdGlvbihhKXtyZXR1cm4gdWIoYSxcInNvdXJjZUVuZHBvaW50RGVmaW5pdGlvbnNcIil9LHRoaXMuZ2V0VGFyZ2V0U2NvcGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHViKGEsXCJ0YXJnZXRFbmRwb2ludERlZmluaXRpb25zXCIpfSx0aGlzLnNldFNjb3BlPWZ1bmN0aW9uKGEsYixjKXt0aGlzLnNldFNvdXJjZVNjb3BlKGEsYixjKSx0aGlzLnNldFRhcmdldFNjb3BlKGEsYixjKX0sdGhpcy5zZXRTb3VyY2VTY29wZT1mdW5jdGlvbihhLGIsYyl7dmIoYSxiLFwic291cmNlRW5kcG9pbnREZWZpbml0aW9uc1wiLGMpLHRoaXMuc2V0RHJhZ1Njb3BlKGEsYil9LHRoaXMuc2V0VGFyZ2V0U2NvcGU9ZnVuY3Rpb24oYSxiLGMpe3ZiKGEsYixcInRhcmdldEVuZHBvaW50RGVmaW5pdGlvbnNcIixjKSx0aGlzLnNldERyb3BTY29wZShhLGIpfSx0aGlzLnVubWFrZUV2ZXJ5VGFyZ2V0PWZ1bmN0aW9uKCl7Zm9yKHZhciBhIGluIHRoaXMudGFyZ2V0RW5kcG9pbnREZWZpbml0aW9ucyloLnVubWFrZVRhcmdldChhLCEwKTtyZXR1cm4gdGhpcy50YXJnZXRFbmRwb2ludERlZmluaXRpb25zPXt9LHRoaXN9O3ZhciB3Yj1mdW5jdGlvbihhLGIsYyxlLGYpe3ZhciBnLGksaixrPVwic291cmNlXCI9PWE/dGhpcy5zb3VyY2VFbmRwb2ludERlZmluaXRpb25zOnRoaXMudGFyZ2V0RW5kcG9pbnREZWZpbml0aW9ucztpZihmPWZ8fFwiZGVmYXVsdFwiLGIubGVuZ3RoJiYhZC5pc1N0cmluZyhiKSl7Zz1bXTtmb3IodmFyIGw9MCxtPWIubGVuZ3RoO20+bDtsKyspaT1vKGJbbF0pLGtbaS5pZF0mJmtbaS5pZF1bZl0mJihnW2xdPWtbaS5pZF1bZl0uZW5hYmxlZCxqPWU/IWdbbF06YyxrW2kuaWRdW2ZdLmVuYWJsZWQ9aixoW2o/XCJyZW1vdmVDbGFzc1wiOlwiYWRkQ2xhc3NcIl0oaS5lbCxcImp0ay1cIithK1wiLWRpc2FibGVkXCIpKX1lbHNle2k9byhiKTt2YXIgbj1pLmlkO2tbbl0mJmtbbl1bZl0mJihnPWtbbl1bZl0uZW5hYmxlZCxqPWU/IWc6YyxrW25dW2ZdLmVuYWJsZWQ9aixoW2o/XCJyZW1vdmVDbGFzc1wiOlwiYWRkQ2xhc3NcIl0oaS5lbCxcImp0ay1cIithK1wiLWRpc2FibGVkXCIpKX1yZXR1cm4gZ30uYmluZCh0aGlzKSx4Yj1mdW5jdGlvbihhLGIpe3JldHVybiBkLmlzU3RyaW5nKGEpfHwhYS5sZW5ndGg/Yi5hcHBseSh0aGlzLFthXSk6YS5sZW5ndGg/Yi5hcHBseSh0aGlzLFthWzBdXSk6dm9pZCAwfS5iaW5kKHRoaXMpO3RoaXMudG9nZ2xlU291cmNlRW5hYmxlZD1mdW5jdGlvbihhLGIpe3JldHVybiB3YihcInNvdXJjZVwiLGEsbnVsbCwhMCxiKSx0aGlzLmlzU291cmNlRW5hYmxlZChhLGIpfSx0aGlzLnNldFNvdXJjZUVuYWJsZWQ9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiB3YihcInNvdXJjZVwiLGEsYixudWxsLGMpfSx0aGlzLmlzU291cmNlPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGI9Ynx8XCJkZWZhdWx0XCIseGIoYSxmdW5jdGlvbihhKXt2YXIgYz10aGlzLnNvdXJjZUVuZHBvaW50RGVmaW5pdGlvbnNbbyhhKS5pZF07cmV0dXJuIG51bGwhPWMmJm51bGwhPWNbYl19LmJpbmQodGhpcykpfSx0aGlzLmlzU291cmNlRW5hYmxlZD1mdW5jdGlvbihhLGIpe3JldHVybiBiPWJ8fFwiZGVmYXVsdFwiLHhiKGEsZnVuY3Rpb24oYSl7dmFyIGM9dGhpcy5zb3VyY2VFbmRwb2ludERlZmluaXRpb25zW28oYSkuaWRdO3JldHVybiBjJiZjW2JdJiZjW2JdLmVuYWJsZWQ9PT0hMH0uYmluZCh0aGlzKSl9LHRoaXMudG9nZ2xlVGFyZ2V0RW5hYmxlZD1mdW5jdGlvbihhLGIpe3JldHVybiB3YihcInRhcmdldFwiLGEsbnVsbCwhMCxiKSx0aGlzLmlzVGFyZ2V0RW5hYmxlZChhLGIpfSx0aGlzLmlzVGFyZ2V0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIGI9Ynx8XCJkZWZhdWx0XCIseGIoYSxmdW5jdGlvbihhKXt2YXIgYz10aGlzLnRhcmdldEVuZHBvaW50RGVmaW5pdGlvbnNbbyhhKS5pZF07cmV0dXJuIG51bGwhPWMmJm51bGwhPWNbYl19LmJpbmQodGhpcykpfSx0aGlzLmlzVGFyZ2V0RW5hYmxlZD1mdW5jdGlvbihhLGIpe3JldHVybiBiPWJ8fFwiZGVmYXVsdFwiLHhiKGEsZnVuY3Rpb24oYSl7dmFyIGM9dGhpcy50YXJnZXRFbmRwb2ludERlZmluaXRpb25zW28oYSkuaWRdO3JldHVybiBjJiZjW2JdJiZjW2JdLmVuYWJsZWQ9PT0hMH0uYmluZCh0aGlzKSl9LHRoaXMuc2V0VGFyZ2V0RW5hYmxlZD1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIHdiKFwidGFyZ2V0XCIsYSxiLG51bGwsYyl9LHRoaXMucmVhZHk9ZnVuY3Rpb24oYSl7aC5iaW5kKFwicmVhZHlcIixhKX07dmFyIHliPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIj09dHlwZW9mIGEmJmEubGVuZ3RoKWZvcih2YXIgYz0wLGQ9YS5sZW5ndGg7ZD5jO2MrKyliKGFbY10pO2Vsc2UgYihhKTtyZXR1cm4gaH07dGhpcy5yZXBhaW50PWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4geWIoYSxmdW5jdGlvbihhKXtMKGEsYixjKX0pfSx0aGlzLnJldmFsaWRhdGU9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiB5YihhLGZ1bmN0aW9uKGEpe3ZhciBkPWM/YTpoLmdldElkKGEpO2gudXBkYXRlT2Zmc2V0KHtlbElkOmQscmVjYWxjOiEwLHRpbWVzdGFtcDpifSksaC5yZXBhaW50KGEpfSl9LHRoaXMucmVwYWludEV2ZXJ5dGhpbmc9ZnVuY3Rpb24oKXt2YXIgYSxiPWUoKTtmb3IoYSBpbiB4KWgudXBkYXRlT2Zmc2V0KHtlbElkOmEscmVjYWxjOiEwLHRpbWVzdGFtcDpifSk7Zm9yKGEgaW4geClMKGEsbnVsbCxiKTtyZXR1cm4gdGhpc30sdGhpcy5yZW1vdmVBbGxFbmRwb2ludHM9ZnVuY3Rpb24oYSxiLGMpe2M9Y3x8W107dmFyIGQ9ZnVuY3Rpb24oYSl7dmFyIGUsZixnPW8oYSksaT14W2cuaWRdO2lmKGkpZm9yKGMucHVzaChnKSxlPTAsZj1pLmxlbmd0aDtmPmU7ZSsrKWguZGVsZXRlRW5kcG9pbnQoaVtlXSwhMSk7aWYoZGVsZXRlIHhbZy5pZF0sYiYmZy5lbCYmMyE9Zy5lbC5ub2RlVHlwZSYmOCE9Zy5lbC5ub2RlVHlwZSlmb3IoZT0wLGY9Zy5lbC5jaGlsZE5vZGVzLmxlbmd0aDtmPmU7ZSsrKWQoZy5lbC5jaGlsZE5vZGVzW2VdKX07cmV0dXJuIGQoYSksdGhpc307dmFyIHpiPWZ1bmN0aW9uKGEsYil7aC5yZW1vdmVBbGxFbmRwb2ludHMoYS5pZCwhMCxiKTtmb3IodmFyIGM9ZnVuY3Rpb24oYSl7aC5nZXREcmFnTWFuYWdlcigpLmVsZW1lbnRSZW1vdmVkKGEuaWQpLGguYW5jaG9yTWFuYWdlci5jbGVhckZvcihhLmlkKSxoLmFuY2hvck1hbmFnZXIucmVtb3ZlRmxvYXRpbmdDb25uZWN0aW9uKGEuaWQpLGguaXNTb3VyY2UoYS5lbCkmJmgudW5tYWtlU291cmNlKGEuZWwpLGguaXNUYXJnZXQoYS5lbCkmJmgudW5tYWtlVGFyZ2V0KGEuZWwpLGguZGVzdHJveURyYWdnYWJsZShhLmVsKSxoLmRlc3Ryb3lEcm9wcGFibGUoYS5lbCksZGVsZXRlIGguZmxvYXRpbmdDb25uZWN0aW9uc1thLmlkXSxkZWxldGUgelthLmlkXSxkZWxldGUgQVthLmlkXSxhLmVsJiYoaC5yZW1vdmVFbGVtZW50KGEuZWwpLGEuZWwuX2pzUGx1bWI9bnVsbCl9LGQ9MTtkPGIubGVuZ3RoO2QrKyljKGJbZF0pO2MoYSl9O3RoaXMucmVtb3ZlPWZ1bmN0aW9uKGEsYil7dmFyIGM9byhhKSxkPVtdO3JldHVybiBjLnRleHQ/Yy5lbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMuZWwpOmMuaWQmJmguYmF0Y2goZnVuY3Rpb24oKXt6YihjLGQpfSxiPT09ITEpLGh9LHRoaXMuZW1wdHk9ZnVuY3Rpb24oYSxiKXt2YXIgYz1bXSxkPWZ1bmN0aW9uKGEsYil7dmFyIGU9byhhKTtpZihlLnRleHQpZS5lbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUuZWwpO2Vsc2UgaWYoZS5lbCl7Zm9yKDtlLmVsLmNoaWxkTm9kZXMubGVuZ3RoPjA7KWQoZS5lbC5jaGlsZE5vZGVzWzBdKTtifHx6YihlLGMpfX07cmV0dXJuIGguYmF0Y2goZnVuY3Rpb24oKXtkKGEsITApfSxiPT09ITEpLGh9LHRoaXMucmVzZXQ9ZnVuY3Rpb24oKXtoLnNpbGVudGx5KGZ1bmN0aW9uKCl7bmI9ITEsaC5yZW1vdmVBbGxHcm91cHMoKSxoLnJlbW92ZUdyb3VwTWFuYWdlcigpLGguZGVsZXRlRXZlcnlFbmRwb2ludCgpLGgudW5iaW5kKCksdGhpcy50YXJnZXRFbmRwb2ludERlZmluaXRpb25zPXt9LHRoaXMuc291cmNlRW5kcG9pbnREZWZpbml0aW9ucz17fSx3Lmxlbmd0aD0wLHRoaXMuZG9SZXNldCYmdGhpcy5kb1Jlc2V0KCl9LmJpbmQodGhpcykpfTt2YXIgQWI9ZnVuY3Rpb24oYSl7YS5jYW52YXMmJmEuY2FudmFzLnBhcmVudE5vZGUmJmEuY2FudmFzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYS5jYW52YXMpLGEuY2xlYW51cCgpLGEuZGVzdHJveSgpfTt0aGlzLmNsZWFyPWZ1bmN0aW9uKCl7aC5zZWxlY3QoKS5lYWNoKEFiKSxoLnNlbGVjdEVuZHBvaW50cygpLmVhY2goQWIpLHg9e30seT17fX0sdGhpcy5zZXREZWZhdWx0U2NvcGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEg9YSxofSx0aGlzLnNldERyYWdnYWJsZT1VLHRoaXMuZGVyaXZlRW5kcG9pbnRBbmRBbmNob3JTcGVjPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPSgoYj9cIlwiOlwiZGVmYXVsdCBcIikrYSkuc3BsaXQoL1tcXHNdLyksZD1udWxsLGU9bnVsbCxmPW51bGwsZz1udWxsLGk9MDtpPGMubGVuZ3RoO2krKyl7dmFyIGo9aC5nZXRUeXBlKGNbaV0sXCJjb25uZWN0aW9uXCIpO2omJihqLmVuZHBvaW50cyYmKGQ9ai5lbmRwb2ludHMpLGouZW5kcG9pbnQmJihlPWouZW5kcG9pbnQpLGouYW5jaG9ycyYmKGc9ai5hbmNob3JzKSxqLmFuY2hvciYmKGY9ai5hbmNob3IpKX1yZXR1cm57ZW5kcG9pbnRzOmQ/ZDpbZSxlXSxhbmNob3JzOmc/ZzpbZixmXX19LHRoaXMuc2V0SWQ9ZnVuY3Rpb24oYSxiLGMpe3ZhciBlO2QuaXNTdHJpbmcoYSk/ZT1hOihhPXRoaXMuZ2V0RWxlbWVudChhKSxlPXRoaXMuZ2V0SWQoYSkpO3ZhciBmPXRoaXMuZ2V0Q29ubmVjdGlvbnMoe3NvdXJjZTplLHNjb3BlOlwiKlwifSwhMCksZz10aGlzLmdldENvbm5lY3Rpb25zKHt0YXJnZXQ6ZSxzY29wZTpcIipcIn0sITApO2I9XCJcIitiLGM/YT10aGlzLmdldEVsZW1lbnQoYik6KGE9dGhpcy5nZXRFbGVtZW50KGUpLHRoaXMuc2V0QXR0cmlidXRlKGEsXCJpZFwiLGIpKSx4W2JdPXhbZV18fFtdO2Zvcih2YXIgaD0wLGk9eFtiXS5sZW5ndGg7aT5oO2grKyl4W2JdW2hdLnNldEVsZW1lbnRJZChiKSx4W2JdW2hdLnNldFJlZmVyZW5jZUVsZW1lbnQoYSk7ZGVsZXRlIHhbZV0sdGhpcy5zb3VyY2VFbmRwb2ludERlZmluaXRpb25zW2JdPXRoaXMuc291cmNlRW5kcG9pbnREZWZpbml0aW9uc1tlXSxkZWxldGUgdGhpcy5zb3VyY2VFbmRwb2ludERlZmluaXRpb25zW2VdLHRoaXMudGFyZ2V0RW5kcG9pbnREZWZpbml0aW9uc1tiXT10aGlzLnRhcmdldEVuZHBvaW50RGVmaW5pdGlvbnNbZV0sZGVsZXRlIHRoaXMudGFyZ2V0RW5kcG9pbnREZWZpbml0aW9uc1tlXSx0aGlzLmFuY2hvck1hbmFnZXIuY2hhbmdlSWQoZSxiKSx0aGlzLmdldERyYWdNYW5hZ2VyKCkuY2hhbmdlSWQoZSxiKSx6W2JdPXpbZV0sZGVsZXRlIHpbZV07dmFyIGo9ZnVuY3Rpb24oYyxkLGUpe2Zvcih2YXIgZj0wLGc9Yy5sZW5ndGg7Zz5mO2YrKyljW2ZdLmVuZHBvaW50c1tkXS5zZXRFbGVtZW50SWQoYiksY1tmXS5lbmRwb2ludHNbZF0uc2V0UmVmZXJlbmNlRWxlbWVudChhKSxjW2ZdW2UrXCJJZFwiXT1iLGNbZl1bZV09YX07aihmLDAsXCJzb3VyY2VcIiksaihnLDEsXCJ0YXJnZXRcIiksdGhpcy5yZXBhaW50KGIpfSx0aGlzLnNldERlYnVnTG9nPWZ1bmN0aW9uKGEpe3U9YX0sdGhpcy5zZXRTdXNwZW5kRHJhd2luZz1mdW5jdGlvbihhLGIpe3ZhciBjPUY7cmV0dXJuIEY9YSxHPWE/KG5ldyBEYXRlKS5nZXRUaW1lKCk6bnVsbCxiJiZ0aGlzLnJlcGFpbnRFdmVyeXRoaW5nKCksY30sdGhpcy5pc1N1c3BlbmREcmF3aW5nPWZ1bmN0aW9uKCl7cmV0dXJuIEZ9LHRoaXMuZ2V0U3VzcGVuZGVkQXQ9ZnVuY3Rpb24oKXtyZXR1cm4gR30sdGhpcy5iYXRjaD1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuaXNTdXNwZW5kRHJhd2luZygpO2N8fHRoaXMuc2V0U3VzcGVuZERyYXdpbmcoITApO3RyeXthKCl9Y2F0Y2goZSl7ZC5sb2coXCJGdW5jdGlvbiBydW4gd2hpbGUgc3VzcGVuZGVkIGZhaWxlZFwiLGUpfWN8fHRoaXMuc2V0U3VzcGVuZERyYXdpbmcoITEsIWIpfSx0aGlzLmRvV2hpbGVTdXNwZW5kZWQ9dGhpcy5iYXRjaCx0aGlzLmdldENhY2hlZERhdGE9WSx0aGlzLnRpbWVzdGFtcD1lLHRoaXMuc2hvdz1mdW5jdGlvbihhLGIpe3JldHVybiBWKGEsXCJibG9ja1wiLGIpLGh9LHRoaXMudG9nZ2xlVmlzaWJsZT1YLHRoaXMudG9nZ2xlRHJhZ2dhYmxlPVcsdGhpcy5hZGRMaXN0ZW5lcj10aGlzLmJpbmR9O2QuZXh0ZW5kKGIuanNQbHVtYkluc3RhbmNlLGQuRXZlbnRHZW5lcmF0b3Ise3NldEF0dHJpYnV0ZTpmdW5jdGlvbihhLGIsYyl7dGhpcy5zZXRBdHRyaWJ1dGUoYSxiLGMpfSxnZXRBdHRyaWJ1dGU6ZnVuY3Rpb24oYSxjKXtyZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoYi5qc1BsdW1iLmdldEVsZW1lbnQoYSksYyl9LGNvbnZlcnRUb0Z1bGxPdmVybGF5U3BlYzpmdW5jdGlvbihhKXtyZXR1cm4gZC5pc1N0cmluZyhhKSYmKGE9W2Ese31dKSxhWzFdLmlkPWFbMV0uaWR8fGQudXVpZCgpLGF9LHJlZ2lzdGVyQ29ubmVjdGlvblR5cGU6ZnVuY3Rpb24oYSxjKXtpZih0aGlzLl9jb25uZWN0aW9uVHlwZXNbYV09Yi5qc1BsdW1iLmV4dGVuZCh7fSxjKSxjLm92ZXJsYXlzKXtmb3IodmFyIGQ9e30sZT0wO2U8Yy5vdmVybGF5cy5sZW5ndGg7ZSsrKXt2YXIgZj10aGlzLmNvbnZlcnRUb0Z1bGxPdmVybGF5U3BlYyhjLm92ZXJsYXlzW2VdKTtkW2ZbMV0uaWRdPWZ9dGhpcy5fY29ubmVjdGlvblR5cGVzW2FdLm92ZXJsYXlzPWR9fSxyZWdpc3RlckNvbm5lY3Rpb25UeXBlczpmdW5jdGlvbihhKXtmb3IodmFyIGIgaW4gYSl0aGlzLnJlZ2lzdGVyQ29ubmVjdGlvblR5cGUoYixhW2JdKX0scmVnaXN0ZXJFbmRwb2ludFR5cGU6ZnVuY3Rpb24oYSxjKXtpZih0aGlzLl9lbmRwb2ludFR5cGVzW2FdPWIuanNQbHVtYi5leHRlbmQoe30sYyksYy5vdmVybGF5cyl7Zm9yKHZhciBkPXt9LGU9MDtlPGMub3ZlcmxheXMubGVuZ3RoO2UrKyl7dmFyIGY9dGhpcy5jb252ZXJ0VG9GdWxsT3ZlcmxheVNwZWMoYy5vdmVybGF5c1tlXSk7ZFtmWzFdLmlkXT1mfXRoaXMuX2VuZHBvaW50VHlwZXNbYV0ub3ZlcmxheXM9ZH19LHJlZ2lzdGVyRW5kcG9pbnRUeXBlczpmdW5jdGlvbihhKXtmb3IodmFyIGIgaW4gYSl0aGlzLnJlZ2lzdGVyRW5kcG9pbnRUeXBlKGIsYVtiXSl9LGdldFR5cGU6ZnVuY3Rpb24oYSxiKXtyZXR1cm5cImNvbm5lY3Rpb25cIj09PWI/dGhpcy5fY29ubmVjdGlvblR5cGVzW2FdOnRoaXMuX2VuZHBvaW50VHlwZXNbYV19LHNldElkQ2hhbmdlZDpmdW5jdGlvbihhLGIpe3RoaXMuc2V0SWQoYSxiLCEwKX0sc2V0UGFyZW50OmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5nZXRFbGVtZW50KGEpLGQ9dGhpcy5nZXRJZChjKSxlPXRoaXMuZ2V0RWxlbWVudChiKSxmPXRoaXMuZ2V0SWQoZSk7Yy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpLGUuYXBwZW5kQ2hpbGQoYyksdGhpcy5nZXREcmFnTWFuYWdlcigpLnNldFBhcmVudChjLGQsZSxmKX0sZXh0ZW5kOmZ1bmN0aW9uKGEsYixjKXt2YXIgZDtpZihjKWZvcihkPTA7ZDxjLmxlbmd0aDtkKyspYVtjW2RdXT1iW2NbZF1dO2Vsc2UgZm9yKGQgaW4gYilhW2RdPWJbZF07cmV0dXJuIGF9LGZsb2F0aW5nQ29ubmVjdGlvbnM6e30sZ2V0RmxvYXRpbmdBbmNob3JJbmRleDpmdW5jdGlvbihhKXtyZXR1cm4gYS5lbmRwb2ludHNbMF0uaXNGbG9hdGluZygpPzA6YS5lbmRwb2ludHNbMV0uaXNGbG9hdGluZygpPzE6LTF9fSkscS5wcm90b3R5cGUuRGVmYXVsdHM9e0FuY2hvcjpcIkJvdHRvbVwiLEFuY2hvcnM6W251bGwsbnVsbF0sQ29ubmVjdGlvbnNEZXRhY2hhYmxlOiEwLENvbm5lY3Rpb25PdmVybGF5czpbXSxDb25uZWN0b3I6XCJCZXppZXJcIixDb250YWluZXI6bnVsbCxEb05vdFRocm93RXJyb3JzOiExLERyYWdPcHRpb25zOnt9LERyb3BPcHRpb25zOnt9LEVuZHBvaW50OlwiRG90XCIsRW5kcG9pbnRPdmVybGF5czpbXSxFbmRwb2ludHM6W251bGwsbnVsbF0sRW5kcG9pbnRTdHlsZTp7ZmlsbDpcIiM0NTZcIn0sRW5kcG9pbnRTdHlsZXM6W251bGwsbnVsbF0sRW5kcG9pbnRIb3ZlclN0eWxlOm51bGwsRW5kcG9pbnRIb3ZlclN0eWxlczpbbnVsbCxudWxsXSxIb3ZlclBhaW50U3R5bGU6bnVsbCxMYWJlbFN0eWxlOntjb2xvcjpcImJsYWNrXCJ9LExvZ0VuYWJsZWQ6ITEsT3ZlcmxheXM6W10sTWF4Q29ubmVjdGlvbnM6MSxQYWludFN0eWxlOntcInN0cm9rZS13aWR0aFwiOjQsc3Ryb2tlOlwiIzQ1NlwifSxSZWF0dGFjaENvbm5lY3Rpb25zOiExLFJlbmRlck1vZGU6XCJzdmdcIixTY29wZTpcImpzUGx1bWJfRGVmYXVsdFNjb3BlXCJ9O3ZhciByPW5ldyBxO2IuanNQbHVtYj1yLHIuZ2V0SW5zdGFuY2U9ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZXcgcShhKTtpZihiKWZvcih2YXIgZCBpbiBiKWNbZF09YltkXTtyZXR1cm4gYy5pbml0KCksY30sci5lYWNoPWZ1bmN0aW9uKGEsYil7aWYobnVsbCE9YSlpZihcInN0cmluZ1wiPT10eXBlb2YgYSliKHIuZ2V0RWxlbWVudChhKSk7ZWxzZSBpZihudWxsIT1hLmxlbmd0aClmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyliKHIuZ2V0RWxlbWVudChhW2NdKSk7ZWxzZSBiKGEpfSxcInVuZGVmaW5lZFwiIT10eXBlb2YgZXhwb3J0cyYmKGV4cG9ydHMuanNQbHVtYj1yKX0uY2FsbChcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp0aGlzKSxmdW5jdGlvbigpe3ZhciBhPXRoaXMsYj1hLmpzUGx1bWJVdGlsLGM9ZnVuY3Rpb24oYSxiKXtpZihudWxsPT1iKXJldHVyblswLDBdO3ZhciBjPWgoYiksZD1nKGMsMCk7cmV0dXJuW2RbYStcIlhcIl0sZFthK1wiWVwiXV19LGQ9Yy5iaW5kKHRoaXMsXCJwYWdlXCIpLGU9Yy5iaW5kKHRoaXMsXCJzY3JlZW5cIiksZj1jLmJpbmQodGhpcyxcImNsaWVudFwiKSxnPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGEuaXRlbT9hLml0ZW0oYik6YVtiXX0saD1mdW5jdGlvbihhKXtyZXR1cm4gYS50b3VjaGVzJiZhLnRvdWNoZXMubGVuZ3RoPjA/YS50b3VjaGVzOmEuY2hhbmdlZFRvdWNoZXMmJmEuY2hhbmdlZFRvdWNoZXMubGVuZ3RoPjA/YS5jaGFuZ2VkVG91Y2hlczphLnRhcmdldFRvdWNoZXMmJmEudGFyZ2V0VG91Y2hlcy5sZW5ndGg+MD9hLnRhcmdldFRvdWNoZXM6W2FdfSxpPWZ1bmN0aW9uKGEpe3ZhciBiPXt9LGM9W10sZD17fSxlPXt9LGY9e307dGhpcy5yZWdpc3Rlcj1mdW5jdGlvbihnKXt2YXIgaD1hLmdldElkKGcpLGk9YS5nZXRPZmZzZXQoZyk7YltoXXx8KGJbaF09ZyxjLnB1c2goZyksZFtoXT17fSk7dmFyIGo9ZnVuY3Rpb24oYil7aWYoYilmb3IodmFyIGM9MDtjPGIuY2hpbGROb2Rlcy5sZW5ndGg7YysrKWlmKDMhPWIuY2hpbGROb2Rlc1tjXS5ub2RlVHlwZSYmOCE9Yi5jaGlsZE5vZGVzW2NdLm5vZGVUeXBlKXt2YXIgZz1qc1BsdW1iLmdldEVsZW1lbnQoYi5jaGlsZE5vZGVzW2NdKSxrPWEuZ2V0SWQoYi5jaGlsZE5vZGVzW2NdLG51bGwsITApO2lmKGsmJmVba10mJmVba10+MCl7dmFyIGw9YS5nZXRPZmZzZXQoZyk7ZFtoXVtrXT17aWQ6ayxvZmZzZXQ6e2xlZnQ6bC5sZWZ0LWkubGVmdCx0b3A6bC50b3AtaS50b3B9fSxmW2tdPWh9aihiLmNoaWxkTm9kZXNbY10pfX07aihnKX0sdGhpcy51cGRhdGVPZmZzZXRzPWZ1bmN0aW9uKGIsYyl7aWYobnVsbCE9Yil7Yz1jfHx7fTt2YXIgZT1qc1BsdW1iLmdldEVsZW1lbnQoYiksZz1hLmdldElkKGUpLGg9ZFtnXSxpPWEuZ2V0T2Zmc2V0KGUpO2lmKGgpZm9yKHZhciBqIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShqKSl7dmFyIGs9anNQbHVtYi5nZXRFbGVtZW50KGopLGw9Y1tqXXx8YS5nZXRPZmZzZXQoayk7aWYobnVsbD09ay5vZmZzZXRQYXJlbnQmJm51bGwhPWRbZ11bal0pY29udGludWU7ZFtnXVtqXT17aWQ6aixvZmZzZXQ6e2xlZnQ6bC5sZWZ0LWkubGVmdCx0b3A6bC50b3AtaS50b3B9fSxmW2pdPWd9fX0sdGhpcy5lbmRwb2ludEFkZGVkPWZ1bmN0aW9uKGMsZyl7Zz1nfHxhLmdldElkKGMpO3ZhciBoPWRvY3VtZW50LmJvZHksaT1jLnBhcmVudE5vZGU7Zm9yKGVbZ109ZVtnXT9lW2ddKzE6MTtudWxsIT1pJiZpIT1oOyl7dmFyIGo9YS5nZXRJZChpLG51bGwsITApO2lmKGomJmJbal0pe3ZhciBrPWEuZ2V0T2Zmc2V0KGkpO2lmKG51bGw9PWRbal1bZ10pe3ZhciBsPWEuZ2V0T2Zmc2V0KGMpO2Rbal1bZ109e2lkOmcsb2Zmc2V0OntsZWZ0OmwubGVmdC1rLmxlZnQsdG9wOmwudG9wLWsudG9wfX0sZltnXT1qfWJyZWFrfWk9aS5wYXJlbnROb2RlfX0sdGhpcy5lbmRwb2ludERlbGV0ZWQ9ZnVuY3Rpb24oYSl7aWYoZVthLmVsZW1lbnRJZF0mJihlW2EuZWxlbWVudElkXS0tLGVbYS5lbGVtZW50SWRdPD0wKSlmb3IodmFyIGIgaW4gZClkLmhhc093blByb3BlcnR5KGIpJiZkW2JdJiYoZGVsZXRlIGRbYl1bYS5lbGVtZW50SWRdLGRlbGV0ZSBmW2EuZWxlbWVudElkXSl9LHRoaXMuY2hhbmdlSWQ9ZnVuY3Rpb24oYSxiKXtkW2JdPWRbYV0sZFthXT17fSxmW2JdPWZbYV0sZlthXT1udWxsfSx0aGlzLmdldEVsZW1lbnRzRm9yRHJhZ2dhYmxlPWZ1bmN0aW9uKGEpe3JldHVybiBkW2FdfSx0aGlzLmVsZW1lbnRSZW1vdmVkPWZ1bmN0aW9uKGEpe3ZhciBiPWZbYV07YiYmKGRlbGV0ZSBkW2JdW2FdLGRlbGV0ZSBmW2FdKX0sdGhpcy5yZXNldD1mdW5jdGlvbigpe2I9e30sYz1bXSxkPXt9LGU9e319LHRoaXMuZHJhZ0VuZGVkPWZ1bmN0aW9uKGIpe2lmKG51bGwhPWIub2Zmc2V0UGFyZW50KXt2YXIgYz1hLmdldElkKGIpLGQ9ZltjXTtkJiZ0aGlzLnVwZGF0ZU9mZnNldHMoZCl9fSx0aGlzLnNldFBhcmVudD1mdW5jdGlvbihiLGMsZSxnLGgpe3ZhciBpPWZbY107ZFtnXXx8KGRbZ109e30pO3ZhciBqPWEuZ2V0T2Zmc2V0KGUpLGs9aHx8YS5nZXRPZmZzZXQoYik7aSYmZFtpXSYmZGVsZXRlIGRbaV1bY10sZFtnXVtjXT17aWQ6YyxvZmZzZXQ6e2xlZnQ6ay5sZWZ0LWoubGVmdCx0b3A6ay50b3Atai50b3B9fSxmW2NdPWd9LHRoaXMuY2xlYXJQYXJlbnQ9ZnVuY3Rpb24oYSxiKXt2YXIgYz1mW2JdO2MmJihkZWxldGUgZFtjXVtiXSxkZWxldGUgZltiXSl9LHRoaXMucmV2YWxpZGF0ZVBhcmVudD1mdW5jdGlvbihiLGMsZCl7dmFyIGU9ZltjXTtpZihlKXt2YXIgZz17fTtnW2NdPWQsdGhpcy51cGRhdGVPZmZzZXRzKGUsZyksYS5yZXZhbGlkYXRlKGUpfX0sdGhpcy5nZXREcmFnQW5jZXN0b3I9ZnVuY3Rpb24oYil7dmFyIGM9anNQbHVtYi5nZXRFbGVtZW50KGIpLGQ9YS5nZXRJZChjKSxlPWZbZF07cmV0dXJuIGU/anNQbHVtYi5nZXRFbGVtZW50KGUpOm51bGx9fSxqPWZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hP251bGw6YS5yZXBsYWNlKC9eXFxzXFxzKi8sXCJcIikucmVwbGFjZSgvXFxzXFxzKiQvLFwiXCIpfSxrPWZ1bmN0aW9uKGEsYil7Yj1qKGIpLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLmNsYXNzTmFtZS5iYXNlVmFsP2EuY2xhc3NOYW1lLmJhc2VWYWw9YjphLmNsYXNzTmFtZT1ifSxsPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCI9PXR5cGVvZiBhLmNsYXNzTmFtZS5iYXNlVmFsP2EuY2xhc3NOYW1lOmEuY2xhc3NOYW1lLmJhc2VWYWx9LG09ZnVuY3Rpb24oYSxjLGQpe2M9bnVsbD09Yz9bXTpiLmlzQXJyYXkoYyk/YzpjLnNwbGl0KC9cXHMrLyksZD1udWxsPT1kP1tdOmIuaXNBcnJheShkKT9kOmQuc3BsaXQoL1xccysvKTt2YXIgZT1sKGEpLGY9ZS5zcGxpdCgvXFxzKy8pLGc9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKylpZihhKS0xPT1mLmluZGV4T2YoYltjXSkmJmYucHVzaChiW2NdKTtlbHNle3ZhciBkPWYuaW5kZXhPZihiW2NdKTstMSE9ZCYmZi5zcGxpY2UoZCwxKX19O2coITAsYyksZyghMSxkKSxrKGEsZi5qb2luKFwiIFwiKSl9O2EuanNQbHVtYi5leHRlbmQoYS5qc1BsdW1iSW5zdGFuY2UucHJvdG90eXBlLHtoZWFkbGVzczohMSxwYWdlTG9jYXRpb246ZCxzY3JlZW5Mb2NhdGlvbjplLGNsaWVudExvY2F0aW9uOmYsZ2V0RHJhZ01hbmFnZXI6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09dGhpcy5kcmFnTWFuYWdlciYmKHRoaXMuZHJhZ01hbmFnZXI9bmV3IGkodGhpcykpLHRoaXMuZHJhZ01hbmFnZXJ9LHJlY2FsY3VsYXRlT2Zmc2V0czpmdW5jdGlvbihhKXt0aGlzLmdldERyYWdNYW5hZ2VyKCkudXBkYXRlT2Zmc2V0cyhhKX0sY3JlYXRlRWxlbWVudDpmdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gdGhpcy5jcmVhdGVFbGVtZW50TlMobnVsbCxhLGIsYyxkKX0sY3JlYXRlRWxlbWVudE5TOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGYsZz1udWxsPT1hP2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoYik6ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGEsYik7Yz1jfHx7fTtmb3IoZiBpbiBjKWcuc3R5bGVbZl09Y1tmXTtkJiYoZy5jbGFzc05hbWU9ZCksZT1lfHx7fTtmb3IoZiBpbiBlKWcuc2V0QXR0cmlidXRlKGYsXCJcIitlW2ZdKTtyZXR1cm4gZ30sZ2V0QXR0cmlidXRlOmZ1bmN0aW9uKGEsYil7cmV0dXJuIG51bGwhPWEuZ2V0QXR0cmlidXRlP2EuZ2V0QXR0cmlidXRlKGIpOm51bGx9LHNldEF0dHJpYnV0ZTpmdW5jdGlvbihhLGIsYyl7bnVsbCE9YS5zZXRBdHRyaWJ1dGUmJmEuc2V0QXR0cmlidXRlKGIsYyl9LHNldEF0dHJpYnV0ZXM6ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGMgaW4gYiliLmhhc093blByb3BlcnR5KGMpJiZhLnNldEF0dHJpYnV0ZShjLGJbY10pfSxhcHBlbmRUb1Jvb3Q6ZnVuY3Rpb24oYSl7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKX0sZ2V0UmVuZGVyTW9kZXM6ZnVuY3Rpb24oKXtyZXR1cm5bXCJzdmdcIl19LGdldENsYXNzOmwsYWRkQ2xhc3M6ZnVuY3Rpb24oYSxiKXtqc1BsdW1iLmVhY2goYSxmdW5jdGlvbihhKXttKGEsYil9KX0saGFzQ2xhc3M6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT1qc1BsdW1iLmdldEVsZW1lbnQoYSksYS5jbGFzc0xpc3Q/YS5jbGFzc0xpc3QuY29udGFpbnMoYik6LTEhPWwoYSkuaW5kZXhPZihiKX0scmVtb3ZlQ2xhc3M6ZnVuY3Rpb24oYSxiKXtqc1BsdW1iLmVhY2goYSxmdW5jdGlvbihhKXttKGEsbnVsbCxiKX0pfSx1cGRhdGVDbGFzc2VzOmZ1bmN0aW9uKGEsYixjKXtqc1BsdW1iLmVhY2goYSxmdW5jdGlvbihhKXttKGEsYixjKX0pfSxzZXRDbGFzczpmdW5jdGlvbihhLGIpe2pzUGx1bWIuZWFjaChhLGZ1bmN0aW9uKGEpe2soYSxiKX0pfSxzZXRQb3NpdGlvbjpmdW5jdGlvbihhLGIpe2Euc3R5bGUubGVmdD1iLmxlZnQrXCJweFwiLGEuc3R5bGUudG9wPWIudG9wK1wicHhcIn0sZ2V0UG9zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9ZnVuY3Rpb24oYil7dmFyIGM9YS5zdHlsZVtiXTtyZXR1cm4gYz9jLnN1YnN0cmluZygwLGMubGVuZ3RoLTIpOjB9O3JldHVybntsZWZ0OmIoXCJsZWZ0XCIpLHRvcDpiKFwidG9wXCIpfX0sZ2V0U3R5bGU6ZnVuY3Rpb24oYSxiKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93LmdldENvbXB1dGVkU3R5bGU/Z2V0Q29tcHV0ZWRTdHlsZShhLG51bGwpLmdldFByb3BlcnR5VmFsdWUoYik6YS5jdXJyZW50U3R5bGVbYl19LGdldFNlbGVjdG9yOmZ1bmN0aW9uKGEsYil7dmFyIGM9bnVsbDtyZXR1cm4gYz0xPT1hcmd1bWVudHMubGVuZ3RoP251bGwhPWEubm9kZVR5cGU/YTpkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGEpOmEucXVlcnlTZWxlY3RvckFsbChiKX0sZ2V0T2Zmc2V0OmZ1bmN0aW9uKGEsYixjKXthPWpzUGx1bWIuZ2V0RWxlbWVudChhKSxjPWN8fHRoaXMuZ2V0Q29udGFpbmVyKCk7Zm9yKHZhciBkPXtsZWZ0OmEub2Zmc2V0TGVmdCx0b3A6YS5vZmZzZXRUb3B9LGU9Ynx8bnVsbCE9YyYmYSE9YyYmYS5vZmZzZXRQYXJlbnQhPWM/YS5vZmZzZXRQYXJlbnQ6bnVsbCxmPWZ1bmN0aW9uKGEpe251bGwhPWEmJmEhPT1kb2N1bWVudC5ib2R5JiYoYS5zY3JvbGxUb3A+MHx8YS5zY3JvbGxMZWZ0PjApJiYoZC5sZWZ0LT1hLnNjcm9sbExlZnQsZC50b3AtPWEuc2Nyb2xsVG9wKX0uYmluZCh0aGlzKTtudWxsIT1lOylkLmxlZnQrPWUub2Zmc2V0TGVmdCxkLnRvcCs9ZS5vZmZzZXRUb3AsZihlKSxlPWI/ZS5vZmZzZXRQYXJlbnQ6ZS5vZmZzZXRQYXJlbnQ9PWM/bnVsbDplLm9mZnNldFBhcmVudDtpZihudWxsIT1jJiYhYiYmKGMuc2Nyb2xsVG9wPjB8fGMuc2Nyb2xsTGVmdD4wKSl7dmFyIGc9bnVsbCE9YS5vZmZzZXRQYXJlbnQ/dGhpcy5nZXRTdHlsZShhLm9mZnNldFBhcmVudCxcInBvc2l0aW9uXCIpOlwic3RhdGljXCIsaD10aGlzLmdldFN0eWxlKGEsXCJwb3NpdGlvblwiKTtcImFic29sdXRlXCIhPT1oJiZcImZpeGVkXCIhPT1oJiZcImFic29sdXRlXCIhPT1nJiZcImZpeGVkXCIhPWcmJihkLmxlZnQtPWMuc2Nyb2xsTGVmdCxkLnRvcC09Yy5zY3JvbGxUb3ApfXJldHVybiBkfSxnZXRQb3NpdGlvbk9uRWxlbWVudDpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0P2IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk6e2xlZnQ6MCx0b3A6MCx3aWR0aDowLGhlaWdodDowfSxlPWRvY3VtZW50LmJvZHksZj1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsZz13aW5kb3cucGFnZVlPZmZzZXR8fGYuc2Nyb2xsVG9wfHxlLnNjcm9sbFRvcCxoPXdpbmRvdy5wYWdlWE9mZnNldHx8Zi5zY3JvbGxMZWZ0fHxlLnNjcm9sbExlZnQsaT1mLmNsaWVudFRvcHx8ZS5jbGllbnRUb3B8fDAsaj1mLmNsaWVudExlZnR8fGUuY2xpZW50TGVmdHx8MCxrPTAsbD0wLG09ZC50b3ArZy1pK2sqYyxuPWQubGVmdCtoLWorbCpjLG89anNQbHVtYi5wYWdlTG9jYXRpb24oYSkscD1kLndpZHRofHxiLm9mZnNldFdpZHRoKmMscT1kLmhlaWdodHx8Yi5vZmZzZXRIZWlnaHQqYyxyPShvWzBdLW4pL3Ascz0ob1sxXS1tKS9xO3JldHVybltyLHNdfSxnZXRBYnNvbHV0ZVBvc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPWZ1bmN0aW9uKGIpe3ZhciBjPWEuc3R5bGVbYl07cmV0dXJuIGM/cGFyc2VGbG9hdChjLnN1YnN0cmluZygwLGMubGVuZ3RoLTIpKTp2b2lkIDB9O3JldHVybltiKFwibGVmdFwiKSxiKFwidG9wXCIpXX0sc2V0QWJzb2x1dGVQb3NpdGlvbjpmdW5jdGlvbihhLGIsYyxkKXtjP3RoaXMuYW5pbWF0ZShhLHtsZWZ0OlwiKz1cIisoYlswXS1jWzBdKSx0b3A6XCIrPVwiKyhiWzFdLWNbMV0pfSxkKTooYS5zdHlsZS5sZWZ0PWJbMF0rXCJweFwiLGEuc3R5bGUudG9wPWJbMV0rXCJweFwiKX0sZ2V0U2l6ZTpmdW5jdGlvbihhKXtyZXR1cm5bYS5vZmZzZXRXaWR0aCxhLm9mZnNldEhlaWdodF19LGdldFdpZHRoOmZ1bmN0aW9uKGEpe3JldHVybiBhLm9mZnNldFdpZHRofSxnZXRIZWlnaHQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEub2Zmc2V0SGVpZ2h0fSxnZXRSZW5kZXJNb2RlOmZ1bmN0aW9uKCl7cmV0dXJuXCJzdmdcIn19KX0uY2FsbChcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp0aGlzKSxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBhPXRoaXMsYj1hLmpzUGx1bWIsYz1hLmpzUGx1bWJVdGlsLGQ9XCJfX2xhYmVsXCIsZT1mdW5jdGlvbihhLGMpe3ZhciBlPXtjc3NDbGFzczpjLmNzc0NsYXNzLGxhYmVsU3R5bGU6YS5sYWJlbFN0eWxlLGlkOmQsY29tcG9uZW50OmEsX2pzUGx1bWI6YS5fanNQbHVtYi5pbnN0YW5jZX0sZj1iLmV4dGVuZChlLGMpO3JldHVybiBuZXcoYi5PdmVybGF5c1thLl9qc1BsdW1iLmluc3RhbmNlLmdldFJlbmRlck1vZGUoKV0uTGFiZWwpKGYpfSxmPWZ1bmN0aW9uKGEsZCl7dmFyIGU9bnVsbDtpZihjLmlzQXJyYXkoZCkpe3ZhciBmPWRbMF0sZz1iLmV4dGVuZCh7Y29tcG9uZW50OmEsX2pzUGx1bWI6YS5fanNQbHVtYi5pbnN0YW5jZX0sZFsxXSk7Mz09ZC5sZW5ndGgmJmIuZXh0ZW5kKGcsZFsyXSksZT1uZXcoYi5PdmVybGF5c1thLl9qc1BsdW1iLmluc3RhbmNlLmdldFJlbmRlck1vZGUoKV1bZl0pKGcpfWVsc2UgZT1kLmNvbnN0cnVjdG9yPT1TdHJpbmc/bmV3KGIuT3ZlcmxheXNbYS5fanNQbHVtYi5pbnN0YW5jZS5nZXRSZW5kZXJNb2RlKCldW2RdKSh7Y29tcG9uZW50OmEsX2pzUGx1bWI6YS5fanNQbHVtYi5pbnN0YW5jZX0pOmQ7cmV0dXJuIGUuaWQ9ZS5pZHx8Yy51dWlkKCksYS5jYWNoZVR5cGVJdGVtKFwib3ZlcmxheVwiLGUsZS5pZCksYS5fanNQbHVtYi5vdmVybGF5c1tlLmlkXT1lLGV9O2IuT3ZlcmxheUNhcGFibGVKc1BsdW1iVUlDb21wb25lbnQ9ZnVuY3Rpb24oYil7YS5qc1BsdW1iVUlDb21wb25lbnQuYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMuX2pzUGx1bWIub3ZlcmxheXM9e30sdGhpcy5fanNQbHVtYi5vdmVybGF5UG9zaXRpb25zPXt9LGIubGFiZWwmJih0aGlzLmdldERlZmF1bHRUeXBlKCkub3ZlcmxheXNbZF09W1wiTGFiZWxcIix7bGFiZWw6Yi5sYWJlbCxsb2NhdGlvbjpiLmxhYmVsTG9jYXRpb258fHRoaXMuZGVmYXVsdExhYmVsTG9jYXRpb258fC41LGxhYmVsU3R5bGU6Yi5sYWJlbFN0eWxlfHx0aGlzLl9qc1BsdW1iLmluc3RhbmNlLkRlZmF1bHRzLkxhYmVsU3R5bGUsaWQ6ZH1dKSx0aGlzLnNldExpc3RlbmVyQ29tcG9uZW50PWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2pzUGx1bWIpZm9yKHZhciBiIGluIHRoaXMuX2pzUGx1bWIub3ZlcmxheXMpdGhpcy5fanNQbHVtYi5vdmVybGF5c1tiXS5zZXRMaXN0ZW5lckNvbXBvbmVudChhKX19LGIuT3ZlcmxheUNhcGFibGVKc1BsdW1iVUlDb21wb25lbnQuYXBwbHlUeXBlPWZ1bmN0aW9uKGEsYil7aWYoYi5vdmVybGF5cyl7dmFyIGMsZD17fTtmb3IoYyBpbiBiLm92ZXJsYXlzKXt2YXIgZT1hLl9qc1BsdW1iLm92ZXJsYXlzW2Iub3ZlcmxheXNbY11bMV0uaWRdO2lmKGUpZS51cGRhdGVGcm9tKGIub3ZlcmxheXNbY11bMV0pLGRbYi5vdmVybGF5c1tjXVsxXS5pZF09ITA7ZWxzZXt2YXIgZj1hLmdldENhY2hlZFR5cGVJdGVtKFwib3ZlcmxheVwiLGIub3ZlcmxheXNbY11bMV0uaWQpO251bGwhPWY/KGYucmVhdHRhY2goYS5fanNQbHVtYi5pbnN0YW5jZSksZi5zZXRWaXNpYmxlKCEwKSxmLnVwZGF0ZUZyb20oYi5vdmVybGF5c1tjXVsxXSksYS5fanNQbHVtYi5vdmVybGF5c1tmLmlkXT1mKTpmPWEuYWRkT3ZlcmxheShiLm92ZXJsYXlzW2NdLCEwKSxkW2YuaWRdPSEwfX1mb3IoYyBpbiBhLl9qc1BsdW1iLm92ZXJsYXlzKW51bGw9PWRbYS5fanNQbHVtYi5vdmVybGF5c1tjXS5pZF0mJmEucmVtb3ZlT3ZlcmxheShhLl9qc1BsdW1iLm92ZXJsYXlzW2NdLmlkLCEwKX19LGMuZXh0ZW5kKGIuT3ZlcmxheUNhcGFibGVKc1BsdW1iVUlDb21wb25lbnQsYS5qc1BsdW1iVUlDb21wb25lbnQse3NldEhvdmVyOmZ1bmN0aW9uKGEpe2lmKHRoaXMuX2pzUGx1bWImJiF0aGlzLl9qc1BsdW1iLmluc3RhbmNlLmlzQ29ubmVjdGlvbkJlaW5nRHJhZ2dlZCgpKWZvcih2YXIgYiBpbiB0aGlzLl9qc1BsdW1iLm92ZXJsYXlzKXRoaXMuX2pzUGx1bWIub3ZlcmxheXNbYl1bYT9cImFkZENsYXNzXCI6XCJyZW1vdmVDbGFzc1wiXSh0aGlzLl9qc1BsdW1iLmluc3RhbmNlLmhvdmVyQ2xhc3MpfSxhZGRPdmVybGF5OmZ1bmN0aW9uKGEsYil7dmFyIGM9Zih0aGlzLGEpO3JldHVybiBifHx0aGlzLnJlcGFpbnQoKSxjfSxnZXRPdmVybGF5OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLl9qc1BsdW1iLm92ZXJsYXlzW2FdfSxnZXRPdmVybGF5czpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9qc1BsdW1iLm92ZXJsYXlzfSxoaWRlT3ZlcmxheTpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmdldE92ZXJsYXkoYSk7YiYmYi5oaWRlKCl9LGhpZGVPdmVybGF5czpmdW5jdGlvbigpe2Zvcih2YXIgYSBpbiB0aGlzLl9qc1BsdW1iLm92ZXJsYXlzKXRoaXMuX2pzUGx1bWIub3ZlcmxheXNbYV0uaGlkZSgpfSxzaG93T3ZlcmxheTpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmdldE92ZXJsYXkoYSk7YiYmYi5zaG93KCl9LHNob3dPdmVybGF5czpmdW5jdGlvbigpe2Zvcih2YXIgYSBpbiB0aGlzLl9qc1BsdW1iLm92ZXJsYXlzKXRoaXMuX2pzUGx1bWIub3ZlcmxheXNbYV0uc2hvdygpfSxyZW1vdmVBbGxPdmVybGF5czpmdW5jdGlvbihhKXtmb3IodmFyIGIgaW4gdGhpcy5fanNQbHVtYi5vdmVybGF5cyl0aGlzLl9qc1BsdW1iLm92ZXJsYXlzW2JdLmNsZWFudXAmJnRoaXMuX2pzUGx1bWIub3ZlcmxheXNbYl0uY2xlYW51cCgpO3RoaXMuX2pzUGx1bWIub3ZlcmxheXM9e30sdGhpcy5fanNQbHVtYi5vdmVybGF5UG9zaXRpb25zPW51bGwsYXx8dGhpcy5yZXBhaW50KCl9LHJlbW92ZU92ZXJsYXk6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9qc1BsdW1iLm92ZXJsYXlzW2FdO2MmJihjLnNldFZpc2libGUoITEpLCFiJiZjLmNsZWFudXAmJmMuY2xlYW51cCgpLGRlbGV0ZSB0aGlzLl9qc1BsdW1iLm92ZXJsYXlzW2FdLHRoaXMuX2pzUGx1bWIub3ZlcmxheVBvc2l0aW9ucyYmZGVsZXRlIHRoaXMuX2pzUGx1bWIub3ZlcmxheVBvc2l0aW9uc1thXSl9LHJlbW92ZU92ZXJsYXlzOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPTAsYj1hcmd1bWVudHMubGVuZ3RoO2I+YTthKyspdGhpcy5yZW1vdmVPdmVybGF5KGFyZ3VtZW50c1thXSl9LG1vdmVQYXJlbnQ6ZnVuY3Rpb24oYSl7aWYodGhpcy5iZ0NhbnZhcyYmKHRoaXMuYmdDYW52YXMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmJnQ2FudmFzKSxhLmFwcGVuZENoaWxkKHRoaXMuYmdDYW52YXMpKSx0aGlzLmNhbnZhcyYmdGhpcy5jYW52YXMucGFyZW50Tm9kZSl7dGhpcy5jYW52YXMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmNhbnZhcyksYS5hcHBlbmRDaGlsZCh0aGlzLmNhbnZhcyk7Zm9yKHZhciBiIGluIHRoaXMuX2pzUGx1bWIub3ZlcmxheXMpaWYodGhpcy5fanNQbHVtYi5vdmVybGF5c1tiXS5pc0FwcGVuZGVkQXRUb3BMZXZlbCl7dmFyIGM9dGhpcy5fanNQbHVtYi5vdmVybGF5c1tiXS5nZXRFbGVtZW50KCk7Yy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpLGEuYXBwZW5kQ2hpbGQoYyl9fX0sZ2V0TGFiZWw6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmdldE92ZXJsYXkoZCk7cmV0dXJuIG51bGwhPWE/YS5nZXRMYWJlbCgpOm51bGx9LGdldExhYmVsT3ZlcmxheTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmdldE92ZXJsYXkoZCl9LHNldExhYmVsOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuZ2V0T3ZlcmxheShkKTtpZihiKWEuY29uc3RydWN0b3I9PVN0cmluZ3x8YS5jb25zdHJ1Y3Rvcj09RnVuY3Rpb24/Yi5zZXRMYWJlbChhKTooYS5sYWJlbCYmYi5zZXRMYWJlbChhLmxhYmVsKSxhLmxvY2F0aW9uJiZiLnNldExvY2F0aW9uKGEubG9jYXRpb24pKTtlbHNle3ZhciBjPWEuY29uc3RydWN0b3I9PVN0cmluZ3x8YS5jb25zdHJ1Y3Rvcj09RnVuY3Rpb24/e2xhYmVsOmF9OmE7Yj1lKHRoaXMsYyksdGhpcy5fanNQbHVtYi5vdmVybGF5c1tkXT1ifXRoaXMuX2pzUGx1bWIuaW5zdGFuY2UuaXNTdXNwZW5kRHJhd2luZygpfHx0aGlzLnJlcGFpbnQoKX0sY2xlYW51cDpmdW5jdGlvbihhKXtmb3IodmFyIGIgaW4gdGhpcy5fanNQbHVtYi5vdmVybGF5cyl0aGlzLl9qc1BsdW1iLm92ZXJsYXlzW2JdLmNsZWFudXAoYSksdGhpcy5fanNQbHVtYi5vdmVybGF5c1tiXS5kZXN0cm95KGEpO2EmJih0aGlzLl9qc1BsdW1iLm92ZXJsYXlzPXt9LHRoaXMuX2pzUGx1bWIub3ZlcmxheVBvc2l0aW9ucz1udWxsKX0sc2V0VmlzaWJsZTpmdW5jdGlvbihhKXt0aGlzW2E/XCJzaG93T3ZlcmxheXNcIjpcImhpZGVPdmVybGF5c1wiXSgpfSxzZXRBYnNvbHV0ZU92ZXJsYXlQb3NpdGlvbjpmdW5jdGlvbihhLGIpe3RoaXMuX2pzUGx1bWIub3ZlcmxheVBvc2l0aW9uc1thLmlkXT1ifSxnZXRBYnNvbHV0ZU92ZXJsYXlQb3NpdGlvbjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5fanNQbHVtYi5vdmVybGF5UG9zaXRpb25zP3RoaXMuX2pzUGx1bWIub3ZlcmxheVBvc2l0aW9uc1thLmlkXTpudWxsfSxfY2xhenpNYW5pcDpmdW5jdGlvbihhLGIsYyl7aWYoIWMpZm9yKHZhciBkIGluIHRoaXMuX2pzUGx1bWIub3ZlcmxheXMpdGhpcy5fanNQbHVtYi5vdmVybGF5c1tkXVthK1wiQ2xhc3NcIl0oYil9LGFkZENsYXNzOmZ1bmN0aW9uKGEsYil7dGhpcy5fY2xhenpNYW5pcChcImFkZFwiLGEsYil9LHJlbW92ZUNsYXNzOmZ1bmN0aW9uKGEsYil7dGhpcy5fY2xhenpNYW5pcChcInJlbW92ZVwiLGEsYil9fSl9LmNhbGwoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dGhpcyksZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgYT10aGlzLGI9YS5qc1BsdW1iLGM9YS5qc1BsdW1iVXRpbCxkPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD0hMTtyZXR1cm57ZHJhZzpmdW5jdGlvbigpe2lmKGQpcmV0dXJuIGQ9ITEsITA7aWYoYi5lbGVtZW50KXt2YXIgZT1jLmdldFVJUG9zaXRpb24oYXJndW1lbnRzLGMuZ2V0Wm9vbSgpKTtudWxsIT1lJiZqc1BsdW1iLnNldFBvc2l0aW9uKGIuZWxlbWVudCxlKSxjLnJlcGFpbnQoYi5lbGVtZW50LGUpLGEucGFpbnQoe2FuY2hvclBvaW50OmEuYW5jaG9yLmdldEN1cnJlbnRMb2NhdGlvbih7ZWxlbWVudDphfSl9KX19LHN0b3BEcmFnOmZ1bmN0aW9uKCl7ZD0hMH19fSxlPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWpzUGx1bWIuY3JlYXRlRWxlbWVudChcImRpdlwiLHtwb3NpdGlvbjpcImFic29sdXRlXCJ9KTtiLmFwcGVuZEVsZW1lbnQoZSk7dmFyIGY9Yi5nZXRJZChlKTtqc1BsdW1iLnNldFBvc2l0aW9uKGUsYyksZS5zdHlsZS53aWR0aD1kWzBdK1wicHhcIixlLnN0eWxlLmhlaWdodD1kWzFdK1wicHhcIixiLm1hbmFnZShmLGUsITApLGEuaWQ9ZixhLmVsZW1lbnQ9ZX0sZj1mdW5jdGlvbihhLGMsZCxlLGYsZyxoLGkpe3ZhciBqPW5ldyBiLkZsb2F0aW5nQW5jaG9yKHtyZWZlcmVuY2U6YyxyZWZlcmVuY2VDYW52YXM6ZSxqc1BsdW1iSW5zdGFuY2U6Z30pO3JldHVybiBoKHtwYWludFN0eWxlOmEsZW5kcG9pbnQ6ZCxhbmNob3I6aixzb3VyY2U6ZixzY29wZTppfSl9LGc9W1wiY29ubmVjdG9yU3R5bGVcIixcImNvbm5lY3RvckhvdmVyU3R5bGVcIixcImNvbm5lY3Rvck92ZXJsYXlzXCIsXCJjb25uZWN0b3JcIixcImNvbm5lY3Rpb25UeXBlXCIsXCJjb25uZWN0b3JDbGFzc1wiLFwiY29ubmVjdG9ySG92ZXJDbGFzc1wiXSxoPWZ1bmN0aW9uKGEsYil7dmFyIGM9MDtpZihudWxsIT1iKWZvcih2YXIgZD0wO2Q8YS5jb25uZWN0aW9ucy5sZW5ndGg7ZCsrKWlmKGEuY29ubmVjdGlvbnNbZF0uc291cmNlSWQ9PWJ8fGEuY29ubmVjdGlvbnNbZF0udGFyZ2V0SWQ9PWIpe2M9ZDticmVha31yZXR1cm4gYS5jb25uZWN0aW9uc1tjXX07Yi5FbmRwb2ludD1mdW5jdGlvbihhKXt2YXIgaT1hLl9qc1BsdW1iLGo9YS5uZXdDb25uZWN0aW9uLGs9YS5uZXdFbmRwb2ludDt0aGlzLmlkUHJlZml4PVwiX2pzcGx1bWJfZV9cIix0aGlzLmRlZmF1bHRMYWJlbExvY2F0aW9uPVsuNSwuNV0sdGhpcy5kZWZhdWx0T3ZlcmxheUtleXM9W1wiT3ZlcmxheXNcIixcIkVuZHBvaW50T3ZlcmxheXNcIl0sYi5PdmVybGF5Q2FwYWJsZUpzUGx1bWJVSUNvbXBvbmVudC5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy5hcHBlbmRUb0RlZmF1bHRUeXBlKHtjb25uZWN0aW9uVHlwZTphLmNvbm5lY3Rpb25UeXBlLG1heENvbm5lY3Rpb25zOm51bGw9PWEubWF4Q29ubmVjdGlvbnM/dGhpcy5fanNQbHVtYi5pbnN0YW5jZS5EZWZhdWx0cy5NYXhDb25uZWN0aW9uczphLm1heENvbm5lY3Rpb25zLHBhaW50U3R5bGU6YS5lbmRwb2ludFN0eWxlfHxhLnBhaW50U3R5bGV8fGEuc3R5bGV8fHRoaXMuX2pzUGx1bWIuaW5zdGFuY2UuRGVmYXVsdHMuRW5kcG9pbnRTdHlsZXx8Yi5EZWZhdWx0cy5FbmRwb2ludFN0eWxlLGhvdmVyUGFpbnRTdHlsZTphLmVuZHBvaW50SG92ZXJTdHlsZXx8YS5ob3ZlclBhaW50U3R5bGV8fHRoaXMuX2pzUGx1bWIuaW5zdGFuY2UuRGVmYXVsdHMuRW5kcG9pbnRIb3ZlclN0eWxlfHxiLkRlZmF1bHRzLkVuZHBvaW50SG92ZXJTdHlsZSxjb25uZWN0b3JTdHlsZTphLmNvbm5lY3RvclN0eWxlLGNvbm5lY3RvckhvdmVyU3R5bGU6YS5jb25uZWN0b3JIb3ZlclN0eWxlLGNvbm5lY3RvckNsYXNzOmEuY29ubmVjdG9yQ2xhc3MsY29ubmVjdG9ySG92ZXJDbGFzczphLmNvbm5lY3RvckhvdmVyQ2xhc3MsY29ubmVjdG9yT3ZlcmxheXM6YS5jb25uZWN0b3JPdmVybGF5cyxjb25uZWN0b3I6YS5jb25uZWN0b3IsY29ubmVjdG9yVG9vbHRpcDphLmNvbm5lY3RvclRvb2x0aXB9KSx0aGlzLl9qc1BsdW1iLmVuYWJsZWQ9IShhLmVuYWJsZWQ9PT0hMSksdGhpcy5fanNQbHVtYi52aXNpYmxlPSEwLHRoaXMuZWxlbWVudD1iLmdldEVsZW1lbnQoYS5zb3VyY2UpLHRoaXMuX2pzUGx1bWIudXVpZD1hLnV1aWQsdGhpcy5fanNQbHVtYi5mbG9hdGluZ0VuZHBvaW50PW51bGw7dmFyIGw9bnVsbDt0aGlzLl9qc1BsdW1iLnV1aWQmJihhLmVuZHBvaW50c0J5VVVJRFt0aGlzLl9qc1BsdW1iLnV1aWRdPXRoaXMpLHRoaXMuZWxlbWVudElkPWEuZWxlbWVudElkLHRoaXMuZHJhZ1Byb3h5PWEuZHJhZ1Byb3h5LHRoaXMuX2pzUGx1bWIuY29ubmVjdGlvbkNvc3Q9YS5jb25uZWN0aW9uQ29zdCx0aGlzLl9qc1BsdW1iLmNvbm5lY3Rpb25zRGlyZWN0ZWQ9YS5jb25uZWN0aW9uc0RpcmVjdGVkLHRoaXMuX2pzUGx1bWIuY3VycmVudEFuY2hvckNsYXNzPVwiXCIsdGhpcy5fanNQbHVtYi5ldmVudHM9e307dmFyIG09ZnVuY3Rpb24oKXt2YXIgYT1pLmVuZHBvaW50QW5jaG9yQ2xhc3NQcmVmaXgrXCItXCIrdGhpcy5fanNQbHVtYi5jdXJyZW50QW5jaG9yQ2xhc3M7dGhpcy5fanNQbHVtYi5jdXJyZW50QW5jaG9yQ2xhc3M9dGhpcy5hbmNob3IuZ2V0Q3NzQ2xhc3MoKTt2YXIgYz1pLmVuZHBvaW50QW5jaG9yQ2xhc3NQcmVmaXgrKHRoaXMuX2pzUGx1bWIuY3VycmVudEFuY2hvckNsYXNzP1wiLVwiK3RoaXMuX2pzUGx1bWIuY3VycmVudEFuY2hvckNsYXNzOlwiXCIpO3RoaXMucmVtb3ZlQ2xhc3MoYSksdGhpcy5hZGRDbGFzcyhjKSxiLnVwZGF0ZUNsYXNzZXModGhpcy5lbGVtZW50LGMsYSl9LmJpbmQodGhpcyk7dGhpcy5wcmVwYXJlQW5jaG9yPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2pzUGx1bWIuaW5zdGFuY2UubWFrZUFuY2hvcihhLHRoaXMuZWxlbWVudElkLGkpO3JldHVybiBiLmJpbmQoXCJhbmNob3JDaGFuZ2VkXCIsZnVuY3Rpb24oYSl7dGhpcy5maXJlKFwiYW5jaG9yQ2hhbmdlZFwiLHtlbmRwb2ludDp0aGlzLGFuY2hvcjphfSksbSgpfS5iaW5kKHRoaXMpKSxifSx0aGlzLnNldFByZXBhcmVkQW5jaG9yPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMuX2pzUGx1bWIuaW5zdGFuY2UuY29udGludW91c0FuY2hvckZhY3RvcnkuY2xlYXIodGhpcy5lbGVtZW50SWQpLHRoaXMuYW5jaG9yPWEsbSgpLGJ8fHRoaXMuX2pzUGx1bWIuaW5zdGFuY2UucmVwYWludCh0aGlzLmVsZW1lbnRJZCksdGhpc30sdGhpcy5zZXRBbmNob3I9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLnByZXBhcmVBbmNob3IoYSk7cmV0dXJuIHRoaXMuc2V0UHJlcGFyZWRBbmNob3IoYyxiKSx0aGlzfTt2YXIgbj1mdW5jdGlvbihhKXtpZih0aGlzLmNvbm5lY3Rpb25zLmxlbmd0aD4wKWZvcih2YXIgYj0wO2I8dGhpcy5jb25uZWN0aW9ucy5sZW5ndGg7YisrKXRoaXMuY29ubmVjdGlvbnNbYl0uc2V0SG92ZXIoYSwhMSk7ZWxzZSB0aGlzLnNldEhvdmVyKGEpfS5iaW5kKHRoaXMpO3RoaXMuYmluZChcIm1vdXNlb3ZlclwiLGZ1bmN0aW9uKCl7bighMCl9KSx0aGlzLmJpbmQoXCJtb3VzZW91dFwiLGZ1bmN0aW9uKCl7bighMSl9KSxhLl90cmFuc2llbnR8fHRoaXMuX2pzUGx1bWIuaW5zdGFuY2UuYW5jaG9yTWFuYWdlci5hZGQodGhpcyx0aGlzLmVsZW1lbnRJZCksdGhpcy5wcmVwYXJlRW5kcG9pbnQ9ZnVuY3Rpb24oZCxlKXt2YXIgZixnPWZ1bmN0aW9uKGEsYyl7dmFyIGQ9aS5nZXRSZW5kZXJNb2RlKCk7aWYoYi5FbmRwb2ludHNbZF1bYV0pcmV0dXJuIG5ldyBiLkVuZHBvaW50c1tkXVthXShjKTtpZighaS5EZWZhdWx0cy5Eb05vdFRocm93RXJyb3JzKXRocm93e21zZzpcImpzUGx1bWI6IHVua25vd24gZW5kcG9pbnQgdHlwZSAnXCIrYStcIidcIn19LGg9e19qc1BsdW1iOnRoaXMuX2pzUGx1bWIuaW5zdGFuY2UsY3NzQ2xhc3M6YS5jc3NDbGFzcyxjb250YWluZXI6YS5jb250YWluZXIsdG9vbHRpcDphLnRvb2x0aXAsY29ubmVjdG9yVG9vbHRpcDphLmNvbm5lY3RvclRvb2x0aXAsZW5kcG9pbnQ6dGhpc307XG5yZXR1cm4gYy5pc1N0cmluZyhkKT9mPWcoZCxoKTpjLmlzQXJyYXkoZCk/KGg9Yy5tZXJnZShkWzFdLGgpLGY9ZyhkWzBdLGgpKTpmPWQuY2xvbmUoKSxmLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIGMuaXNTdHJpbmcoZCk/ZyhkLGgpOmMuaXNBcnJheShkKT8oaD1jLm1lcmdlKGRbMV0saCksZyhkWzBdLGgpKTp2b2lkIDB9LmJpbmQodGhpcyksZi50eXBlSWQ9ZSxmfSx0aGlzLnNldEVuZHBvaW50PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMucHJlcGFyZUVuZHBvaW50KGEpO3RoaXMuc2V0UHJlcGFyZWRFbmRwb2ludChiLCEwKX0sdGhpcy5zZXRQcmVwYXJlZEVuZHBvaW50PWZ1bmN0aW9uKGEpe251bGwhPXRoaXMuZW5kcG9pbnQmJih0aGlzLmVuZHBvaW50LmNsZWFudXAoKSx0aGlzLmVuZHBvaW50LmRlc3Ryb3koKSksdGhpcy5lbmRwb2ludD1hLHRoaXMudHlwZT10aGlzLmVuZHBvaW50LnR5cGUsdGhpcy5jYW52YXM9dGhpcy5lbmRwb2ludC5jYW52YXN9LGIuZXh0ZW5kKHRoaXMsYSxnKSx0aGlzLmlzU291cmNlPWEuaXNTb3VyY2V8fCExLHRoaXMuaXNUZW1wb3JhcnlTb3VyY2U9YS5pc1RlbXBvcmFyeVNvdXJjZXx8ITEsdGhpcy5pc1RhcmdldD1hLmlzVGFyZ2V0fHwhMSx0aGlzLmNvbm5lY3Rpb25zPWEuY29ubmVjdGlvbnN8fFtdLHRoaXMuY29ubmVjdG9yUG9pbnRlckV2ZW50cz1hW1wiY29ubmVjdG9yLXBvaW50ZXItZXZlbnRzXCJdLHRoaXMuc2NvcGU9YS5zY29wZXx8aS5nZXREZWZhdWx0U2NvcGUoKSx0aGlzLnRpbWVzdGFtcD1udWxsLHRoaXMucmVhdHRhY2hDb25uZWN0aW9ucz1hLnJlYXR0YWNofHxpLkRlZmF1bHRzLlJlYXR0YWNoQ29ubmVjdGlvbnMsdGhpcy5jb25uZWN0aW9uc0RldGFjaGFibGU9aS5EZWZhdWx0cy5Db25uZWN0aW9uc0RldGFjaGFibGUsKGEuY29ubmVjdGlvbnNEZXRhY2hhYmxlPT09ITF8fGEuZGV0YWNoYWJsZT09PSExKSYmKHRoaXMuY29ubmVjdGlvbnNEZXRhY2hhYmxlPSExKSx0aGlzLmRyYWdBbGxvd2VkV2hlbkZ1bGw9YS5kcmFnQWxsb3dlZFdoZW5GdWxsIT09ITEsYS5vbk1heENvbm5lY3Rpb25zJiZ0aGlzLmJpbmQoXCJtYXhDb25uZWN0aW9uc1wiLGEub25NYXhDb25uZWN0aW9ucyksdGhpcy5hZGRDb25uZWN0aW9uPWZ1bmN0aW9uKGEpe3RoaXMuY29ubmVjdGlvbnMucHVzaChhKSx0aGlzWyh0aGlzLmNvbm5lY3Rpb25zLmxlbmd0aD4wP1wiYWRkXCI6XCJyZW1vdmVcIikrXCJDbGFzc1wiXShpLmVuZHBvaW50Q29ubmVjdGVkQ2xhc3MpLHRoaXNbKHRoaXMuaXNGdWxsKCk/XCJhZGRcIjpcInJlbW92ZVwiKStcIkNsYXNzXCJdKGkuZW5kcG9pbnRGdWxsQ2xhc3MpfSx0aGlzLmRldGFjaEZyb21Db25uZWN0aW9uPWZ1bmN0aW9uKGEsYixjKXtiPW51bGw9PWI/dGhpcy5jb25uZWN0aW9ucy5pbmRleE9mKGEpOmIsYj49MCYmKHRoaXMuY29ubmVjdGlvbnMuc3BsaWNlKGIsMSksdGhpc1sodGhpcy5jb25uZWN0aW9ucy5sZW5ndGg+MD9cImFkZFwiOlwicmVtb3ZlXCIpK1wiQ2xhc3NcIl0oaS5lbmRwb2ludENvbm5lY3RlZENsYXNzKSx0aGlzWyh0aGlzLmlzRnVsbCgpP1wiYWRkXCI6XCJyZW1vdmVcIikrXCJDbGFzc1wiXShpLmVuZHBvaW50RnVsbENsYXNzKSksKHRoaXMuX2ZvcmNlRGVsZXRlT25EZXRhY2h8fCFjJiZ0aGlzLl9kZWxldGVPbkRldGFjaCkmJjA9PT10aGlzLmNvbm5lY3Rpb25zLmxlbmd0aCYmaS5kZWxldGVPYmplY3Qoe2VuZHBvaW50OnRoaXMsZmlyZUV2ZW50OiExLGRlbGV0ZUF0dGFjaGVkT2JqZWN0czpjIT09ITB9KX0sdGhpcy5kZXRhY2g9ZnVuY3Rpb24oYSl7dmFyIGI9YS5jb25uZWN0aW9uSW5kZXgsYz1hLmNvbm5lY3Rpb24sZD1hLmlnbm9yZVRhcmdldCxlPWEuZmlyZUV2ZW50LGY9YS5vcmlnaW5hbEV2ZW50LGc9YS5lbmRwb2ludEJlaW5nRGVsZXRlZCxoPWEuZm9yY2VEZXRhY2gsaj1udWxsPT1iP3RoaXMuY29ubmVjdGlvbnMuaW5kZXhPZihjKTpiLGs9ITE7cmV0dXJuIGU9ZSE9PSExLGo+PTAmJihofHxjLl9mb3JjZURldGFjaHx8Yy5pc0RldGFjaGFibGUoKSYmYy5pc0RldGFjaEFsbG93ZWQoYykmJnRoaXMuaXNEZXRhY2hBbGxvd2VkKGMpJiZpLmNoZWNrQ29uZGl0aW9uKFwiYmVmb3JlRGV0YWNoXCIsYyxnKSkmJihpLmRlbGV0ZU9iamVjdCh7Y29ubmVjdGlvbjpjLGZpcmVFdmVudDohZCYmZSxvcmlnaW5hbEV2ZW50OmYsZGVsZXRlQXR0YWNoZWRPYmplY3RzOmEuZGVsZXRlQXR0YWNoZWRPYmplY3RzfSksaz0hMCksa30sdGhpcy5kZXRhY2hBbGw9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9W107dGhpcy5jb25uZWN0aW9ucy5sZW5ndGg+MDspe3ZhciBkPXRoaXMuZGV0YWNoKHtjb25uZWN0aW9uOnRoaXMuY29ubmVjdGlvbnNbMF0saWdub3JlVGFyZ2V0OiExLGZvcmNlRGV0YWNoOmI9PT0hMCxmaXJlRXZlbnQ6YSE9PSExLG9yaWdpbmFsRXZlbnQ6bnVsbCxlbmRwb2ludEJlaW5nRGVsZXRlZDp0aGlzLGNvbm5lY3Rpb25JbmRleDowfSk7ZHx8KGMucHVzaCh0aGlzLmNvbm5lY3Rpb25zWzBdKSx0aGlzLmNvbm5lY3Rpb25zLnNwbGljZSgwLDEpKX1yZXR1cm4gdGhpcy5jb25uZWN0aW9ucz1jLHRoaXN9LHRoaXMuZGV0YWNoRnJvbT1mdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPVtdLGU9MDtlPHRoaXMuY29ubmVjdGlvbnMubGVuZ3RoO2UrKykodGhpcy5jb25uZWN0aW9uc1tlXS5lbmRwb2ludHNbMV09PWF8fHRoaXMuY29ubmVjdGlvbnNbZV0uZW5kcG9pbnRzWzBdPT1hKSYmZC5wdXNoKHRoaXMuY29ubmVjdGlvbnNbZV0pO2Zvcih2YXIgZj0wO2Y8ZC5sZW5ndGg7ZisrKXRoaXMuZGV0YWNoKHtjb25uZWN0aW9uOmRbZl0saWdub3JlVGFyZ2V0OiExLGZvcmNlRGV0YWNoOiEwLGZpcmVFdmVudDpiLG9yaWdpbmFsRXZlbnQ6Y30pO3JldHVybiB0aGlzfSx0aGlzLmdldEVsZW1lbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbGVtZW50fSx0aGlzLnNldEVsZW1lbnQ9ZnVuY3Rpb24oZCl7dmFyIGU9dGhpcy5fanNQbHVtYi5pbnN0YW5jZS5nZXRJZChkKSxmPXRoaXMuZWxlbWVudElkO3JldHVybiBjLnJlbW92ZVdpdGhGdW5jdGlvbihhLmVuZHBvaW50c0J5RWxlbWVudFt0aGlzLmVsZW1lbnRJZF0sZnVuY3Rpb24oYSl7cmV0dXJuIGEuaWQ9PXRoaXMuaWR9LmJpbmQodGhpcykpLHRoaXMuZWxlbWVudD1iLmdldEVsZW1lbnQoZCksdGhpcy5lbGVtZW50SWQ9aS5nZXRJZCh0aGlzLmVsZW1lbnQpLGkuYW5jaG9yTWFuYWdlci5yZWhvbWVFbmRwb2ludCh0aGlzLGYsdGhpcy5lbGVtZW50KSxpLmRyYWdNYW5hZ2VyLmVuZHBvaW50QWRkZWQodGhpcy5lbGVtZW50KSxjLmFkZFRvTGlzdChhLmVuZHBvaW50c0J5RWxlbWVudCxlLHRoaXMpLHRoaXN9LHRoaXMubWFrZUluUGxhY2VDb3B5PWZ1bmN0aW9uKCl7dmFyIGI9dGhpcy5hbmNob3IuZ2V0Q3VycmVudExvY2F0aW9uKHtlbGVtZW50OnRoaXN9KSxjPXRoaXMuYW5jaG9yLmdldE9yaWVudGF0aW9uKHRoaXMpLGQ9dGhpcy5hbmNob3IuZ2V0Q3NzQ2xhc3MoKSxlPXtiaW5kOmZ1bmN0aW9uKCl7fSxjb21wdXRlOmZ1bmN0aW9uKCl7cmV0dXJuW2JbMF0sYlsxXV19LGdldEN1cnJlbnRMb2NhdGlvbjpmdW5jdGlvbigpe3JldHVybltiWzBdLGJbMV1dfSxnZXRPcmllbnRhdGlvbjpmdW5jdGlvbigpe3JldHVybiBjfSxnZXRDc3NDbGFzczpmdW5jdGlvbigpe3JldHVybiBkfX07cmV0dXJuIGsoe2Ryb3BPcHRpb25zOmEuZHJvcE9wdGlvbnMsYW5jaG9yOmUsc291cmNlOnRoaXMuZWxlbWVudCxwYWludFN0eWxlOnRoaXMuZ2V0UGFpbnRTdHlsZSgpLGVuZHBvaW50OmEuaGlkZU9uRHJhZz9cIkJsYW5rXCI6dGhpcy5lbmRwb2ludCxfdHJhbnNpZW50OiEwLHNjb3BlOnRoaXMuc2NvcGUscmVmZXJlbmNlOnRoaXN9KX0sdGhpcy5jb25uZWN0b3JTZWxlY3Rvcj1mdW5jdGlvbigpe3ZhciBhPXRoaXMuY29ubmVjdGlvbnNbMF07cmV0dXJuIGE/YTp0aGlzLmNvbm5lY3Rpb25zLmxlbmd0aDx0aGlzLl9qc1BsdW1iLm1heENvbm5lY3Rpb25zfHwtMT09dGhpcy5fanNQbHVtYi5tYXhDb25uZWN0aW9ucz9udWxsOmF9LHRoaXMuc2V0U3R5bGU9dGhpcy5zZXRQYWludFN0eWxlLHRoaXMucGFpbnQ9ZnVuY3Rpb24oYSl7YT1hfHx7fTt2YXIgYj1hLnRpbWVzdGFtcCxjPSEoYS5yZWNhbGM9PT0hMSk7aWYoIWJ8fHRoaXMudGltZXN0YW1wIT09Yil7dmFyIGQ9aS51cGRhdGVPZmZzZXQoe2VsSWQ6dGhpcy5lbGVtZW50SWQsdGltZXN0YW1wOmJ9KSxlPWEub2Zmc2V0P2Eub2Zmc2V0Lm86ZC5vO2lmKG51bGwhPWUpe3ZhciBmPWEuYW5jaG9yUG9pbnQsZz1hLmNvbm5lY3RvclBhaW50U3R5bGU7aWYobnVsbD09Zil7dmFyIGo9YS5kaW1lbnNpb25zfHxkLnMsaz17eHk6W2UubGVmdCxlLnRvcF0sd2g6aixlbGVtZW50OnRoaXMsdGltZXN0YW1wOmJ9O2lmKGMmJnRoaXMuYW5jaG9yLmlzRHluYW1pYyYmdGhpcy5jb25uZWN0aW9ucy5sZW5ndGg+MCl7dmFyIGw9aCh0aGlzLGEuZWxlbWVudFdpdGhQcmVjZWRlbmNlKSxtPWwuZW5kcG9pbnRzWzBdPT10aGlzPzE6MCxuPTA9PT1tP2wuc291cmNlSWQ6bC50YXJnZXRJZCxvPWkuZ2V0Q2FjaGVkRGF0YShuKSxwPW8ubyxxPW8ucztrLnR4eT1bcC5sZWZ0LHAudG9wXSxrLnR3aD1xLGsudEVsZW1lbnQ9bC5lbmRwb2ludHNbbV19Zj10aGlzLmFuY2hvci5jb21wdXRlKGspfXRoaXMuZW5kcG9pbnQuY29tcHV0ZShmLHRoaXMuYW5jaG9yLmdldE9yaWVudGF0aW9uKHRoaXMpLHRoaXMuX2pzUGx1bWIucGFpbnRTdHlsZUluVXNlLGd8fHRoaXMucGFpbnRTdHlsZUluVXNlKSx0aGlzLmVuZHBvaW50LnBhaW50KHRoaXMuX2pzUGx1bWIucGFpbnRTdHlsZUluVXNlLHRoaXMuYW5jaG9yKSx0aGlzLnRpbWVzdGFtcD1iO2Zvcih2YXIgciBpbiB0aGlzLl9qc1BsdW1iLm92ZXJsYXlzKWlmKHRoaXMuX2pzUGx1bWIub3ZlcmxheXMuaGFzT3duUHJvcGVydHkocikpe3ZhciBzPXRoaXMuX2pzUGx1bWIub3ZlcmxheXNbcl07cy5pc1Zpc2libGUoKSYmKHRoaXMuX2pzUGx1bWIub3ZlcmxheVBsYWNlbWVudHNbcl09cy5kcmF3KHRoaXMuZW5kcG9pbnQsdGhpcy5fanNQbHVtYi5wYWludFN0eWxlSW5Vc2UpLHMucGFpbnQodGhpcy5fanNQbHVtYi5vdmVybGF5UGxhY2VtZW50c1tyXSkpfX19fSx0aGlzLmdldFR5cGVEZXNjcmlwdG9yPWZ1bmN0aW9uKCl7cmV0dXJuXCJlbmRwb2ludFwifSx0aGlzLmlzVmlzaWJsZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9qc1BsdW1iLnZpc2libGV9LHRoaXMucmVwYWludD10aGlzLnBhaW50O3ZhciBvPSExO3RoaXMuaW5pdERyYWdnYWJsZT1mdW5jdGlvbigpe2lmKCFvJiZiLmlzRHJhZ1N1cHBvcnRlZCh0aGlzLmVsZW1lbnQpKXt2YXIgZyxoPXtpZDpudWxsLGVsZW1lbnQ6bnVsbH0sbT1udWxsLG49ITEscD1udWxsLHE9ZCh0aGlzLGgsaSkscj1hLmRyYWdPcHRpb25zfHx7fSxzPXt9LHQ9Yi5kcmFnRXZlbnRzLnN0YXJ0LHU9Yi5kcmFnRXZlbnRzLnN0b3Asdj1iLmRyYWdFdmVudHMuZHJhZyx3PWIuZHJhZ0V2ZW50cy5iZWZvcmVTdGFydCx4PWZ1bmN0aW9uKGEpe2c9YS5lLnBheWxvYWR8fHt9fSx5PWZ1bmN0aW9uKCl7bT10aGlzLmNvbm5lY3RvclNlbGVjdG9yKCk7dmFyIGQ9ITA7dGhpcy5pc0VuYWJsZWQoKXx8KGQ9ITEpLG51bGwhPW18fHRoaXMuaXNTb3VyY2V8fHRoaXMuaXNUZW1wb3JhcnlTb3VyY2V8fChkPSExKSwhdGhpcy5pc1NvdXJjZXx8IXRoaXMuaXNGdWxsKCl8fG51bGwhPW0mJnRoaXMuZHJhZ0FsbG93ZWRXaGVuRnVsbHx8KGQ9ITEpLG51bGw9PW18fG0uaXNEZXRhY2hhYmxlKHRoaXMpfHwoZD0hMSk7dmFyIGw9aS5jaGVja0NvbmRpdGlvbihudWxsPT1tP1wiYmVmb3JlRHJhZ1wiOlwiYmVmb3JlU3RhcnREZXRhY2hcIix7ZW5kcG9pbnQ6dGhpcyxzb3VyY2U6dGhpcy5lbGVtZW50LHNvdXJjZUlkOnRoaXMuZWxlbWVudElkLGNvbm5lY3Rpb246bX0pO2lmKGw9PT0hMT9kPSExOlwib2JqZWN0XCI9PXR5cGVvZiBsP2IuZXh0ZW5kKGwsZ3x8e30pOmw9Z3x8e30sZD09PSExKXJldHVybiBpLnN0b3BEcmFnJiZpLnN0b3BEcmFnKHRoaXMuY2FudmFzKSxxLnN0b3BEcmFnKCksITE7Zm9yKHZhciBvPTA7bzx0aGlzLmNvbm5lY3Rpb25zLmxlbmd0aDtvKyspdGhpcy5jb25uZWN0aW9uc1tvXS5zZXRIb3ZlcighMSk7dGhpcy5hZGRDbGFzcyhcImVuZHBvaW50RHJhZ1wiKSxpLnNldENvbm5lY3Rpb25CZWluZ0RyYWdnZWQoITApLG0mJiF0aGlzLmlzRnVsbCgpJiZ0aGlzLmlzU291cmNlJiYobT1udWxsKSxpLnVwZGF0ZU9mZnNldCh7ZWxJZDp0aGlzLmVsZW1lbnRJZH0pO3ZhciByPXRoaXMuX2pzUGx1bWIuaW5zdGFuY2UuZ2V0T2Zmc2V0KHRoaXMuY2FudmFzKSxzPXRoaXMuY2FudmFzLHQ9dGhpcy5fanNQbHVtYi5pbnN0YW5jZS5nZXRTaXplKHRoaXMuY2FudmFzKTtlKGgsaSxyLHQpLGkuc2V0QXR0cmlidXRlcyh0aGlzLmNhbnZhcyx7ZHJhZ0lkOmguaWQsZWxJZDp0aGlzLmVsZW1lbnRJZH0pO3ZhciB1PXRoaXMuZHJhZ1Byb3h5fHx0aGlzLmVuZHBvaW50O2lmKG51bGw9PXRoaXMuZHJhZ1Byb3h5JiZudWxsIT10aGlzLmNvbm5lY3Rpb25UeXBlKXt2YXIgdj10aGlzLl9qc1BsdW1iLmluc3RhbmNlLmRlcml2ZUVuZHBvaW50QW5kQW5jaG9yU3BlYyh0aGlzLmNvbm5lY3Rpb25UeXBlKTt2LmVuZHBvaW50c1sxXSYmKHU9di5lbmRwb2ludHNbMV0pfXZhciB3PXRoaXMuX2pzUGx1bWIuaW5zdGFuY2UubWFrZUFuY2hvcihcIkNlbnRlclwiKTt3LmlzRmxvYXRpbmc9ITAsdGhpcy5fanNQbHVtYi5mbG9hdGluZ0VuZHBvaW50PWYodGhpcy5nZXRQYWludFN0eWxlKCksdyx1LHRoaXMuY2FudmFzLGguZWxlbWVudCxpLGssdGhpcy5zY29wZSk7dmFyIHg9dGhpcy5fanNQbHVtYi5mbG9hdGluZ0VuZHBvaW50LmFuY2hvcjtpZihudWxsPT1tKXRoaXMuc2V0SG92ZXIoITEsITEpLG09aih7c291cmNlRW5kcG9pbnQ6dGhpcyx0YXJnZXRFbmRwb2ludDp0aGlzLl9qc1BsdW1iLmZsb2F0aW5nRW5kcG9pbnQsc291cmNlOnRoaXMuZWxlbWVudCx0YXJnZXQ6aC5lbGVtZW50LGFuY2hvcnM6W3RoaXMuYW5jaG9yLHRoaXMuX2pzUGx1bWIuZmxvYXRpbmdFbmRwb2ludC5hbmNob3JdLHBhaW50U3R5bGU6YS5jb25uZWN0b3JTdHlsZSxob3ZlclBhaW50U3R5bGU6YS5jb25uZWN0b3JIb3ZlclN0eWxlLGNvbm5lY3RvcjphLmNvbm5lY3RvcixvdmVybGF5czphLmNvbm5lY3Rvck92ZXJsYXlzLHR5cGU6dGhpcy5jb25uZWN0aW9uVHlwZSxjc3NDbGFzczp0aGlzLmNvbm5lY3RvckNsYXNzLGhvdmVyQ2xhc3M6dGhpcy5jb25uZWN0b3JIb3ZlckNsYXNzLHNjb3BlOmEuc2NvcGUsZGF0YTpsfSksbS5wZW5kaW5nPSEwLG0uYWRkQ2xhc3MoaS5kcmFnZ2luZ0NsYXNzKSx0aGlzLl9qc1BsdW1iLmZsb2F0aW5nRW5kcG9pbnQuYWRkQ2xhc3MoaS5kcmFnZ2luZ0NsYXNzKSx0aGlzLl9qc1BsdW1iLmZsb2F0aW5nRW5kcG9pbnQuYW5jaG9yPXgsaS5maXJlKFwiY29ubmVjdGlvbkRyYWdcIixtKSxpLmFuY2hvck1hbmFnZXIubmV3Q29ubmVjdGlvbihtKTtlbHNle249ITAsbS5zZXRIb3ZlcighMSk7dmFyIHk9bS5lbmRwb2ludHNbMF0uaWQ9PXRoaXMuaWQ/MDoxO3RoaXMuZGV0YWNoRnJvbUNvbm5lY3Rpb24obSxudWxsLCEwKTt2YXIgej1pLmdldERyYWdTY29wZShzKTtpLnNldEF0dHJpYnV0ZSh0aGlzLmNhbnZhcyxcIm9yaWdpbmFsU2NvcGVcIix6KSxpLmZpcmUoXCJjb25uZWN0aW9uRHJhZ1wiLG0pLDA9PT15PyhwPVttLnNvdXJjZSxtLnNvdXJjZUlkLHMsel0saS5hbmNob3JNYW5hZ2VyLnNvdXJjZUNoYW5nZWQobS5lbmRwb2ludHNbeV0uZWxlbWVudElkLGguaWQsbSxoLmVsZW1lbnQpKToocD1bbS50YXJnZXQsbS50YXJnZXRJZCxzLHpdLG0udGFyZ2V0PWguZWxlbWVudCxtLnRhcmdldElkPWguaWQsaS5hbmNob3JNYW5hZ2VyLnVwZGF0ZU90aGVyRW5kcG9pbnQobS5zb3VyY2VJZCxtLmVuZHBvaW50c1t5XS5lbGVtZW50SWQsbS50YXJnZXRJZCxtKSksbS5zdXNwZW5kZWRFbmRwb2ludD1tLmVuZHBvaW50c1t5XSxtLnN1c3BlbmRlZEVsZW1lbnQ9bS5lbmRwb2ludHNbeV0uZ2V0RWxlbWVudCgpLG0uc3VzcGVuZGVkRWxlbWVudElkPW0uZW5kcG9pbnRzW3ldLmVsZW1lbnRJZCxtLnN1c3BlbmRlZEVsZW1lbnRUeXBlPTA9PT15P1wic291cmNlXCI6XCJ0YXJnZXRcIixtLnN1c3BlbmRlZEVuZHBvaW50LnNldEhvdmVyKCExKSx0aGlzLl9qc1BsdW1iLmZsb2F0aW5nRW5kcG9pbnQucmVmZXJlbmNlRW5kcG9pbnQ9bS5zdXNwZW5kZWRFbmRwb2ludCxtLmVuZHBvaW50c1t5XT10aGlzLl9qc1BsdW1iLmZsb2F0aW5nRW5kcG9pbnQsbS5hZGRDbGFzcyhpLmRyYWdnaW5nQ2xhc3MpLHRoaXMuX2pzUGx1bWIuZmxvYXRpbmdFbmRwb2ludC5hZGRDbGFzcyhpLmRyYWdnaW5nQ2xhc3MpfWkuZmxvYXRpbmdDb25uZWN0aW9uc1toLmlkXT1tLGMuYWRkVG9MaXN0KGEuZW5kcG9pbnRzQnlFbGVtZW50LGguaWQsdGhpcy5fanNQbHVtYi5mbG9hdGluZ0VuZHBvaW50KSxpLmN1cnJlbnRseURyYWdnaW5nPSEwfS5iaW5kKHRoaXMpLHo9ZnVuY3Rpb24oKXtpZihpLnNldENvbm5lY3Rpb25CZWluZ0RyYWdnZWQoITEpLG0mJm51bGwhPW0uZW5kcG9pbnRzKXt2YXIgYT1pLmdldERyb3BFdmVudChhcmd1bWVudHMpLGI9aS5nZXRGbG9hdGluZ0FuY2hvckluZGV4KG0pO2lmKG0uZW5kcG9pbnRzWzA9PT1iPzE6MF0uYW5jaG9yLmxvY2tlZD0hMSxtLnJlbW92ZUNsYXNzKGkuZHJhZ2dpbmdDbGFzcyksdGhpcy5fanNQbHVtYiYmKG0uZGVsZXRlQ29ubmVjdGlvbk5vd3x8bS5lbmRwb2ludHNbYl09PXRoaXMuX2pzUGx1bWIuZmxvYXRpbmdFbmRwb2ludCkmJm4mJm0uc3VzcGVuZGVkRW5kcG9pbnQpezA9PT1iPyhtLmZsb2F0aW5nRWxlbWVudD1tLnNvdXJjZSxtLmZsb2F0aW5nSWQ9bS5zb3VyY2VJZCxtLmZsb2F0aW5nRW5kcG9pbnQ9bS5lbmRwb2ludHNbMF0sbS5mbG9hdGluZ0luZGV4PTAsbS5zb3VyY2U9cFswXSxtLnNvdXJjZUlkPXBbMV0pOihtLmZsb2F0aW5nRWxlbWVudD1tLnRhcmdldCxtLmZsb2F0aW5nSWQ9bS50YXJnZXRJZCxtLmZsb2F0aW5nRW5kcG9pbnQ9bS5lbmRwb2ludHNbMV0sbS5mbG9hdGluZ0luZGV4PTEsbS50YXJnZXQ9cFswXSxtLnRhcmdldElkPXBbMV0pO3ZhciBjPXRoaXMuX2pzUGx1bWIuZmxvYXRpbmdFbmRwb2ludDtpLnNldERyYWdTY29wZShwWzJdLHBbM10pLG0uZW5kcG9pbnRzW2JdPW0uc3VzcGVuZGVkRW5kcG9pbnQsbS5pc1JlYXR0YWNoKCl8fG0uX2ZvcmNlUmVhdHRhY2h8fG0uX2ZvcmNlRGV0YWNofHwhbS5lbmRwb2ludHNbMD09PWI/MTowXS5kZXRhY2goe2Nvbm5lY3Rpb246bSxpZ25vcmVUYXJnZXQ6ITEsZm9yY2VEZXRhY2g6ITEsZmlyZUV2ZW50OiEwLG9yaWdpbmFsRXZlbnQ6YSxlbmRwb2ludEJlaW5nRGVsZXRlZDohMH0pPyhtLnNldEhvdmVyKCExKSxtLl9mb3JjZURldGFjaD1udWxsLG0uX2ZvcmNlUmVhdHRhY2g9bnVsbCx0aGlzLl9qc1BsdW1iLmZsb2F0aW5nRW5kcG9pbnQuZGV0YWNoRnJvbUNvbm5lY3Rpb24obSksbS5zdXNwZW5kZWRFbmRwb2ludC5hZGRDb25uZWN0aW9uKG0pLDE9PWI/aS5hbmNob3JNYW5hZ2VyLnVwZGF0ZU90aGVyRW5kcG9pbnQobS5zb3VyY2VJZCxtLmZsb2F0aW5nSWQsbS50YXJnZXRJZCxtKTppLmFuY2hvck1hbmFnZXIuc291cmNlQ2hhbmdlZChtLmZsb2F0aW5nSWQsbS5zb3VyY2VJZCxtLG0uc291cmNlKSxpLnJlcGFpbnQocFsxXSkpOmkuZGVsZXRlT2JqZWN0KHtlbmRwb2ludDpjfSl9dGhpcy5kZWxldGVBZnRlckRyYWdTdG9wP2kuZGVsZXRlT2JqZWN0KHtlbmRwb2ludDp0aGlzfSk6dGhpcy5fanNQbHVtYiYmdGhpcy5wYWludCh7cmVjYWxjOiExfSksaS5maXJlKFwiY29ubmVjdGlvbkRyYWdTdG9wXCIsbSxhKSxtLnBlbmRpbmcmJmkuZmlyZShcImNvbm5lY3Rpb25BYm9ydGVkXCIsbSxhKSxpLmN1cnJlbnRseURyYWdnaW5nPSExLG0uc3VzcGVuZGVkRWxlbWVudD1udWxsLG0uc3VzcGVuZGVkRW5kcG9pbnQ9bnVsbCxtPW51bGx9aCYmaC5lbGVtZW50JiZpLnJlbW92ZShoLmVsZW1lbnQsITEsITEpLGwmJmkuZGVsZXRlT2JqZWN0KHtlbmRwb2ludDpsfSksdGhpcy5fanNQbHVtYiYmKHRoaXMuY2FudmFzLnN0eWxlLnZpc2liaWxpdHk9XCJ2aXNpYmxlXCIsdGhpcy5hbmNob3IubG9ja2VkPSExLHRoaXMuX2pzUGx1bWIuZmxvYXRpbmdFbmRwb2ludD1udWxsKX0uYmluZCh0aGlzKTtyPWIuZXh0ZW5kKHMsciksci5zY29wZT10aGlzLnNjb3BlfHxyLnNjb3BlLHJbd109Yy53cmFwKHJbd10seCwhMSksclt0XT1jLndyYXAoclt0XSx5LCExKSxyW3ZdPWMud3JhcChyW3ZdLHEuZHJhZyksclt1XT1jLndyYXAoclt1XSx6KSxyLm11bHRpcGxlRHJvcD0hMSxyLmNhbkRyYWc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc1NvdXJjZXx8dGhpcy5pc1RlbXBvcmFyeVNvdXJjZXx8dGhpcy5jb25uZWN0aW9ucy5sZW5ndGg+MH0uYmluZCh0aGlzKSxpLmluaXREcmFnZ2FibGUodGhpcy5jYW52YXMscixcImludGVybmFsXCIpLHRoaXMuY2FudmFzLl9qc1BsdW1iUmVsYXRlZEVsZW1lbnQ9dGhpcy5lbGVtZW50LG89ITB9fTt2YXIgcD1hLmVuZHBvaW50fHx0aGlzLl9qc1BsdW1iLmluc3RhbmNlLkRlZmF1bHRzLkVuZHBvaW50fHxiLkRlZmF1bHRzLkVuZHBvaW50O3RoaXMuc2V0RW5kcG9pbnQocCwhMCk7dmFyIHE9YS5hbmNob3I/YS5hbmNob3I6YS5hbmNob3JzP2EuYW5jaG9yczppLkRlZmF1bHRzLkFuY2hvcnx8XCJUb3BcIjt0aGlzLnNldEFuY2hvcihxLCEwKTt2YXIgcj1bXCJkZWZhdWx0XCIsYS50eXBlfHxcIlwiXS5qb2luKFwiIFwiKTt0aGlzLmFkZFR5cGUocixhLmRhdGEsITApLHRoaXMuY2FudmFzPXRoaXMuZW5kcG9pbnQuY2FudmFzLHRoaXMuY2FudmFzLl9qc1BsdW1iPXRoaXMsdGhpcy5pbml0RHJhZ2dhYmxlKCk7dmFyIHM9ZnVuY3Rpb24oZCxlLGYsZyl7aWYoYi5pc0Ryb3BTdXBwb3J0ZWQodGhpcy5lbGVtZW50KSl7dmFyIGg9YS5kcm9wT3B0aW9uc3x8aS5EZWZhdWx0cy5Ecm9wT3B0aW9uc3x8Yi5EZWZhdWx0cy5Ecm9wT3B0aW9ucztoPWIuZXh0ZW5kKHt9LGgpLGguc2NvcGU9aC5zY29wZXx8dGhpcy5zY29wZTt2YXIgaj1iLmRyYWdFdmVudHMuZHJvcCxrPWIuZHJhZ0V2ZW50cy5vdmVyLGw9Yi5kcmFnRXZlbnRzLm91dCxtPXRoaXMsbj1pLkVuZHBvaW50RHJvcEhhbmRsZXIoe2dldEVuZHBvaW50OmZ1bmN0aW9uKCl7cmV0dXJuIG19LGpzUGx1bWI6aSxlbmFibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPWY/Zi5pc0VuYWJsZWQoKTohMH0saXNGdWxsOmZ1bmN0aW9uKCl7cmV0dXJuIGYuaXNGdWxsKCl9LGVsZW1lbnQ6dGhpcy5lbGVtZW50LGVsZW1lbnRJZDp0aGlzLmVsZW1lbnRJZCxpc1NvdXJjZTp0aGlzLmlzU291cmNlLGlzVGFyZ2V0OnRoaXMuaXNUYXJnZXQsYWRkQ2xhc3M6ZnVuY3Rpb24oYSl7bS5hZGRDbGFzcyhhKX0scmVtb3ZlQ2xhc3M6ZnVuY3Rpb24oYSl7bS5yZW1vdmVDbGFzcyhhKX0saXNEcm9wQWxsb3dlZDpmdW5jdGlvbigpe3JldHVybiBtLmlzRHJvcEFsbG93ZWQuYXBwbHkobSxhcmd1bWVudHMpfSxyZWZlcmVuY2U6Zyxpc1JlZHJvcDpmdW5jdGlvbihhLGIpe3JldHVybiBhLnN1c3BlbmRlZEVuZHBvaW50JiZiLnJlZmVyZW5jZSYmYS5zdXNwZW5kZWRFbmRwb2ludC5pZD09PWIucmVmZXJlbmNlLmlkfX0pO2hbal09Yy53cmFwKGhbal0sbiwhMCksaFtrXT1jLndyYXAoaFtrXSxmdW5jdGlvbigpe3ZhciBhPWIuZ2V0RHJhZ09iamVjdChhcmd1bWVudHMpLGM9aS5nZXRBdHRyaWJ1dGUoYi5nZXRFbGVtZW50KGEpLFwiZHJhZ0lkXCIpLGQ9aS5mbG9hdGluZ0Nvbm5lY3Rpb25zW2NdO2lmKG51bGwhPWQpe3ZhciBlPWkuZ2V0RmxvYXRpbmdBbmNob3JJbmRleChkKSxmPXRoaXMuaXNUYXJnZXQmJjAhPT1lfHxkLnN1c3BlbmRlZEVuZHBvaW50JiZ0aGlzLnJlZmVyZW5jZUVuZHBvaW50JiZ0aGlzLnJlZmVyZW5jZUVuZHBvaW50LmlkPT1kLnN1c3BlbmRlZEVuZHBvaW50LmlkO2lmKGYpe3ZhciBnPWkuY2hlY2tDb25kaXRpb24oXCJjaGVja0Ryb3BBbGxvd2VkXCIse3NvdXJjZUVuZHBvaW50OmQuZW5kcG9pbnRzW2VdLHRhcmdldEVuZHBvaW50OnRoaXMsY29ubmVjdGlvbjpkfSk7dGhpc1soZz9cImFkZFwiOlwicmVtb3ZlXCIpK1wiQ2xhc3NcIl0oaS5lbmRwb2ludERyb3BBbGxvd2VkQ2xhc3MpLHRoaXNbKGc/XCJyZW1vdmVcIjpcImFkZFwiKStcIkNsYXNzXCJdKGkuZW5kcG9pbnREcm9wRm9yYmlkZGVuQ2xhc3MpLGQuZW5kcG9pbnRzW2VdLmFuY2hvci5vdmVyKHRoaXMuYW5jaG9yLHRoaXMpfX19LmJpbmQodGhpcykpLGhbbF09Yy53cmFwKGhbbF0sZnVuY3Rpb24oKXt2YXIgYT1iLmdldERyYWdPYmplY3QoYXJndW1lbnRzKSxjPW51bGw9PWE/bnVsbDppLmdldEF0dHJpYnV0ZShiLmdldEVsZW1lbnQoYSksXCJkcmFnSWRcIiksZD1jP2kuZmxvYXRpbmdDb25uZWN0aW9uc1tjXTpudWxsO2lmKG51bGwhPWQpe3ZhciBlPWkuZ2V0RmxvYXRpbmdBbmNob3JJbmRleChkKSxmPXRoaXMuaXNUYXJnZXQmJjAhPT1lfHxkLnN1c3BlbmRlZEVuZHBvaW50JiZ0aGlzLnJlZmVyZW5jZUVuZHBvaW50JiZ0aGlzLnJlZmVyZW5jZUVuZHBvaW50LmlkPT1kLnN1c3BlbmRlZEVuZHBvaW50LmlkO2YmJih0aGlzLnJlbW92ZUNsYXNzKGkuZW5kcG9pbnREcm9wQWxsb3dlZENsYXNzKSx0aGlzLnJlbW92ZUNsYXNzKGkuZW5kcG9pbnREcm9wRm9yYmlkZGVuQ2xhc3MpLGQuZW5kcG9pbnRzW2VdLmFuY2hvci5vdXQoKSl9fS5iaW5kKHRoaXMpKSxpLmluaXREcm9wcGFibGUoZCxoLFwiaW50ZXJuYWxcIixlKX19LmJpbmQodGhpcyk7cmV0dXJuIHRoaXMuYW5jaG9yLmlzRmxvYXRpbmd8fHModGhpcy5jYW52YXMsIShhLl90cmFuc2llbnR8fHRoaXMuYW5jaG9yLmlzRmxvYXRpbmcpLHRoaXMsYS5yZWZlcmVuY2UpLHRoaXN9LGMuZXh0ZW5kKGIuRW5kcG9pbnQsYi5PdmVybGF5Q2FwYWJsZUpzUGx1bWJVSUNvbXBvbmVudCx7c2V0VmlzaWJsZTpmdW5jdGlvbihhLGIsYyl7aWYodGhpcy5fanNQbHVtYi52aXNpYmxlPWEsdGhpcy5jYW52YXMmJih0aGlzLmNhbnZhcy5zdHlsZS5kaXNwbGF5PWE/XCJibG9ja1wiOlwibm9uZVwiKSx0aGlzW2E/XCJzaG93T3ZlcmxheXNcIjpcImhpZGVPdmVybGF5c1wiXSgpLCFiKWZvcih2YXIgZD0wO2Q8dGhpcy5jb25uZWN0aW9ucy5sZW5ndGg7ZCsrKWlmKHRoaXMuY29ubmVjdGlvbnNbZF0uc2V0VmlzaWJsZShhKSwhYyl7dmFyIGU9dGhpcz09PXRoaXMuY29ubmVjdGlvbnNbZF0uZW5kcG9pbnRzWzBdPzE6MDsxPT10aGlzLmNvbm5lY3Rpb25zW2RdLmVuZHBvaW50c1tlXS5jb25uZWN0aW9ucy5sZW5ndGgmJnRoaXMuY29ubmVjdGlvbnNbZF0uZW5kcG9pbnRzW2VdLnNldFZpc2libGUoYSwhMCwhMCl9fSxnZXRBdHRhY2hlZEVsZW1lbnRzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29ubmVjdGlvbnN9LGFwcGx5VHlwZTpmdW5jdGlvbihhLGMpe3RoaXMuc2V0UGFpbnRTdHlsZShhLmVuZHBvaW50U3R5bGV8fGEucGFpbnRTdHlsZSxjKSx0aGlzLnNldEhvdmVyUGFpbnRTdHlsZShhLmVuZHBvaW50SG92ZXJTdHlsZXx8YS5ob3ZlclBhaW50U3R5bGUsYyksbnVsbCE9YS5tYXhDb25uZWN0aW9ucyYmKHRoaXMuX2pzUGx1bWIubWF4Q29ubmVjdGlvbnM9YS5tYXhDb25uZWN0aW9ucyksYS5zY29wZSYmKHRoaXMuc2NvcGU9YS5zY29wZSksYi5leHRlbmQodGhpcyxhLGcpLG51bGwhPWEuY3NzQ2xhc3MmJnRoaXMuY2FudmFzJiZ0aGlzLl9qc1BsdW1iLmluc3RhbmNlLmFkZENsYXNzKHRoaXMuY2FudmFzLGEuY3NzQ2xhc3MpLGIuT3ZlcmxheUNhcGFibGVKc1BsdW1iVUlDb21wb25lbnQuYXBwbHlUeXBlKHRoaXMsYSl9LGlzRW5hYmxlZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9qc1BsdW1iLmVuYWJsZWR9LHNldEVuYWJsZWQ6ZnVuY3Rpb24oYSl7dGhpcy5fanNQbHVtYi5lbmFibGVkPWF9LGNsZWFudXA6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9qc1BsdW1iLmluc3RhbmNlLmVuZHBvaW50QW5jaG9yQ2xhc3NQcmVmaXgrKHRoaXMuX2pzUGx1bWIuY3VycmVudEFuY2hvckNsYXNzP1wiLVwiK3RoaXMuX2pzUGx1bWIuY3VycmVudEFuY2hvckNsYXNzOlwiXCIpO2IucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50LGEpLHRoaXMuYW5jaG9yPW51bGwsdGhpcy5lbmRwb2ludC5jbGVhbnVwKCEwKSx0aGlzLmVuZHBvaW50LmRlc3Ryb3koKSx0aGlzLmVuZHBvaW50PW51bGwsdGhpcy5fanNQbHVtYi5pbnN0YW5jZS5kZXN0cm95RHJhZ2dhYmxlKHRoaXMuY2FudmFzLFwiaW50ZXJuYWxcIiksdGhpcy5fanNQbHVtYi5pbnN0YW5jZS5kZXN0cm95RHJvcHBhYmxlKHRoaXMuY2FudmFzLFwiaW50ZXJuYWxcIil9LHNldEhvdmVyOmZ1bmN0aW9uKGEpe3RoaXMuZW5kcG9pbnQmJnRoaXMuX2pzUGx1bWImJiF0aGlzLl9qc1BsdW1iLmluc3RhbmNlLmlzQ29ubmVjdGlvbkJlaW5nRHJhZ2dlZCgpJiZ0aGlzLmVuZHBvaW50LnNldEhvdmVyKGEpfSxpc0Z1bGw6ZnVuY3Rpb24oKXtyZXR1cm4gMD09PXRoaXMuX2pzUGx1bWIubWF4Q29ubmVjdGlvbnM/ITA6ISh0aGlzLmlzRmxvYXRpbmcoKXx8dGhpcy5fanNQbHVtYi5tYXhDb25uZWN0aW9uczwwfHx0aGlzLmNvbm5lY3Rpb25zLmxlbmd0aDx0aGlzLl9qc1BsdW1iLm1heENvbm5lY3Rpb25zKX0saXNGbG9hdGluZzpmdW5jdGlvbigpe3JldHVybiBudWxsIT10aGlzLmFuY2hvciYmdGhpcy5hbmNob3IuaXNGbG9hdGluZ30saXNDb25uZWN0ZWRUbzpmdW5jdGlvbihhKXt2YXIgYj0hMTtpZihhKWZvcih2YXIgYz0wO2M8dGhpcy5jb25uZWN0aW9ucy5sZW5ndGg7YysrKWlmKHRoaXMuY29ubmVjdGlvbnNbY10uZW5kcG9pbnRzWzFdPT1hfHx0aGlzLmNvbm5lY3Rpb25zW2NdLmVuZHBvaW50c1swXT09YSl7Yj0hMDticmVha31yZXR1cm4gYn0sZ2V0Q29ubmVjdGlvbkNvc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fanNQbHVtYi5jb25uZWN0aW9uQ29zdH0sc2V0Q29ubmVjdGlvbkNvc3Q6ZnVuY3Rpb24oYSl7dGhpcy5fanNQbHVtYi5jb25uZWN0aW9uQ29zdD1hfSxhcmVDb25uZWN0aW9uc0RpcmVjdGVkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2pzUGx1bWIuY29ubmVjdGlvbnNEaXJlY3RlZH0sc2V0Q29ubmVjdGlvbnNEaXJlY3RlZDpmdW5jdGlvbihhKXt0aGlzLl9qc1BsdW1iLmNvbm5lY3Rpb25zRGlyZWN0ZWQ9YX0sc2V0RWxlbWVudElkOmZ1bmN0aW9uKGEpe3RoaXMuZWxlbWVudElkPWEsdGhpcy5hbmNob3IuZWxlbWVudElkPWF9LHNldFJlZmVyZW5jZUVsZW1lbnQ6ZnVuY3Rpb24oYSl7dGhpcy5lbGVtZW50PWIuZ2V0RWxlbWVudChhKX0sc2V0RHJhZ0FsbG93ZWRXaGVuRnVsbDpmdW5jdGlvbihhKXt0aGlzLmRyYWdBbGxvd2VkV2hlbkZ1bGw9YX0sZXF1YWxzOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmFuY2hvci5lcXVhbHMoYS5hbmNob3IpfSxnZXRVdWlkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2pzUGx1bWIudXVpZH0sY29tcHV0ZUFuY2hvcjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5hbmNob3IuY29tcHV0ZShhKX19KSxhLmpzUGx1bWJJbnN0YW5jZS5wcm90b3R5cGUuRW5kcG9pbnREcm9wSGFuZGxlcj1mdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYil7dmFyIGQ9YS5qc1BsdW1iO2EucmVtb3ZlQ2xhc3MoZC5lbmRwb2ludERyb3BBbGxvd2VkQ2xhc3MpLGEucmVtb3ZlQ2xhc3MoZC5lbmRwb2ludERyb3BGb3JiaWRkZW5DbGFzcyk7dmFyIGU9ZC5nZXREcm9wRXZlbnQoYXJndW1lbnRzKSxmPWQuZ2V0RHJhZ09iamVjdChhcmd1bWVudHMpLGc9ZC5nZXRBdHRyaWJ1dGUoZixcImRyYWdJZFwiKSxoPShkLmdldEF0dHJpYnV0ZShmLFwiZWxJZFwiKSxkLmdldEF0dHJpYnV0ZShmLFwib3JpZ2luYWxTY29wZVwiKSksaT1kLmZsb2F0aW5nQ29ubmVjdGlvbnNbZ107aWYobnVsbCE9aSl7dmFyIGo9bnVsbCE9aS5zdXNwZW5kZWRFbmRwb2ludDtpZighanx8bnVsbCE9aS5zdXNwZW5kZWRFbmRwb2ludC5fanNQbHVtYil7dmFyIGs9YS5nZXRFbmRwb2ludChpKTtpZihudWxsIT1rKXtpZihhLmlzUmVkcm9wKGksYSkpcmV0dXJuIGkuX2ZvcmNlUmVhdHRhY2g9ITAsaS5zZXRIb3ZlcighMSksYS5tYXliZUNsZWFudXAmJmEubWF5YmVDbGVhbnVwKGspLHZvaWQgMDt2YXIgbD1kLmdldEZsb2F0aW5nQW5jaG9ySW5kZXgoaSk7aWYoMD09PWwmJiFhLmlzU291cmNlfHwxPT09bCYmIWEuaXNUYXJnZXQpcmV0dXJuIGEubWF5YmVDbGVhbnVwJiZhLm1heWJlQ2xlYW51cChrKSx2b2lkIDA7YS5vbkRyb3AmJmEub25Ecm9wKGkpLGgmJmQuc2V0RHJhZ1Njb3BlKGYsaCk7dmFyIG09YS5pc0Z1bGwoYik7aWYobSYmay5maXJlKFwibWF4Q29ubmVjdGlvbnNcIix7ZW5kcG9pbnQ6dGhpcyxjb25uZWN0aW9uOmksbWF4Q29ubmVjdGlvbnM6ay5fanNQbHVtYi5tYXhDb25uZWN0aW9uc30sZSksIW0mJmEuZW5hYmxlZCgpKXt2YXIgbj0hMDswPT09bD8oaS5mbG9hdGluZ0VsZW1lbnQ9aS5zb3VyY2UsaS5mbG9hdGluZ0lkPWkuc291cmNlSWQsaS5mbG9hdGluZ0VuZHBvaW50PWkuZW5kcG9pbnRzWzBdLGkuZmxvYXRpbmdJbmRleD0wLGkuc291cmNlPWEuZWxlbWVudCxpLnNvdXJjZUlkPWEuZWxlbWVudElkKTooaS5mbG9hdGluZ0VsZW1lbnQ9aS50YXJnZXQsaS5mbG9hdGluZ0lkPWkudGFyZ2V0SWQsaS5mbG9hdGluZ0VuZHBvaW50PWkuZW5kcG9pbnRzWzFdLGkuZmxvYXRpbmdJbmRleD0xLGkudGFyZ2V0PWEuZWxlbWVudCxpLnRhcmdldElkPWEuZWxlbWVudElkKSxqJiZpLnN1c3BlbmRlZEVuZHBvaW50LmlkIT1rLmlkJiYoaS5pc0RldGFjaEFsbG93ZWQoaSkmJmkuZW5kcG9pbnRzW2xdLmlzRGV0YWNoQWxsb3dlZChpKSYmaS5zdXNwZW5kZWRFbmRwb2ludC5pc0RldGFjaEFsbG93ZWQoaSkmJmQuY2hlY2tDb25kaXRpb24oXCJiZWZvcmVEZXRhY2hcIixpKXx8KG49ITEpKTt2YXIgbz1mdW5jdGlvbihhKXtpLmVuZHBvaW50c1tsXS5kZXRhY2hGcm9tQ29ubmVjdGlvbihpKSxpLnN1c3BlbmRlZEVuZHBvaW50JiZpLnN1c3BlbmRlZEVuZHBvaW50LmRldGFjaEZyb21Db25uZWN0aW9uKGkpLGkuZW5kcG9pbnRzW2xdPWssay5hZGRDb25uZWN0aW9uKGkpO3ZhciBiPWsuZ2V0UGFyYW1ldGVycygpO2Zvcih2YXIgZiBpbiBiKWkuc2V0UGFyYW1ldGVyKGYsYltmXSk7aWYoail7dmFyIGc9aS5zdXNwZW5kZWRFbmRwb2ludC5lbGVtZW50SWQ7ZC5maXJlTW92ZUV2ZW50KHtpbmRleDpsLG9yaWdpbmFsU291cmNlSWQ6MD09PWw/ZzppLnNvdXJjZUlkLG5ld1NvdXJjZUlkOjA9PT1sP2suZWxlbWVudElkOmkuc291cmNlSWQsb3JpZ2luYWxUYXJnZXRJZDoxPT1sP2c6aS50YXJnZXRJZCxuZXdUYXJnZXRJZDoxPT1sP2suZWxlbWVudElkOmkudGFyZ2V0SWQsb3JpZ2luYWxTb3VyY2VFbmRwb2ludDowPT09bD9pLnN1c3BlbmRlZEVuZHBvaW50OmkuZW5kcG9pbnRzWzBdLG5ld1NvdXJjZUVuZHBvaW50OjA9PT1sP2s6aS5lbmRwb2ludHNbMF0sb3JpZ2luYWxUYXJnZXRFbmRwb2ludDoxPT1sP2kuc3VzcGVuZGVkRW5kcG9pbnQ6aS5lbmRwb2ludHNbMV0sbmV3VGFyZ2V0RW5kcG9pbnQ6MT09bD9rOmkuZW5kcG9pbnRzWzFdLGNvbm5lY3Rpb246aX0sZSl9ZWxzZSBiLmRyYWdnYWJsZSYmZC5pbml0RHJhZ2dhYmxlKHRoaXMuZWxlbWVudCxkcmFnT3B0aW9ucyxcImludGVybmFsXCIsZCk7aWYoMT09bD9kLmFuY2hvck1hbmFnZXIudXBkYXRlT3RoZXJFbmRwb2ludChpLnNvdXJjZUlkLGkuZmxvYXRpbmdJZCxpLnRhcmdldElkLGkpOmQuYW5jaG9yTWFuYWdlci5zb3VyY2VDaGFuZ2VkKGkuZmxvYXRpbmdJZCxpLnNvdXJjZUlkLGksaS5zb3VyY2UpLGkuZW5kcG9pbnRzWzBdLmZpbmFsRW5kcG9pbnQpe3ZhciBoPWkuZW5kcG9pbnRzWzBdO2guZGV0YWNoRnJvbUNvbm5lY3Rpb24oaSksaS5lbmRwb2ludHNbMF09aS5lbmRwb2ludHNbMF0uZmluYWxFbmRwb2ludCxpLmVuZHBvaW50c1swXS5hZGRDb25uZWN0aW9uKGkpfWMuaXNPYmplY3QoYSkmJmkubWVyZ2VEYXRhKGEpLGQuZmluYWxpc2VDb25uZWN0aW9uKGksbnVsbCxlLCExKSxpLnNldEhvdmVyKCExKX0uYmluZCh0aGlzKSxwPWZ1bmN0aW9uKCl7aS5zdXNwZW5kZWRFbmRwb2ludCYmKGkuZW5kcG9pbnRzW2xdPWkuc3VzcGVuZGVkRW5kcG9pbnQsaS5zZXRIb3ZlcighMSksaS5fZm9yY2VEZXRhY2g9ITAsMD09PWw/KGkuc291cmNlPWkuc3VzcGVuZGVkRW5kcG9pbnQuZWxlbWVudCxpLnNvdXJjZUlkPWkuc3VzcGVuZGVkRW5kcG9pbnQuZWxlbWVudElkKTooaS50YXJnZXQ9aS5zdXNwZW5kZWRFbmRwb2ludC5lbGVtZW50LGkudGFyZ2V0SWQ9aS5zdXNwZW5kZWRFbmRwb2ludC5lbGVtZW50SWQpLGkuc3VzcGVuZGVkRW5kcG9pbnQuYWRkQ29ubmVjdGlvbihpKSwxPT1sP2QuYW5jaG9yTWFuYWdlci51cGRhdGVPdGhlckVuZHBvaW50KGkuc291cmNlSWQsaS5mbG9hdGluZ0lkLGkudGFyZ2V0SWQsaSk6ZC5hbmNob3JNYW5hZ2VyLnNvdXJjZUNoYW5nZWQoaS5mbG9hdGluZ0lkLGkuc291cmNlSWQsaSxpLnNvdXJjZSksZC5yZXBhaW50KGkuc291cmNlSWQpLGkuX2ZvcmNlRGV0YWNoPSExKX07aWYobj1uJiZhLmlzRHJvcEFsbG93ZWQoaS5zb3VyY2VJZCxpLnRhcmdldElkLGkuc2NvcGUsaSxrKSlyZXR1cm4gbyhuKSwhMDtwKCl9YS5tYXliZUNsZWFudXAmJmEubWF5YmVDbGVhbnVwKGspLGQuY3VycmVudGx5RHJhZ2dpbmc9ITF9fX19fX0uY2FsbChcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp0aGlzKSxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBhPXRoaXMsYj1hLmpzUGx1bWIsYz1hLmpzUGx1bWJVdGlsLGQ9ZnVuY3Rpb24oYSxjLGQsZSxmKXtpZighYS5EZWZhdWx0cy5Eb05vdFRocm93RXJyb3JzJiZudWxsPT1iLkNvbm5lY3RvcnNbY11bZF0pdGhyb3d7bXNnOlwianNQbHVtYjogdW5rbm93biBjb25uZWN0b3IgdHlwZSAnXCIrZCtcIidcIn07cmV0dXJuIG5ldyBiLkNvbm5lY3RvcnNbY11bZF0oZSxmKX0sZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIGE/Yy5tYWtlQW5jaG9yKGEsYixjKTpudWxsfSxmPWZ1bmN0aW9uKGEsYixkLGUpe251bGwhPWImJihiLl9qc1BsdW1iQ29ubmVjdGlvbnM9Yi5fanNQbHVtYkNvbm5lY3Rpb25zfHx7fSxlP2RlbGV0ZSBiLl9qc1BsdW1iQ29ubmVjdGlvbnNbYS5pZF06Yi5fanNQbHVtYkNvbm5lY3Rpb25zW2EuaWRdPSEwLGMuaXNFbXB0eShiLl9qc1BsdW1iQ29ubmVjdGlvbnMpP2QucmVtb3ZlQ2xhc3MoYixkLmNvbm5lY3RlZENsYXNzKTpkLmFkZENsYXNzKGIsZC5jb25uZWN0ZWRDbGFzcykpfTtiLkNvbm5lY3Rpb249ZnVuY3Rpb24oYSl7dmFyIGQ9YS5uZXdFbmRwb2ludDt0aGlzLmlkPWEuaWQsdGhpcy5jb25uZWN0b3I9bnVsbCx0aGlzLmlkUHJlZml4PVwiX2pzcGx1bWJfY19cIix0aGlzLmRlZmF1bHRMYWJlbExvY2F0aW9uPS41LHRoaXMuZGVmYXVsdE92ZXJsYXlLZXlzPVtcIk92ZXJsYXlzXCIsXCJDb25uZWN0aW9uT3ZlcmxheXNcIl0sdGhpcy5wcmV2aW91c0Nvbm5lY3Rpb249YS5wcmV2aW91c0Nvbm5lY3Rpb24sdGhpcy5zb3VyY2U9Yi5nZXRFbGVtZW50KGEuc291cmNlKSx0aGlzLnRhcmdldD1iLmdldEVsZW1lbnQoYS50YXJnZXQpLGEuc291cmNlRW5kcG9pbnQmJih0aGlzLnNvdXJjZT1hLnNvdXJjZUVuZHBvaW50LmdldEVsZW1lbnQoKSksYS50YXJnZXRFbmRwb2ludCYmKHRoaXMudGFyZ2V0PWEudGFyZ2V0RW5kcG9pbnQuZ2V0RWxlbWVudCgpKSxiLk92ZXJsYXlDYXBhYmxlSnNQbHVtYlVJQ29tcG9uZW50LmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLnNvdXJjZUlkPXRoaXMuX2pzUGx1bWIuaW5zdGFuY2UuZ2V0SWQodGhpcy5zb3VyY2UpLHRoaXMudGFyZ2V0SWQ9dGhpcy5fanNQbHVtYi5pbnN0YW5jZS5nZXRJZCh0aGlzLnRhcmdldCksdGhpcy5zY29wZT1hLnNjb3BlLHRoaXMuZW5kcG9pbnRzPVtdLHRoaXMuZW5kcG9pbnRTdHlsZXM9W107dmFyIGU9dGhpcy5fanNQbHVtYi5pbnN0YW5jZTtlLm1hbmFnZSh0aGlzLnNvdXJjZUlkLHRoaXMuc291cmNlKSxlLm1hbmFnZSh0aGlzLnRhcmdldElkLHRoaXMudGFyZ2V0KSx0aGlzLl9qc1BsdW1iLnZpc2libGU9ITAsdGhpcy5fanNQbHVtYi5lZGl0YWJsZT1hLmVkaXRhYmxlPT09ITAsdGhpcy5fanNQbHVtYi5wYXJhbXM9e2Nzc0NsYXNzOmEuY3NzQ2xhc3MsY29udGFpbmVyOmEuY29udGFpbmVyLFwicG9pbnRlci1ldmVudHNcIjphW1wicG9pbnRlci1ldmVudHNcIl0sZWRpdG9yUGFyYW1zOmEuZWRpdG9yUGFyYW1zLG92ZXJsYXlzOmEub3ZlcmxheXN9LHRoaXMuX2pzUGx1bWIubGFzdFBhaW50ZWRBdD1udWxsLHRoaXMuYmluZChcIm1vdXNlb3ZlclwiLGZ1bmN0aW9uKCl7dGhpcy5zZXRIb3ZlcighMCl9LmJpbmQodGhpcykpLHRoaXMuYmluZChcIm1vdXNlb3V0XCIsZnVuY3Rpb24oKXt0aGlzLnNldEhvdmVyKCExKX0uYmluZCh0aGlzKSksdGhpcy5lZGl0YWJsZVJlcXVlc3RlZD1hLmVkaXRhYmxlIT09ITEsdGhpcy5zZXRFZGl0YWJsZT1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5jb25uZWN0b3I/dGhpcy5jb25uZWN0b3Iuc2V0RWRpdGFibGUoYSk6ITF9LHRoaXMuaXNFZGl0YWJsZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbm5lY3Rvcj90aGlzLmNvbm5lY3Rvci5pc0VkaXRhYmxlKCk6ITF9LHRoaXMuaXNFZGl0aW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29ubmVjdG9yP3RoaXMuY29ubmVjdG9yLmlzRWRpdGluZygpOiExfSx0aGlzLm1ha2VFbmRwb2ludD1mdW5jdGlvbihiLGMsZixnKXtyZXR1cm4gZj1mfHx0aGlzLl9qc1BsdW1iLmluc3RhbmNlLmdldElkKGMpLHRoaXMucHJlcGFyZUVuZHBvaW50KGUsZCx0aGlzLGcsYj8wOjEsYSxjLGYpfSxhLnR5cGUmJihhLmVuZHBvaW50cz1hLmVuZHBvaW50c3x8dGhpcy5fanNQbHVtYi5pbnN0YW5jZS5kZXJpdmVFbmRwb2ludEFuZEFuY2hvclNwZWMoYS50eXBlKS5lbmRwb2ludHMpO3ZhciBmPXRoaXMubWFrZUVuZHBvaW50KCEwLHRoaXMuc291cmNlLHRoaXMuc291cmNlSWQsYS5zb3VyY2VFbmRwb2ludCksZz10aGlzLm1ha2VFbmRwb2ludCghMSx0aGlzLnRhcmdldCx0aGlzLnRhcmdldElkLGEudGFyZ2V0RW5kcG9pbnQpO2YmJmMuYWRkVG9MaXN0KGEuZW5kcG9pbnRzQnlFbGVtZW50LHRoaXMuc291cmNlSWQsZiksZyYmYy5hZGRUb0xpc3QoYS5lbmRwb2ludHNCeUVsZW1lbnQsdGhpcy50YXJnZXRJZCxnKSx0aGlzLnNjb3BlfHwodGhpcy5zY29wZT10aGlzLmVuZHBvaW50c1swXS5zY29wZSksbnVsbCE9YS5kZWxldGVFbmRwb2ludHNPbkRldGFjaD8odGhpcy5lbmRwb2ludHNbMF0uX2RlbGV0ZU9uRGV0YWNoPWEuZGVsZXRlRW5kcG9pbnRzT25EZXRhY2gsdGhpcy5lbmRwb2ludHNbMV0uX2RlbGV0ZU9uRGV0YWNoPWEuZGVsZXRlRW5kcG9pbnRzT25EZXRhY2gpOih0aGlzLmVuZHBvaW50c1swXS5fZG9Ob3REZWxldGVPbkRldGFjaHx8KHRoaXMuZW5kcG9pbnRzWzBdLl9kZWxldGVPbkRldGFjaD0hMCksdGhpcy5lbmRwb2ludHNbMV0uX2RvTm90RGVsZXRlT25EZXRhY2h8fCh0aGlzLmVuZHBvaW50c1sxXS5fZGVsZXRlT25EZXRhY2g9ITApKTt2YXIgaD1lLkRlZmF1bHRzLkNvbm5lY3Rpb25zRGV0YWNoYWJsZTthLmRldGFjaGFibGU9PT0hMSYmKGg9ITEpLHRoaXMuZW5kcG9pbnRzWzBdLmNvbm5lY3Rpb25zRGV0YWNoYWJsZT09PSExJiYoaD0hMSksdGhpcy5lbmRwb2ludHNbMV0uY29ubmVjdGlvbnNEZXRhY2hhYmxlPT09ITEmJihoPSExKTt2YXIgaT1hLnJlYXR0YWNofHx0aGlzLmVuZHBvaW50c1swXS5yZWF0dGFjaENvbm5lY3Rpb25zfHx0aGlzLmVuZHBvaW50c1sxXS5yZWF0dGFjaENvbm5lY3Rpb25zfHxlLkRlZmF1bHRzLlJlYXR0YWNoQ29ubmVjdGlvbnM7dGhpcy5hcHBlbmRUb0RlZmF1bHRUeXBlKHtkZXRhY2hhYmxlOmgscmVhdHRhY2g6aSxwYWludFN0eWxlOnRoaXMuZW5kcG9pbnRzWzBdLmNvbm5lY3RvclN0eWxlfHx0aGlzLmVuZHBvaW50c1sxXS5jb25uZWN0b3JTdHlsZXx8YS5wYWludFN0eWxlfHxlLkRlZmF1bHRzLlBhaW50U3R5bGV8fGIuRGVmYXVsdHMuUGFpbnRTdHlsZSxob3ZlclBhaW50U3R5bGU6dGhpcy5lbmRwb2ludHNbMF0uY29ubmVjdG9ySG92ZXJTdHlsZXx8dGhpcy5lbmRwb2ludHNbMV0uY29ubmVjdG9ySG92ZXJTdHlsZXx8YS5ob3ZlclBhaW50U3R5bGV8fGUuRGVmYXVsdHMuSG92ZXJQYWludFN0eWxlfHxiLkRlZmF1bHRzLkhvdmVyUGFpbnRTdHlsZX0pO3ZhciBqPWUuZ2V0U3VzcGVuZGVkQXQoKTtpZighZS5pc1N1c3BlbmREcmF3aW5nKCkpe3ZhciBrPWUuZ2V0Q2FjaGVkRGF0YSh0aGlzLnNvdXJjZUlkKSxsPWsubyxtPWsucyxuPWUuZ2V0Q2FjaGVkRGF0YSh0aGlzLnRhcmdldElkKSxvPW4ubyxwPW4ucyxxPWp8fGUudGltZXN0YW1wKCkscj10aGlzLmVuZHBvaW50c1swXS5hbmNob3IuY29tcHV0ZSh7eHk6W2wubGVmdCxsLnRvcF0sd2g6bSxlbGVtZW50OnRoaXMuZW5kcG9pbnRzWzBdLGVsZW1lbnRJZDp0aGlzLmVuZHBvaW50c1swXS5lbGVtZW50SWQsdHh5OltvLmxlZnQsby50b3BdLHR3aDpwLHRFbGVtZW50OnRoaXMuZW5kcG9pbnRzWzFdLHRpbWVzdGFtcDpxfSk7dGhpcy5lbmRwb2ludHNbMF0ucGFpbnQoe2FuY2hvckxvYzpyLHRpbWVzdGFtcDpxfSkscj10aGlzLmVuZHBvaW50c1sxXS5hbmNob3IuY29tcHV0ZSh7eHk6W28ubGVmdCxvLnRvcF0sd2g6cCxlbGVtZW50OnRoaXMuZW5kcG9pbnRzWzFdLGVsZW1lbnRJZDp0aGlzLmVuZHBvaW50c1sxXS5lbGVtZW50SWQsdHh5OltsLmxlZnQsbC50b3BdLHR3aDptLHRFbGVtZW50OnRoaXMuZW5kcG9pbnRzWzBdLHRpbWVzdGFtcDpxfSksdGhpcy5lbmRwb2ludHNbMV0ucGFpbnQoe2FuY2hvckxvYzpyLHRpbWVzdGFtcDpxfSl9dGhpcy5nZXRUeXBlRGVzY3JpcHRvcj1mdW5jdGlvbigpe3JldHVyblwiY29ubmVjdGlvblwifSx0aGlzLmdldEF0dGFjaGVkRWxlbWVudHM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbmRwb2ludHN9LHRoaXMuaXNEZXRhY2hhYmxlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2pzUGx1bWIuZGV0YWNoYWJsZT09PSEwfSx0aGlzLnNldERldGFjaGFibGU9ZnVuY3Rpb24oYSl7dGhpcy5fanNQbHVtYi5kZXRhY2hhYmxlPWE9PT0hMH0sdGhpcy5pc1JlYXR0YWNoPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2pzUGx1bWIucmVhdHRhY2g9PT0hMHx8dGhpcy5lbmRwb2ludHNbMF0ucmVhdHRhY2hDb25uZWN0aW9ucz09PSEwfHx0aGlzLmVuZHBvaW50c1sxXS5yZWF0dGFjaENvbm5lY3Rpb25zPT09ITB9LHRoaXMuc2V0UmVhdHRhY2g9ZnVuY3Rpb24oYSl7dGhpcy5fanNQbHVtYi5yZWF0dGFjaD1hPT09ITB9LHRoaXMuX2pzUGx1bWIuY29zdD1hLmNvc3R8fHRoaXMuZW5kcG9pbnRzWzBdLmdldENvbm5lY3Rpb25Db3N0KCksdGhpcy5fanNQbHVtYi5kaXJlY3RlZD1hLmRpcmVjdGVkLG51bGw9PWEuZGlyZWN0ZWQmJih0aGlzLl9qc1BsdW1iLmRpcmVjdGVkPXRoaXMuZW5kcG9pbnRzWzBdLmFyZUNvbm5lY3Rpb25zRGlyZWN0ZWQoKSk7dmFyIHM9Yi5leHRlbmQoe30sdGhpcy5lbmRwb2ludHNbMV0uZ2V0UGFyYW1ldGVycygpKTtiLmV4dGVuZChzLHRoaXMuZW5kcG9pbnRzWzBdLmdldFBhcmFtZXRlcnMoKSksYi5leHRlbmQocyx0aGlzLmdldFBhcmFtZXRlcnMoKSksdGhpcy5zZXRQYXJhbWV0ZXJzKHMpLHRoaXMuc2V0Q29ubmVjdG9yKHRoaXMuZW5kcG9pbnRzWzBdLmNvbm5lY3Rvcnx8dGhpcy5lbmRwb2ludHNbMV0uY29ubmVjdG9yfHxhLmNvbm5lY3Rvcnx8ZS5EZWZhdWx0cy5Db25uZWN0b3J8fGIuRGVmYXVsdHMuQ29ubmVjdG9yLCEwKSxhLmdlb21ldHJ5JiZ0aGlzLmNvbm5lY3Rvci5zZXRHZW9tZXRyeShhLmdlb21ldHJ5KTt2YXIgdD1udWxsIT1hLmRhdGEmJmMuaXNPYmplY3QoYS5kYXRhKT9hLmRhdGE6e307dGhpcy5nZXREYXRhPWZ1bmN0aW9uKCl7cmV0dXJuIHR9LHRoaXMuc2V0RGF0YT1mdW5jdGlvbihhKXt0PWF8fHt9fSx0aGlzLm1lcmdlRGF0YT1mdW5jdGlvbihhKXt0PWIuZXh0ZW5kKHQsYSl9O3ZhciB1PVtcImRlZmF1bHRcIix0aGlzLmVuZHBvaW50c1swXS5jb25uZWN0aW9uVHlwZSx0aGlzLmVuZHBvaW50c1sxXS5jb25uZWN0aW9uVHlwZSxhLnR5cGVdLmpvaW4oXCIgXCIpOy9bXlxcc10vLnRlc3QodSkmJnRoaXMuYWRkVHlwZSh1LGEuZGF0YSwhMCksdGhpcy51cGRhdGVDb25uZWN0ZWRDbGFzcygpfSxjLmV4dGVuZChiLkNvbm5lY3Rpb24sYi5PdmVybGF5Q2FwYWJsZUpzUGx1bWJVSUNvbXBvbmVudCx7YXBwbHlUeXBlOmZ1bmN0aW9uKGEsYyxkKXtudWxsIT1hLmRldGFjaGFibGUmJnRoaXMuc2V0RGV0YWNoYWJsZShhLmRldGFjaGFibGUpLG51bGwhPWEucmVhdHRhY2gmJnRoaXMuc2V0UmVhdHRhY2goYS5yZWF0dGFjaCksYS5zY29wZSYmKHRoaXMuc2NvcGU9YS5zY29wZSksbnVsbCE9YS5jc3NDbGFzcyYmdGhpcy5jYW52YXMmJnRoaXMuX2pzUGx1bWIuaW5zdGFuY2UuYWRkQ2xhc3ModGhpcy5jYW52YXMsYS5jc3NDbGFzcyk7dmFyIGU9bnVsbDthLmFuY2hvcj8oZT10aGlzLmdldENhY2hlZFR5cGVJdGVtKFwiYW5jaG9yc1wiLGQuYW5jaG9yKSxudWxsPT1lJiYoZT1bdGhpcy5fanNQbHVtYi5pbnN0YW5jZS5tYWtlQW5jaG9yKGEuYW5jaG9yKSx0aGlzLl9qc1BsdW1iLmluc3RhbmNlLm1ha2VBbmNob3IoYS5hbmNob3IpXSx0aGlzLmNhY2hlVHlwZUl0ZW0oXCJhbmNob3JzXCIsZSxkLmFuY2hvcikpKTphLmFuY2hvcnMmJihlPXRoaXMuZ2V0Q2FjaGVkVHlwZUl0ZW0oXCJhbmNob3JzXCIsZC5hbmNob3JzKSxudWxsPT1lJiYoZT1bdGhpcy5fanNQbHVtYi5pbnN0YW5jZS5tYWtlQW5jaG9yKGEuYW5jaG9yc1swXSksdGhpcy5fanNQbHVtYi5pbnN0YW5jZS5tYWtlQW5jaG9yKGEuYW5jaG9yc1sxXSldLHRoaXMuY2FjaGVUeXBlSXRlbShcImFuY2hvcnNcIixlLGQuYW5jaG9ycykpKSxudWxsIT1lJiYodGhpcy5lbmRwb2ludHNbMF0uYW5jaG9yPWVbMF0sdGhpcy5lbmRwb2ludHNbMV0uYW5jaG9yPWVbMV0sdGhpcy5lbmRwb2ludHNbMV0uYW5jaG9yLmlzRHluYW1pYyYmdGhpcy5fanNQbHVtYi5pbnN0YW5jZS5yZXBhaW50KHRoaXMuZW5kcG9pbnRzWzFdLmVsZW1lbnRJZCkpLGIuT3ZlcmxheUNhcGFibGVKc1BsdW1iVUlDb21wb25lbnQuYXBwbHlUeXBlKHRoaXMsYSl9LGFkZENsYXNzOmZ1bmN0aW9uKGEsYil7YiYmKHRoaXMuZW5kcG9pbnRzWzBdLmFkZENsYXNzKGEpLHRoaXMuZW5kcG9pbnRzWzFdLmFkZENsYXNzKGEpLHRoaXMuc3VzcGVuZGVkRW5kcG9pbnQmJnRoaXMuc3VzcGVuZGVkRW5kcG9pbnQuYWRkQ2xhc3MoYSkpLHRoaXMuY29ubmVjdG9yJiZ0aGlzLmNvbm5lY3Rvci5hZGRDbGFzcyhhKX0scmVtb3ZlQ2xhc3M6ZnVuY3Rpb24oYSxiKXtiJiYodGhpcy5lbmRwb2ludHNbMF0ucmVtb3ZlQ2xhc3MoYSksdGhpcy5lbmRwb2ludHNbMV0ucmVtb3ZlQ2xhc3MoYSksdGhpcy5zdXNwZW5kZWRFbmRwb2ludCYmdGhpcy5zdXNwZW5kZWRFbmRwb2ludC5yZW1vdmVDbGFzcyhhKSksdGhpcy5jb25uZWN0b3ImJnRoaXMuY29ubmVjdG9yLnJlbW92ZUNsYXNzKGEpfSxpc1Zpc2libGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fanNQbHVtYi52aXNpYmxlfSxzZXRWaXNpYmxlOmZ1bmN0aW9uKGEpe3RoaXMuX2pzUGx1bWIudmlzaWJsZT1hLHRoaXMuY29ubmVjdG9yJiZ0aGlzLmNvbm5lY3Rvci5zZXRWaXNpYmxlKGEpLHRoaXMucmVwYWludCgpfSxjbGVhbnVwOmZ1bmN0aW9uKCl7dGhpcy51cGRhdGVDb25uZWN0ZWRDbGFzcyghMCksdGhpcy5lbmRwb2ludHM9bnVsbCx0aGlzLnNvdXJjZT1udWxsLHRoaXMudGFyZ2V0PW51bGwsbnVsbCE9dGhpcy5jb25uZWN0b3ImJih0aGlzLmNvbm5lY3Rvci5jbGVhbnVwKCEwKSx0aGlzLmNvbm5lY3Rvci5kZXN0cm95KCEwKSksdGhpcy5jb25uZWN0b3I9bnVsbH0sdXBkYXRlQ29ubmVjdGVkQ2xhc3M6ZnVuY3Rpb24oYSl7dGhpcy5fanNQbHVtYiYmKGYodGhpcyx0aGlzLnNvdXJjZSx0aGlzLl9qc1BsdW1iLmluc3RhbmNlLGEpLGYodGhpcyx0aGlzLnRhcmdldCx0aGlzLl9qc1BsdW1iLmluc3RhbmNlLGEpKX0sc2V0SG92ZXI6ZnVuY3Rpb24oYil7dGhpcy5jb25uZWN0b3ImJnRoaXMuX2pzUGx1bWImJiF0aGlzLl9qc1BsdW1iLmluc3RhbmNlLmlzQ29ubmVjdGlvbkJlaW5nRHJhZ2dlZCgpJiYodGhpcy5jb25uZWN0b3Iuc2V0SG92ZXIoYiksYS5qc1BsdW1iW2I/XCJhZGRDbGFzc1wiOlwicmVtb3ZlQ2xhc3NcIl0odGhpcy5zb3VyY2UsdGhpcy5fanNQbHVtYi5pbnN0YW5jZS5ob3ZlclNvdXJjZUNsYXNzKSxhLmpzUGx1bWJbYj9cImFkZENsYXNzXCI6XCJyZW1vdmVDbGFzc1wiXSh0aGlzLnRhcmdldCx0aGlzLl9qc1BsdW1iLmluc3RhbmNlLmhvdmVyVGFyZ2V0Q2xhc3MpKX0sZ2V0VXVpZHM6ZnVuY3Rpb24oKXtyZXR1cm5bdGhpcy5lbmRwb2ludHNbMF0uZ2V0VXVpZCgpLHRoaXMuZW5kcG9pbnRzWzFdLmdldFV1aWQoKV19LGdldENvc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fanNQbHVtYj90aGlzLl9qc1BsdW1iLmNvc3Q6LTEvMH0sc2V0Q29zdDpmdW5jdGlvbihhKXt0aGlzLl9qc1BsdW1iLmNvc3Q9YX0saXNEaXJlY3RlZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9qc1BsdW1iLmRpcmVjdGVkPT09ITB9LGdldENvbm5lY3RvcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbm5lY3Rvcn0sZ2V0R2VvbWV0cnk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25uZWN0b3I/dGhpcy5jb25uZWN0b3IuZ2V0R2VvbWV0cnkoKTpudWxsfSxzZXRHZW9tZXRyeTpmdW5jdGlvbihhKXt0aGlzLmNvbm5lY3RvciYmdGhpcy5jb25uZWN0b3Iuc2V0R2VvbWV0cnkoYSl9LHByZXBhcmVDb25uZWN0b3I6ZnVuY3Rpb24oYSxiKXt2YXIgZSxmPXtfanNQbHVtYjp0aGlzLl9qc1BsdW1iLmluc3RhbmNlLGNzc0NsYXNzOih0aGlzLl9qc1BsdW1iLnBhcmFtcy5jc3NDbGFzc3x8XCJcIikrKHRoaXMuaXNFZGl0YWJsZSgpP3RoaXMuX2pzUGx1bWIuaW5zdGFuY2UuZWRpdGFibGVDb25uZWN0b3JDbGFzczpcIlwiKSxjb250YWluZXI6dGhpcy5fanNQbHVtYi5wYXJhbXMuY29udGFpbmVyLFwicG9pbnRlci1ldmVudHNcIjp0aGlzLl9qc1BsdW1iLnBhcmFtc1tcInBvaW50ZXItZXZlbnRzXCJdLGVkaXRhYmxlOnRoaXMuZWRpdGFibGVSZXF1ZXN0ZWR9LGc9dGhpcy5fanNQbHVtYi5pbnN0YW5jZS5nZXRSZW5kZXJNb2RlKCk7cmV0dXJuIGMuaXNTdHJpbmcoYSk/ZT1kKHRoaXMuX2pzUGx1bWIuaW5zdGFuY2UsZyxhLGYsdGhpcyk6Yy5pc0FycmF5KGEpJiYoZT0xPT1hLmxlbmd0aD9kKHRoaXMuX2pzUGx1bWIuaW5zdGFuY2UsZyxhWzBdLGYsdGhpcyk6ZCh0aGlzLl9qc1BsdW1iLmluc3RhbmNlLGcsYVswXSxjLm1lcmdlKGFbMV0sZiksdGhpcykpLG51bGwhPWImJihlLnR5cGVJZD1iKSxlfSxzZXRQcmVwYXJlZENvbm5lY3RvcjpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZSxmPVwiXCI7aWYobnVsbCE9dGhpcy5jb25uZWN0b3ImJihlPXRoaXMuY29ubmVjdG9yLGY9ZS5nZXRDbGFzcygpLHRoaXMuY29ubmVjdG9yLmNsZWFudXAoKSx0aGlzLmNvbm5lY3Rvci5kZXN0cm95KCkpLHRoaXMuY29ubmVjdG9yPWEsZCYmdGhpcy5jYWNoZVR5cGVJdGVtKFwiY29ubmVjdG9yXCIsYSxkKSx0aGlzLmNhbnZhcz10aGlzLmNvbm5lY3Rvci5jYW52YXMsdGhpcy5iZ0NhbnZhcz10aGlzLmNvbm5lY3Rvci5iZ0NhbnZhcyx0aGlzLmFkZENsYXNzKGYpLHRoaXMuY2FudmFzJiYodGhpcy5jYW52YXMuX2pzUGx1bWI9dGhpcyksdGhpcy5iZ0NhbnZhcyYmKHRoaXMuYmdDYW52YXMuX2pzUGx1bWI9dGhpcyksbnVsbCE9ZSlmb3IodmFyIGc9dGhpcy5nZXRPdmVybGF5cygpLGg9MDtoPGcubGVuZ3RoO2grKylnW2hdLnRyYW5zZmVyJiZnW2hdLnRyYW5zZmVyKHRoaXMuY29ubmVjdG9yKTtjfHx0aGlzLnNldExpc3RlbmVyQ29tcG9uZW50KHRoaXMuY29ubmVjdG9yKSxifHx0aGlzLnJlcGFpbnQoKX0sc2V0Q29ubmVjdG9yOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXRoaXMucHJlcGFyZUNvbm5lY3RvcihhLGQpO3RoaXMuc2V0UHJlcGFyZWRDb25uZWN0b3IoZSxiLGMsZCl9LHBhaW50OmZ1bmN0aW9uKGEpe2lmKCF0aGlzLl9qc1BsdW1iLmluc3RhbmNlLmlzU3VzcGVuZERyYXdpbmcoKSYmdGhpcy5fanNQbHVtYi52aXNpYmxlKXthPWF8fHt9O3ZhciBiPWEudGltZXN0YW1wLGM9ITEsZD1jP3RoaXMuc291cmNlSWQ6dGhpcy50YXJnZXRJZCxlPWM/dGhpcy50YXJnZXRJZDp0aGlzLnNvdXJjZUlkLGY9Yz8wOjEsZz1jPzE6MDtpZihudWxsPT1ifHxiIT10aGlzLl9qc1BsdW1iLmxhc3RQYWludGVkQXQpe3ZhciBoPXRoaXMuX2pzUGx1bWIuaW5zdGFuY2UudXBkYXRlT2Zmc2V0KHtlbElkOmV9KS5vLGk9dGhpcy5fanNQbHVtYi5pbnN0YW5jZS51cGRhdGVPZmZzZXQoe2VsSWQ6ZH0pLm8saj10aGlzLmVuZHBvaW50c1tnXSxrPXRoaXMuZW5kcG9pbnRzW2ZdLGw9ai5hbmNob3IuZ2V0Q3VycmVudExvY2F0aW9uKHt4eTpbaC5sZWZ0LGgudG9wXSx3aDpbaC53aWR0aCxoLmhlaWdodF0sZWxlbWVudDpqLHRpbWVzdGFtcDpifSksbT1rLmFuY2hvci5nZXRDdXJyZW50TG9jYXRpb24oe3h5OltpLmxlZnQsaS50b3BdLHdoOltpLndpZHRoLGkuaGVpZ2h0XSxlbGVtZW50OmssdGltZXN0YW1wOmJ9KTt0aGlzLmNvbm5lY3Rvci5yZXNldEJvdW5kcygpLHRoaXMuY29ubmVjdG9yLmNvbXB1dGUoe3NvdXJjZVBvczpsLHRhcmdldFBvczptLHNvdXJjZUVuZHBvaW50OnRoaXMuZW5kcG9pbnRzW2ddLHRhcmdldEVuZHBvaW50OnRoaXMuZW5kcG9pbnRzW2ZdLFwic3Ryb2tlLXdpZHRoXCI6dGhpcy5fanNQbHVtYi5wYWludFN0eWxlSW5Vc2Uuc3Ryb2tlV2lkdGgsc291cmNlSW5mbzpoLHRhcmdldEluZm86aX0pO3ZhciBuPXttaW5YOjEvMCxtaW5ZOjEvMCxtYXhYOi0xLzAsbWF4WTotMS8wfTtmb3IodmFyIG8gaW4gdGhpcy5fanNQbHVtYi5vdmVybGF5cylpZih0aGlzLl9qc1BsdW1iLm92ZXJsYXlzLmhhc093blByb3BlcnR5KG8pKXt2YXIgcD10aGlzLl9qc1BsdW1iLm92ZXJsYXlzW29dO3AuaXNWaXNpYmxlKCkmJih0aGlzLl9qc1BsdW1iLm92ZXJsYXlQbGFjZW1lbnRzW29dPXAuZHJhdyh0aGlzLmNvbm5lY3Rvcix0aGlzLl9qc1BsdW1iLnBhaW50U3R5bGVJblVzZSx0aGlzLmdldEFic29sdXRlT3ZlcmxheVBvc2l0aW9uKHApKSxuLm1pblg9TWF0aC5taW4obi5taW5YLHRoaXMuX2pzUGx1bWIub3ZlcmxheVBsYWNlbWVudHNbb10ubWluWCksbi5tYXhYPU1hdGgubWF4KG4ubWF4WCx0aGlzLl9qc1BsdW1iLm92ZXJsYXlQbGFjZW1lbnRzW29dLm1heFgpLG4ubWluWT1NYXRoLm1pbihuLm1pblksdGhpcy5fanNQbHVtYi5vdmVybGF5UGxhY2VtZW50c1tvXS5taW5ZKSxuLm1heFk9TWF0aC5tYXgobi5tYXhZLHRoaXMuX2pzUGx1bWIub3ZlcmxheVBsYWNlbWVudHNbb10ubWF4WSkpfXZhciBxPXBhcnNlRmxvYXQodGhpcy5fanNQbHVtYi5wYWludFN0eWxlSW5Vc2Uuc3Ryb2tlV2lkdGh8fDEpLzIscj1wYXJzZUZsb2F0KHRoaXMuX2pzUGx1bWIucGFpbnRTdHlsZUluVXNlLnN0cm9rZVdpZHRofHwwKSxzPXt4bWluOk1hdGgubWluKHRoaXMuY29ubmVjdG9yLmJvdW5kcy5taW5YLShxK3IpLG4ubWluWCkseW1pbjpNYXRoLm1pbih0aGlzLmNvbm5lY3Rvci5ib3VuZHMubWluWS0ocStyKSxuLm1pblkpLHhtYXg6TWF0aC5tYXgodGhpcy5jb25uZWN0b3IuYm91bmRzLm1heFgrKHErciksbi5tYXhYKSx5bWF4Ok1hdGgubWF4KHRoaXMuY29ubmVjdG9yLmJvdW5kcy5tYXhZKyhxK3IpLG4ubWF4WSl9O3RoaXMuY29ubmVjdG9yLnBhaW50KHRoaXMuX2pzUGx1bWIucGFpbnRTdHlsZUluVXNlLG51bGwscyk7Zm9yKHZhciB0IGluIHRoaXMuX2pzUGx1bWIub3ZlcmxheXMpaWYodGhpcy5fanNQbHVtYi5vdmVybGF5cy5oYXNPd25Qcm9wZXJ0eSh0KSl7dmFyIHU9dGhpcy5fanNQbHVtYi5vdmVybGF5c1t0XTt1LmlzVmlzaWJsZSgpJiZ1LnBhaW50KHRoaXMuX2pzUGx1bWIub3ZlcmxheVBsYWNlbWVudHNbdF0scyl9fXRoaXMuX2pzUGx1bWIubGFzdFBhaW50ZWRBdD1ifX0scmVwYWludDpmdW5jdGlvbihhKXthPWF8fHt9LHRoaXMucGFpbnQoe2VsSWQ6dGhpcy5zb3VyY2VJZCxyZWNhbGM6IShhLnJlY2FsYz09PSExKSx0aW1lc3RhbXA6YS50aW1lc3RhbXB9KX0scHJlcGFyZUVuZHBvaW50OmZ1bmN0aW9uKGEsYyxkLGYsZyxoLGksail7dmFyIGs7aWYoZilkLmVuZHBvaW50c1tnXT1mLGYuYWRkQ29ubmVjdGlvbihkKTtlbHNle2guZW5kcG9pbnRzfHwoaC5lbmRwb2ludHM9W251bGwsbnVsbF0pO3ZhciBsPWguZW5kcG9pbnRzW2ddfHxoLmVuZHBvaW50fHxhLkRlZmF1bHRzLkVuZHBvaW50c1tnXXx8Yi5EZWZhdWx0cy5FbmRwb2ludHNbZ118fGEuRGVmYXVsdHMuRW5kcG9pbnR8fGIuRGVmYXVsdHMuRW5kcG9pbnQ7aC5lbmRwb2ludFN0eWxlc3x8KGguZW5kcG9pbnRTdHlsZXM9W251bGwsbnVsbF0pLGguZW5kcG9pbnRIb3ZlclN0eWxlc3x8KGguZW5kcG9pbnRIb3ZlclN0eWxlcz1bbnVsbCxudWxsXSk7dmFyIG09aC5lbmRwb2ludFN0eWxlc1tnXXx8aC5lbmRwb2ludFN0eWxlfHxhLkRlZmF1bHRzLkVuZHBvaW50U3R5bGVzW2ddfHxiLkRlZmF1bHRzLkVuZHBvaW50U3R5bGVzW2ddfHxhLkRlZmF1bHRzLkVuZHBvaW50U3R5bGV8fGIuRGVmYXVsdHMuRW5kcG9pbnRTdHlsZTtudWxsPT1tLmZpbGwmJm51bGwhPWgucGFpbnRTdHlsZSYmKG0uZmlsbD1oLnBhaW50U3R5bGUuc3Ryb2tlKSxudWxsPT1tLm91dGxpbmVTdHJva2UmJm51bGwhPWgucGFpbnRTdHlsZSYmKG0ub3V0bGluZVN0cm9rZT1oLnBhaW50U3R5bGUub3V0bGluZVN0cm9rZSksbnVsbD09bS5vdXRsaW5lV2lkdGgmJm51bGwhPWgucGFpbnRTdHlsZSYmKG0ub3V0bGluZVdpZHRoPWgucGFpbnRTdHlsZS5vdXRsaW5lV2lkdGgpO3ZhciBuPWguZW5kcG9pbnRIb3ZlclN0eWxlc1tnXXx8aC5lbmRwb2ludEhvdmVyU3R5bGV8fGEuRGVmYXVsdHMuRW5kcG9pbnRIb3ZlclN0eWxlc1tnXXx8Yi5EZWZhdWx0cy5FbmRwb2ludEhvdmVyU3R5bGVzW2ddfHxhLkRlZmF1bHRzLkVuZHBvaW50SG92ZXJTdHlsZXx8Yi5EZWZhdWx0cy5FbmRwb2ludEhvdmVyU3R5bGU7bnVsbCE9aC5ob3ZlclBhaW50U3R5bGUmJihudWxsPT1uJiYobj17fSksbnVsbD09bi5maWxsJiYobi5maWxsPWguaG92ZXJQYWludFN0eWxlLnN0cm9rZSkpO3ZhciBvPWguYW5jaG9ycz9oLmFuY2hvcnNbZ106aC5hbmNob3I/aC5hbmNob3I6ZShhLkRlZmF1bHRzLkFuY2hvcnNbZ10saixhKXx8ZShiLkRlZmF1bHRzLkFuY2hvcnNbZ10saixhKXx8ZShhLkRlZmF1bHRzLkFuY2hvcixqLGEpfHxlKGIuRGVmYXVsdHMuQW5jaG9yLGosYSkscD1oLnV1aWRzP2gudXVpZHNbZ106bnVsbDtrPWMoe3BhaW50U3R5bGU6bSxob3ZlclBhaW50U3R5bGU6bixlbmRwb2ludDpsLGNvbm5lY3Rpb25zOltkXSx1dWlkOnAsYW5jaG9yOm8sc291cmNlOmksc2NvcGU6aC5zY29wZSxyZWF0dGFjaDpoLnJlYXR0YWNofHxhLkRlZmF1bHRzLlJlYXR0YWNoQ29ubmVjdGlvbnMsZGV0YWNoYWJsZTpoLmRldGFjaGFibGV8fGEuRGVmYXVsdHMuQ29ubmVjdGlvbnNEZXRhY2hhYmxlfSksZC5lbmRwb2ludHNbZ109ayxoLmRyYXdFbmRwb2ludHM9PT0hMSYmay5zZXRWaXNpYmxlKCExLCEwLCEwKX1yZXR1cm4ga319KX0uY2FsbChcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp0aGlzKSxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBhPXRoaXMsYj1hLmpzUGx1bWJVdGlsLGM9YS5qc1BsdW1iO2MuQW5jaG9yTWFuYWdlcj1mdW5jdGlvbihhKXt2YXIgZD17fSxlPXt9LGY9e30sZz17fSxoPXtIT1JJWk9OVEFMOlwiaG9yaXpvbnRhbFwiLFZFUlRJQ0FMOlwidmVydGljYWxcIixESUFHT05BTDpcImRpYWdvbmFsXCIsSURFTlRJVFk6XCJpZGVudGl0eVwifSxpPVtcImxlZnRcIixcInRvcFwiLFwicmlnaHRcIixcImJvdHRvbVwiXSxqPXt9LGs9dGhpcyxsPXt9LG09YS5qc1BsdW1iSW5zdGFuY2Usbj17fSxvPWZ1bmN0aW9uKGEsYixjLGQsZSxmKXtpZihhPT09YilyZXR1cm57b3JpZW50YXRpb246aC5JREVOVElUWSxhOltcInRvcFwiLFwidG9wXCJdfTt2YXIgZz1NYXRoLmF0YW4yKGQuY2VudGVyeS1jLmNlbnRlcnksZC5jZW50ZXJ4LWMuY2VudGVyeCksaj1NYXRoLmF0YW4yKGMuY2VudGVyeS1kLmNlbnRlcnksYy5jZW50ZXJ4LWQuY2VudGVyeCksaz1bXSxsPXt9OyFmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKWxbYVtjXV09e2xlZnQ6W2JbY10ubGVmdCxiW2NdLmNlbnRlcnldLHJpZ2h0OltiW2NdLnJpZ2h0LGJbY10uY2VudGVyeV0sdG9wOltiW2NdLmNlbnRlcngsYltjXS50b3BdLGJvdHRvbTpbYltjXS5jZW50ZXJ4LGJbY10uYm90dG9tXX1cbn0oW1wic291cmNlXCIsXCJ0YXJnZXRcIl0sW2MsZF0pO2Zvcih2YXIgbT0wO208aS5sZW5ndGg7bSsrKWZvcih2YXIgbj0wO248aS5sZW5ndGg7bisrKWsucHVzaCh7c291cmNlOmlbbV0sdGFyZ2V0Omlbbl0sZGlzdDpCaWx0b25nLmxpbmVMZW5ndGgobC5zb3VyY2VbaVttXV0sbC50YXJnZXRbaVtuXV0pfSk7ay5zb3J0KGZ1bmN0aW9uKGEsYil7cmV0dXJuIGEuZGlzdDxiLmRpc3Q/LTE6YS5kaXN0PmIuZGlzdD8xOjB9KTtmb3IodmFyIG89a1swXS5zb3VyY2UscD1rWzBdLnRhcmdldCxxPTA7cTxrLmxlbmd0aCYmKG89IWUuaXNDb250aW51b3VzfHxlLmlzRWRnZVN1cHBvcnRlZChrW3FdLnNvdXJjZSk/a1txXS5zb3VyY2U6bnVsbCxwPSFmLmlzQ29udGludW91c3x8Zi5pc0VkZ2VTdXBwb3J0ZWQoa1txXS50YXJnZXQpP2tbcV0udGFyZ2V0Om51bGwsbnVsbD09b3x8bnVsbD09cCk7cSsrKTtyZXR1cm57YTpbbyxwXSx0aGV0YTpnLHRoZXRhMjpqfX0scD1mdW5jdGlvbihhLGIsYyxkLGUsZixnKXtmb3IodmFyIGg9W10saT1iW2U/MDoxXS8oZC5sZW5ndGgrMSksaj0wO2o8ZC5sZW5ndGg7aisrKXt2YXIgaz0oaisxKSppLGw9ZipiW2U/MTowXTtnJiYoaz1iW2U/MDoxXS1rKTt2YXIgbT1lP2s6bCxuPWNbMF0rbSxvPW0vYlswXSxwPWU/bDprLHE9Y1sxXStwLHI9cC9iWzFdO2gucHVzaChbbixxLG8scixkW2pdWzFdLGRbal1bMl1dKX1yZXR1cm4gaH0scT1mdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYixjKXt2YXIgZD0hMDtyZXR1cm4gZD1hP2JbMF1bMF08Y1swXVswXTpiWzBdWzBdPmNbMF1bMF0sZD09PSExPy0xOjF9fSxyPWZ1bmN0aW9uKGEsYil7dmFyIGM9YVswXVswXTwwPy1NYXRoLlBJLWFbMF1bMF06TWF0aC5QSS1hWzBdWzBdLGQ9YlswXVswXTwwPy1NYXRoLlBJLWJbMF1bMF06TWF0aC5QSS1iWzBdWzBdO3JldHVybiBjPmQ/MTotMX0scz17dG9wOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGFbMF0+YlswXT8xOi0xfSxyaWdodDpxKCEwKSxib3R0b206cSghMCksbGVmdDpyfSx0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIGEuc29ydChiKX0sdT1mdW5jdGlvbihhLGIpe3ZhciBjPW0uZ2V0Q2FjaGVkRGF0YShhKSxkPWMucyxmPWMubyxoPWZ1bmN0aW9uKGIsYyxkLGYsaCxpLGope2lmKGYubGVuZ3RoPjApZm9yKHZhciBrPXQoZixzW2JdKSxsPVwicmlnaHRcIj09PWJ8fFwidG9wXCI9PT1iLG09cChiLGMsZCxrLGgsaSxsKSxuPWZ1bmN0aW9uKGEsYil7ZVthLmlkXT1bYlswXSxiWzFdLGJbMl0sYlszXV0sZ1thLmlkXT1qfSxvPTA7bzxtLmxlbmd0aDtvKyspe3ZhciBxPW1bb11bNF0scj1xLmVuZHBvaW50c1swXS5lbGVtZW50SWQ9PT1hLHU9cS5lbmRwb2ludHNbMV0uZWxlbWVudElkPT09YTtyJiZuKHEuZW5kcG9pbnRzWzBdLG1bb10pLHUmJm4ocS5lbmRwb2ludHNbMV0sbVtvXSl9fTtoKFwiYm90dG9tXCIsZCxbZi5sZWZ0LGYudG9wXSxiLmJvdHRvbSwhMCwxLFswLDFdKSxoKFwidG9wXCIsZCxbZi5sZWZ0LGYudG9wXSxiLnRvcCwhMCwwLFswLC0xXSksaChcImxlZnRcIixkLFtmLmxlZnQsZi50b3BdLGIubGVmdCwhMSwwLFstMSwwXSksaChcInJpZ2h0XCIsZCxbZi5sZWZ0LGYudG9wXSxiLnJpZ2h0LCExLDEsWzEsMF0pfTt0aGlzLnJlc2V0PWZ1bmN0aW9uKCl7ZD17fSxqPXt9LGw9e319LHRoaXMuYWRkRmxvYXRpbmdDb25uZWN0aW9uPWZ1bmN0aW9uKGEsYil7blthXT1ifSx0aGlzLnJlbW92ZUZsb2F0aW5nQ29ubmVjdGlvbj1mdW5jdGlvbihhKXtkZWxldGUgblthXX0sdGhpcy5uZXdDb25uZWN0aW9uPWZ1bmN0aW9uKGEpe3ZhciBkPWEuc291cmNlSWQsZT1hLnRhcmdldElkLGY9YS5lbmRwb2ludHMsZz0hMCxoPWZ1bmN0aW9uKGgsaSxrLGwsbSl7ZD09ZSYmay5pc0NvbnRpbnVvdXMmJihhLl9qc1BsdW1iLmluc3RhbmNlLnJlbW92ZUVsZW1lbnQoZlsxXS5jYW52YXMpLGc9ITEpLGIuYWRkVG9MaXN0KGosbCxbbSxpLGsuY29uc3RydWN0b3I9PWMuRHluYW1pY0FuY2hvcl0pfTtoKDAsZlswXSxmWzBdLmFuY2hvcixlLGEpLGcmJmgoMSxmWzFdLGZbMV0uYW5jaG9yLGQsYSl9O3ZhciB2PWZ1bmN0aW9uKGEpeyFmdW5jdGlvbihhLGMpe2lmKGEpe3ZhciBkPWZ1bmN0aW9uKGEpe3JldHVybiBhWzRdPT1jfTtiLnJlbW92ZVdpdGhGdW5jdGlvbihhLnRvcCxkKSxiLnJlbW92ZVdpdGhGdW5jdGlvbihhLmxlZnQsZCksYi5yZW1vdmVXaXRoRnVuY3Rpb24oYS5ib3R0b20sZCksYi5yZW1vdmVXaXRoRnVuY3Rpb24oYS5yaWdodCxkKX19KGxbYS5lbGVtZW50SWRdLGEuaWQpfTt0aGlzLmNvbm5lY3Rpb25EZXRhY2hlZD1mdW5jdGlvbihhLGMpe3ZhciBkPWEuY29ubmVjdGlvbnx8YSxlPWEuc291cmNlSWQsZj1hLnRhcmdldElkLGc9ZC5lbmRwb2ludHMsaD1mdW5jdGlvbihhLGMsZCxlLGYpe2IucmVtb3ZlV2l0aEZ1bmN0aW9uKGpbZV0sZnVuY3Rpb24oYSl7cmV0dXJuIGFbMF0uaWQ9PWYuaWR9KX07aCgxLGdbMV0sZ1sxXS5hbmNob3IsZSxkKSxoKDAsZ1swXSxnWzBdLmFuY2hvcixmLGQpLGQuZmxvYXRpbmdJZCYmKGgoZC5mbG9hdGluZ0luZGV4LGQuZmxvYXRpbmdFbmRwb2ludCxkLmZsb2F0aW5nRW5kcG9pbnQuYW5jaG9yLGQuZmxvYXRpbmdJZCxkKSx2KGQuZmxvYXRpbmdFbmRwb2ludCkpLHYoZC5lbmRwb2ludHNbMF0pLHYoZC5lbmRwb2ludHNbMV0pLGN8fChrLnJlZHJhdyhkLnNvdXJjZUlkKSxkLnRhcmdldElkIT09ZC5zb3VyY2VJZCYmay5yZWRyYXcoZC50YXJnZXRJZCkpfSx0aGlzLmFkZD1mdW5jdGlvbihhLGMpe2IuYWRkVG9MaXN0KGQsYyxhKX0sdGhpcy5jaGFuZ2VJZD1mdW5jdGlvbihhLGIpe2pbYl09althXSxkW2JdPWRbYV0sZGVsZXRlIGpbYV0sZGVsZXRlIGRbYV19LHRoaXMuZ2V0Q29ubmVjdGlvbnNGb3I9ZnVuY3Rpb24oYSl7cmV0dXJuIGpbYV18fFtdfSx0aGlzLmdldEVuZHBvaW50c0Zvcj1mdW5jdGlvbihhKXtyZXR1cm4gZFthXXx8W119LHRoaXMuZGVsZXRlRW5kcG9pbnQ9ZnVuY3Rpb24oYSl7Yi5yZW1vdmVXaXRoRnVuY3Rpb24oZFthLmVsZW1lbnRJZF0sZnVuY3Rpb24oYil7cmV0dXJuIGIuaWQ9PWEuaWR9KSx2KGEpfSx0aGlzLmNsZWFyRm9yPWZ1bmN0aW9uKGEpe2RlbGV0ZSBkW2FdLGRbYV09W119O3ZhciB3PWZ1bmN0aW9uKGMsZCxlLGYsZyxoLGksaixrLGwsbSxuKXt2YXIgbyxwLHE9LTEscj0tMSxzPWYuZW5kcG9pbnRzW2ldLHQ9cy5pZCx1PVsxLDBdW2ldLHY9W1tkLGVdLGYsZyxoLHRdLHc9Y1trXSx4PXMuX2NvbnRpbnVvdXNBbmNob3JFZGdlP2Nbcy5fY29udGludW91c0FuY2hvckVkZ2VdOm51bGw7aWYoeCl7dmFyIHk9Yi5maW5kV2l0aEZ1bmN0aW9uKHgsZnVuY3Rpb24oYSl7cmV0dXJuIGFbNF09PXR9KTtpZigtMSE9eSlmb3IoeC5zcGxpY2UoeSwxKSxvPTA7bzx4Lmxlbmd0aDtvKyspcD14W29dWzFdLGIuYWRkV2l0aEZ1bmN0aW9uKG0scCxmdW5jdGlvbihhKXtyZXR1cm4gYS5pZD09cC5pZH0pLGIuYWRkV2l0aEZ1bmN0aW9uKG4seFtvXVsxXS5lbmRwb2ludHNbaV0sZnVuY3Rpb24oYSl7cmV0dXJuIGEuaWQ9PXAuZW5kcG9pbnRzW2ldLmlkfSksYi5hZGRXaXRoRnVuY3Rpb24obix4W29dWzFdLmVuZHBvaW50c1t1XSxmdW5jdGlvbihhKXtyZXR1cm4gYS5pZD09cC5lbmRwb2ludHNbdV0uaWR9KX1mb3Iobz0wO288dy5sZW5ndGg7bysrKXA9d1tvXVsxXSwxPT1hLmlkeCYmd1tvXVszXT09PWgmJi0xPT1yJiYocj1vKSxiLmFkZFdpdGhGdW5jdGlvbihtLHAsZnVuY3Rpb24oYSl7cmV0dXJuIGEuaWQ9PXAuaWR9KSxiLmFkZFdpdGhGdW5jdGlvbihuLHdbb11bMV0uZW5kcG9pbnRzW2ldLGZ1bmN0aW9uKGEpe3JldHVybiBhLmlkPT1wLmVuZHBvaW50c1tpXS5pZH0pLGIuYWRkV2l0aEZ1bmN0aW9uKG4sd1tvXVsxXS5lbmRwb2ludHNbdV0sZnVuY3Rpb24oYSl7cmV0dXJuIGEuaWQ9PXAuZW5kcG9pbnRzW3VdLmlkfSk7aWYoLTEhPXEpd1txXT12O2Vsc2V7dmFyIHo9aj8tMSE9cj9yOjA6dy5sZW5ndGg7dy5zcGxpY2UoeiwwLHYpfXMuX2NvbnRpbnVvdXNBbmNob3JFZGdlPWt9O3RoaXMudXBkYXRlT3RoZXJFbmRwb2ludD1mdW5jdGlvbihhLGQsZSxmKXt2YXIgZz1iLmZpbmRXaXRoRnVuY3Rpb24oalthXSxmdW5jdGlvbihhKXtyZXR1cm4gYVswXS5pZD09PWYuaWR9KSxoPWIuZmluZFdpdGhGdW5jdGlvbihqW2RdLGZ1bmN0aW9uKGEpe3JldHVybiBhWzBdLmlkPT09Zi5pZH0pOy0xIT1nJiYoalthXVtnXVswXT1mLGpbYV1bZ11bMV09Zi5lbmRwb2ludHNbMV0salthXVtnXVsyXT1mLmVuZHBvaW50c1sxXS5hbmNob3IuY29uc3RydWN0b3I9PWMuRHluYW1pY0FuY2hvciksaD4tMSYmKGpbZF0uc3BsaWNlKGgsMSksYi5hZGRUb0xpc3QoaixlLFtmLGYuZW5kcG9pbnRzWzBdLGYuZW5kcG9pbnRzWzBdLmFuY2hvci5jb25zdHJ1Y3Rvcj09Yy5EeW5hbWljQW5jaG9yXSkpLGYudXBkYXRlQ29ubmVjdGVkQ2xhc3MoKX0sdGhpcy5zb3VyY2VDaGFuZ2VkPWZ1bmN0aW9uKGEsZCxlLGYpe2lmKGEhPT1kKXtlLnNvdXJjZUlkPWQsZS5zb3VyY2U9ZixiLnJlbW92ZVdpdGhGdW5jdGlvbihqW2FdLGZ1bmN0aW9uKGEpe3JldHVybiBhWzBdLmlkPT09ZS5pZH0pO3ZhciBnPWIuZmluZFdpdGhGdW5jdGlvbihqW2UudGFyZ2V0SWRdLGZ1bmN0aW9uKGEpe3JldHVybiBhWzBdLmlkPT09ZS5pZH0pO2c+LTEmJihqW2UudGFyZ2V0SWRdW2ddWzBdPWUsaltlLnRhcmdldElkXVtnXVsxXT1lLmVuZHBvaW50c1swXSxqW2UudGFyZ2V0SWRdW2ddWzJdPWUuZW5kcG9pbnRzWzBdLmFuY2hvci5jb25zdHJ1Y3Rvcj09Yy5EeW5hbWljQW5jaG9yKSxiLmFkZFRvTGlzdChqLGQsW2UsZS5lbmRwb2ludHNbMV0sZS5lbmRwb2ludHNbMV0uYW5jaG9yLmNvbnN0cnVjdG9yPT1jLkR5bmFtaWNBbmNob3JdKSxlLmVuZHBvaW50c1sxXS5hbmNob3IuaXNDb250aW51b3VzJiYoZS5zb3VyY2U9PT1lLnRhcmdldD9lLl9qc1BsdW1iLmluc3RhbmNlLnJlbW92ZUVsZW1lbnQoZS5lbmRwb2ludHNbMV0uY2FudmFzKTpudWxsPT1lLmVuZHBvaW50c1sxXS5jYW52YXMucGFyZW50Tm9kZSYmZS5fanNQbHVtYi5pbnN0YW5jZS5hcHBlbmRFbGVtZW50KGUuZW5kcG9pbnRzWzFdLmNhbnZhcykpLGUudXBkYXRlQ29ubmVjdGVkQ2xhc3MoKX19LHRoaXMucmVob21lRW5kcG9pbnQ9ZnVuY3Rpb24oYSxiLGMpe3ZhciBlPWRbYl18fFtdLGY9bS5nZXRJZChjKTtpZihmIT09Yil7dmFyIGc9ZS5pbmRleE9mKGEpO2lmKGc+LTEpe3ZhciBoPWUuc3BsaWNlKGcsMSlbMF07ay5hZGQoaCxmKX19Zm9yKHZhciBpPTA7aTxhLmNvbm5lY3Rpb25zLmxlbmd0aDtpKyspYS5jb25uZWN0aW9uc1tpXS5zb3VyY2VJZD09Yj9rLnNvdXJjZUNoYW5nZWQoYixhLmVsZW1lbnRJZCxhLmNvbm5lY3Rpb25zW2ldLGEuZWxlbWVudCk6YS5jb25uZWN0aW9uc1tpXS50YXJnZXRJZD09YiYmKGEuY29ubmVjdGlvbnNbaV0udGFyZ2V0SWQ9YS5lbGVtZW50SWQsYS5jb25uZWN0aW9uc1tpXS50YXJnZXQ9YS5lbGVtZW50LGsudXBkYXRlT3RoZXJFbmRwb2ludChhLmNvbm5lY3Rpb25zW2ldLnNvdXJjZUlkLGIsYS5lbGVtZW50SWQsYS5jb25uZWN0aW9uc1tpXSkpfSx0aGlzLnJlZHJhdz1mdW5jdGlvbihhLGUsZixnLGgsaSl7aWYoIW0uaXNTdXNwZW5kRHJhd2luZygpKXt2YXIgaz1kW2FdfHxbXSxwPWpbYV18fFtdLHE9W10scj1bXSxzPVtdO2Y9Znx8bS50aW1lc3RhbXAoKSxnPWd8fHtsZWZ0OjAsdG9wOjB9LGUmJihlPXtsZWZ0OmUubGVmdCtnLmxlZnQsdG9wOmUudG9wK2cudG9wfSk7Zm9yKHZhciB0PW0udXBkYXRlT2Zmc2V0KHtlbElkOmEsb2Zmc2V0OmUscmVjYWxjOiExLHRpbWVzdGFtcDpmfSksdj17fSx4PTA7eDxwLmxlbmd0aDt4Kyspe3ZhciB5PXBbeF1bMF0sej15LnNvdXJjZUlkLEE9eS50YXJnZXRJZCxCPXkuZW5kcG9pbnRzWzBdLmFuY2hvci5pc0NvbnRpbnVvdXMsQz15LmVuZHBvaW50c1sxXS5hbmNob3IuaXNDb250aW51b3VzO2lmKEJ8fEMpe3ZhciBEPXorXCJfXCIrQSxFPXZbRF0sRj15LnNvdXJjZUlkPT1hPzE6MDtCJiYhbFt6XSYmKGxbel09e3RvcDpbXSxyaWdodDpbXSxib3R0b206W10sbGVmdDpbXX0pLEMmJiFsW0FdJiYobFtBXT17dG9wOltdLHJpZ2h0OltdLGJvdHRvbTpbXSxsZWZ0OltdfSksYSE9QSYmbS51cGRhdGVPZmZzZXQoe2VsSWQ6QSx0aW1lc3RhbXA6Zn0pLGEhPXomJm0udXBkYXRlT2Zmc2V0KHtlbElkOnosdGltZXN0YW1wOmZ9KTt2YXIgRz1tLmdldENhY2hlZERhdGEoQSksSD1tLmdldENhY2hlZERhdGEoeik7QT09eiYmKEJ8fEMpPyh3KGxbel0sLU1hdGguUEkvMiwwLHksITEsQSwwLCExLFwidG9wXCIseixxLHIpLHcobFtBXSwtTWF0aC5QSS8yLDAseSwhMSx6LDEsITEsXCJ0b3BcIixBLHEscikpOihFfHwoRT1vKHosQSxILm8sRy5vLHkuZW5kcG9pbnRzWzBdLmFuY2hvcix5LmVuZHBvaW50c1sxXS5hbmNob3IpLHZbRF09RSksQiYmdyhsW3pdLEUudGhldGEsMCx5LCExLEEsMCwhMSxFLmFbMF0seixxLHIpLEMmJncobFtBXSxFLnRoZXRhMiwtMSx5LCEwLHosMSwhMCxFLmFbMV0sQSxxLHIpKSxCJiZiLmFkZFdpdGhGdW5jdGlvbihzLHosZnVuY3Rpb24oYSl7cmV0dXJuIGE9PT16fSksQyYmYi5hZGRXaXRoRnVuY3Rpb24ocyxBLGZ1bmN0aW9uKGEpe3JldHVybiBhPT09QX0pLGIuYWRkV2l0aEZ1bmN0aW9uKHEseSxmdW5jdGlvbihhKXtyZXR1cm4gYS5pZD09eS5pZH0pLChCJiYwPT09Rnx8QyYmMT09PUYpJiZiLmFkZFdpdGhGdW5jdGlvbihyLHkuZW5kcG9pbnRzW0ZdLGZ1bmN0aW9uKGEpe3JldHVybiBhLmlkPT15LmVuZHBvaW50c1tGXS5pZH0pfX1mb3IoeD0wO3g8ay5sZW5ndGg7eCsrKTA9PT1rW3hdLmNvbm5lY3Rpb25zLmxlbmd0aCYma1t4XS5hbmNob3IuaXNDb250aW51b3VzJiYobFthXXx8KGxbYV09e3RvcDpbXSxyaWdodDpbXSxib3R0b206W10sbGVmdDpbXX0pLHcobFthXSwtTWF0aC5QSS8yLDAse2VuZHBvaW50czpba1t4XSxrW3hdXSxwYWludDpmdW5jdGlvbigpe319LCExLGEsMCwhMSxrW3hdLmFuY2hvci5nZXREZWZhdWx0RmFjZSgpLGEscSxyKSxiLmFkZFdpdGhGdW5jdGlvbihzLGEsZnVuY3Rpb24oYil7cmV0dXJuIGI9PT1hfSkpO2Zvcih4PTA7eDxzLmxlbmd0aDt4KyspdShzW3hdLGxbc1t4XV0pO2Zvcih4PTA7eDxrLmxlbmd0aDt4Kyspa1t4XS5wYWludCh7dGltZXN0YW1wOmYsb2Zmc2V0OnQsZGltZW5zaW9uczp0LnMscmVjYWxjOmkhPT0hMH0pO2Zvcih4PTA7eDxyLmxlbmd0aDt4Kyspe3ZhciBJPW0uZ2V0Q2FjaGVkRGF0YShyW3hdLmVsZW1lbnRJZCk7clt4XS5wYWludCh7dGltZXN0YW1wOmYsb2Zmc2V0OkksZGltZW5zaW9uczpJLnN9KX1mb3IoeD0wO3g8cC5sZW5ndGg7eCsrKXt2YXIgSj1wW3hdWzFdO2lmKEouYW5jaG9yLmNvbnN0cnVjdG9yPT1jLkR5bmFtaWNBbmNob3Ipe0oucGFpbnQoe2VsZW1lbnRXaXRoUHJlY2VkZW5jZTphLHRpbWVzdGFtcDpmfSksYi5hZGRXaXRoRnVuY3Rpb24ocSxwW3hdWzBdLGZ1bmN0aW9uKGEpe3JldHVybiBhLmlkPT1wW3hdWzBdLmlkfSk7Zm9yKHZhciBLPTA7SzxKLmNvbm5lY3Rpb25zLmxlbmd0aDtLKyspSi5jb25uZWN0aW9uc1tLXSE9PXBbeF1bMF0mJmIuYWRkV2l0aEZ1bmN0aW9uKHEsSi5jb25uZWN0aW9uc1tLXSxmdW5jdGlvbihhKXtyZXR1cm4gYS5pZD09Si5jb25uZWN0aW9uc1tLXS5pZH0pfWVsc2UgSi5hbmNob3IuY29uc3RydWN0b3I9PWMuQW5jaG9yJiZiLmFkZFdpdGhGdW5jdGlvbihxLHBbeF1bMF0sZnVuY3Rpb24oYSl7cmV0dXJuIGEuaWQ9PXBbeF1bMF0uaWR9KX12YXIgTD1uW2FdO2ZvcihMJiZMLnBhaW50KHt0aW1lc3RhbXA6ZixyZWNhbGM6ITEsZWxJZDphfSkseD0wO3g8cS5sZW5ndGg7eCsrKXFbeF0ucGFpbnQoe2VsSWQ6YSx0aW1lc3RhbXA6ZixyZWNhbGM6ITEsY2xlYXJFZGl0czpofSl9fTt2YXIgeD1mdW5jdGlvbihhKXtiLkV2ZW50R2VuZXJhdG9yLmFwcGx5KHRoaXMpLHRoaXMudHlwZT1cIkNvbnRpbnVvdXNcIix0aGlzLmlzRHluYW1pYz0hMCx0aGlzLmlzQ29udGludW91cz0hMDtmb3IodmFyIGM9YS5mYWNlc3x8W1widG9wXCIsXCJyaWdodFwiLFwiYm90dG9tXCIsXCJsZWZ0XCJdLGQ9IShhLmNsb2Nrd2lzZT09PSExKSxoPXt9LGk9e3RvcDpcImJvdHRvbVwiLHJpZ2h0OlwibGVmdFwiLGxlZnQ6XCJyaWdodFwiLGJvdHRvbTpcInRvcFwifSxqPXt0b3A6XCJyaWdodFwiLHJpZ2h0OlwiYm90dG9tXCIsbGVmdDpcInRvcFwiLGJvdHRvbTpcImxlZnRcIn0saz17dG9wOlwibGVmdFwiLHJpZ2h0OlwidG9wXCIsbGVmdDpcImJvdHRvbVwiLGJvdHRvbTpcInJpZ2h0XCJ9LGw9ZD9qOmssbT1kP2s6aixuPWEuY3NzQ2xhc3N8fFwiXCIsbz0wO288Yy5sZW5ndGg7bysrKWhbY1tvXV09ITA7dGhpcy5nZXREZWZhdWx0RmFjZT1mdW5jdGlvbigpe3JldHVybiAwPT09Yy5sZW5ndGg/XCJ0b3BcIjpjWzBdfSx0aGlzLnZlcmlmeUVkZ2U9ZnVuY3Rpb24oYSl7cmV0dXJuIGhbYV0/YTpoW2lbYV1dP2lbYV06aFtsW2FdXT9sW2FdOmhbbVthXV0/bVthXTphfSx0aGlzLmlzRWRnZVN1cHBvcnRlZD1mdW5jdGlvbihhKXtyZXR1cm4gaFthXT09PSEwfSx0aGlzLmNvbXB1dGU9ZnVuY3Rpb24oYSl7cmV0dXJuIGZbYS5lbGVtZW50LmlkXXx8ZVthLmVsZW1lbnQuaWRdfHxbMCwwXX0sdGhpcy5nZXRDdXJyZW50TG9jYXRpb249ZnVuY3Rpb24oYSl7cmV0dXJuIGZbYS5lbGVtZW50LmlkXXx8ZVthLmVsZW1lbnQuaWRdfHxbMCwwXX0sdGhpcy5nZXRPcmllbnRhdGlvbj1mdW5jdGlvbihhKXtyZXR1cm4gZ1thLmlkXXx8WzAsMF19LHRoaXMuY2xlYXJVc2VyRGVmaW5lZExvY2F0aW9uPWZ1bmN0aW9uKCl7ZGVsZXRlIGZbYS5lbGVtZW50SWRdfSx0aGlzLnNldFVzZXJEZWZpbmVkTG9jYXRpb249ZnVuY3Rpb24oYil7ZlthLmVsZW1lbnRJZF09Yn0sdGhpcy5nZXRDc3NDbGFzcz1mdW5jdGlvbigpe3JldHVybiBufX07bS5jb250aW51b3VzQW5jaG9yRmFjdG9yeT17Z2V0OmZ1bmN0aW9uKGEpe3JldHVybiBuZXcgeChhKX0sY2xlYXI6ZnVuY3Rpb24oYSl7ZGVsZXRlIGZbYV0sZGVsZXRlIGVbYV19fX0sYy5BbmNob3I9ZnVuY3Rpb24oYSl7dGhpcy54PWEueHx8MCx0aGlzLnk9YS55fHwwLHRoaXMuZWxlbWVudElkPWEuZWxlbWVudElkLHRoaXMuY3NzQ2xhc3M9YS5jc3NDbGFzc3x8XCJcIix0aGlzLnVzZXJEZWZpbmVkTG9jYXRpb249bnVsbCx0aGlzLm9yaWVudGF0aW9uPWEub3JpZW50YXRpb258fFswLDBdLHRoaXMubGFzdFJldHVyblZhbHVlPW51bGwsdGhpcy5vZmZzZXRzPWEub2Zmc2V0c3x8WzAsMF0sdGhpcy50aW1lc3RhbXA9bnVsbCxiLkV2ZW50R2VuZXJhdG9yLmFwcGx5KHRoaXMpLHRoaXMuY29tcHV0ZT1mdW5jdGlvbihhKXt2YXIgYj1hLnh5LGM9YS53aCxkPWEudGltZXN0YW1wO3JldHVybiBhLmNsZWFyVXNlckRlZmluZWRMb2NhdGlvbiYmKHRoaXMudXNlckRlZmluZWRMb2NhdGlvbj1udWxsKSxkJiZkPT09dGhpcy50aW1lc3RhbXA/dGhpcy5sYXN0UmV0dXJuVmFsdWU6KHRoaXMubGFzdFJldHVyblZhbHVlPW51bGwhPXRoaXMudXNlckRlZmluZWRMb2NhdGlvbj90aGlzLnVzZXJEZWZpbmVkTG9jYXRpb246W2JbMF0rdGhpcy54KmNbMF0rdGhpcy5vZmZzZXRzWzBdLGJbMV0rdGhpcy55KmNbMV0rdGhpcy5vZmZzZXRzWzFdXSx0aGlzLnRpbWVzdGFtcD1kLHRoaXMubGFzdFJldHVyblZhbHVlKX0sdGhpcy5nZXRDdXJyZW50TG9jYXRpb249ZnVuY3Rpb24oYSl7cmV0dXJuIGE9YXx8e30sbnVsbD09dGhpcy5sYXN0UmV0dXJuVmFsdWV8fG51bGwhPWEudGltZXN0YW1wJiZ0aGlzLnRpbWVzdGFtcCE9YS50aW1lc3RhbXA/dGhpcy5jb21wdXRlKGEpOnRoaXMubGFzdFJldHVyblZhbHVlfX0sYi5leHRlbmQoYy5BbmNob3IsYi5FdmVudEdlbmVyYXRvcix7ZXF1YWxzOmZ1bmN0aW9uKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuZ2V0T3JpZW50YXRpb24oKSxjPXRoaXMuZ2V0T3JpZW50YXRpb24oKTtyZXR1cm4gdGhpcy54PT1hLngmJnRoaXMueT09YS55JiZ0aGlzLm9mZnNldHNbMF09PWEub2Zmc2V0c1swXSYmdGhpcy5vZmZzZXRzWzFdPT1hLm9mZnNldHNbMV0mJmNbMF09PWJbMF0mJmNbMV09PWJbMV19LGdldFVzZXJEZWZpbmVkTG9jYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy51c2VyRGVmaW5lZExvY2F0aW9ufSxzZXRVc2VyRGVmaW5lZExvY2F0aW9uOmZ1bmN0aW9uKGEpe3RoaXMudXNlckRlZmluZWRMb2NhdGlvbj1hfSxjbGVhclVzZXJEZWZpbmVkTG9jYXRpb246ZnVuY3Rpb24oKXt0aGlzLnVzZXJEZWZpbmVkTG9jYXRpb249bnVsbH0sZ2V0T3JpZW50YXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vcmllbnRhdGlvbn0sZ2V0Q3NzQ2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jc3NDbGFzc319KSxjLkZsb2F0aW5nQW5jaG9yPWZ1bmN0aW9uKGEpe2MuQW5jaG9yLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt2YXIgYj1hLnJlZmVyZW5jZSxkPWEucmVmZXJlbmNlQ2FudmFzLGU9Yy5nZXRTaXplKGQpLGY9MCxnPTAsaD1udWxsLGk9bnVsbDt0aGlzLm9yaWVudGF0aW9uPW51bGwsdGhpcy54PTAsdGhpcy55PTAsdGhpcy5pc0Zsb2F0aW5nPSEwLHRoaXMuY29tcHV0ZT1mdW5jdGlvbihhKXt2YXIgYj1hLnh5LGM9W2JbMF0rZVswXS8yLGJbMV0rZVsxXS8yXTtyZXR1cm4gaT1jLGN9LHRoaXMuZ2V0T3JpZW50YXRpb249ZnVuY3Rpb24oYSl7aWYoaClyZXR1cm4gaDt2YXIgYz1iLmdldE9yaWVudGF0aW9uKGEpO3JldHVyblstMSpNYXRoLmFicyhjWzBdKSpmLC0xKk1hdGguYWJzKGNbMV0pKmddfSx0aGlzLm92ZXI9ZnVuY3Rpb24oYSxiKXtoPWEuZ2V0T3JpZW50YXRpb24oYil9LHRoaXMub3V0PWZ1bmN0aW9uKCl7aD1udWxsfSx0aGlzLmdldEN1cnJlbnRMb2NhdGlvbj1mdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09aT90aGlzLmNvbXB1dGUoYSk6aX19LGIuZXh0ZW5kKGMuRmxvYXRpbmdBbmNob3IsYy5BbmNob3IpO3ZhciBkPWZ1bmN0aW9uKGEsYixkKXtyZXR1cm4gYS5jb25zdHJ1Y3Rvcj09Yy5BbmNob3I/YTpiLm1ha2VBbmNob3IoYSxkLGIpfTtjLkR5bmFtaWNBbmNob3I9ZnVuY3Rpb24oYSl7Yy5BbmNob3IuYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMuaXNEeW5hbWljPSEwLHRoaXMuYW5jaG9ycz1bXSx0aGlzLmVsZW1lbnRJZD1hLmVsZW1lbnRJZCx0aGlzLmpzUGx1bWJJbnN0YW5jZT1hLmpzUGx1bWJJbnN0YW5jZTtmb3IodmFyIGI9MDtiPGEuYW5jaG9ycy5sZW5ndGg7YisrKXRoaXMuYW5jaG9yc1tiXT1kKGEuYW5jaG9yc1tiXSx0aGlzLmpzUGx1bWJJbnN0YW5jZSx0aGlzLmVsZW1lbnRJZCk7dGhpcy5nZXRBbmNob3JzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYW5jaG9yc30sdGhpcy5sb2NrZWQ9ITE7dmFyIGU9dGhpcy5hbmNob3JzLmxlbmd0aD4wP3RoaXMuYW5jaG9yc1swXTpudWxsLGY9ZSxnPXRoaXMsaD1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPWRbMF0rYS54KmVbMF0sZz1kWzFdK2EueSplWzFdLGg9ZFswXStlWzBdLzIsaT1kWzFdK2VbMV0vMjtyZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KGItZiwyKStNYXRoLnBvdyhjLWcsMikpK01hdGguc3FydChNYXRoLnBvdyhoLWYsMikrTWF0aC5wb3coaS1nLDIpKX0saT1hLnNlbGVjdG9yfHxmdW5jdGlvbihhLGIsYyxkLGUpe2Zvcih2YXIgZj1jWzBdK2RbMF0vMixnPWNbMV0rZFsxXS8yLGk9LTEsaj0xLzAsaz0wO2s8ZS5sZW5ndGg7aysrKXt2YXIgbD1oKGVba10sZixnLGEsYik7aj5sJiYoaT1rKzAsaj1sKX1yZXR1cm4gZVtpXX07dGhpcy5jb21wdXRlPWZ1bmN0aW9uKGEpe3ZhciBiPWEueHksYz1hLndoLGQ9YS50eHksaD1hLnR3aDt0aGlzLnRpbWVzdGFtcD1hLnRpbWVzdGFtcDt2YXIgaj1nLmdldFVzZXJEZWZpbmVkTG9jYXRpb24oKTtyZXR1cm4gbnVsbCE9aj9qOnRoaXMubG9ja2VkfHxudWxsPT1kfHxudWxsPT1oP2UuY29tcHV0ZShhKTooYS50aW1lc3RhbXA9bnVsbCxlPWkoYixjLGQsaCx0aGlzLmFuY2hvcnMpLHRoaXMueD1lLngsdGhpcy55PWUueSxlIT1mJiZ0aGlzLmZpcmUoXCJhbmNob3JDaGFuZ2VkXCIsZSksZj1lLGUuY29tcHV0ZShhKSl9LHRoaXMuZ2V0Q3VycmVudExvY2F0aW9uPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmdldFVzZXJEZWZpbmVkTG9jYXRpb24oKXx8KG51bGwhPWU/ZS5nZXRDdXJyZW50TG9jYXRpb24oYSk6bnVsbCl9LHRoaXMuZ2V0T3JpZW50YXRpb249ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGwhPWU/ZS5nZXRPcmllbnRhdGlvbihhKTpbMCwwXX0sdGhpcy5vdmVyPWZ1bmN0aW9uKGEsYil7bnVsbCE9ZSYmZS5vdmVyKGEsYil9LHRoaXMub3V0PWZ1bmN0aW9uKCl7bnVsbCE9ZSYmZS5vdXQoKX0sdGhpcy5nZXRDc3NDbGFzcz1mdW5jdGlvbigpe3JldHVybiBlJiZlLmdldENzc0NsYXNzKCl8fFwiXCJ9fSxiLmV4dGVuZChjLkR5bmFtaWNBbmNob3IsYy5BbmNob3IpO3ZhciBlPWZ1bmN0aW9uKGEsYixkLGUsZixnKXtjLkFuY2hvcnNbZl09ZnVuY3Rpb24oYyl7dmFyIGg9Yy5qc1BsdW1iSW5zdGFuY2UubWFrZUFuY2hvcihbYSxiLGQsZSwwLDBdLGMuZWxlbWVudElkLGMuanNQbHVtYkluc3RhbmNlKTtyZXR1cm4gaC50eXBlPWYsZyYmZyhoLGMpLGh9fTtlKC41LDAsMCwtMSxcIlRvcENlbnRlclwiKSxlKC41LDEsMCwxLFwiQm90dG9tQ2VudGVyXCIpLGUoMCwuNSwtMSwwLFwiTGVmdE1pZGRsZVwiKSxlKDEsLjUsMSwwLFwiUmlnaHRNaWRkbGVcIiksZSguNSwwLDAsLTEsXCJUb3BcIiksZSguNSwxLDAsMSxcIkJvdHRvbVwiKSxlKDAsLjUsLTEsMCxcIkxlZnRcIiksZSgxLC41LDEsMCxcIlJpZ2h0XCIpLGUoLjUsLjUsMCwwLFwiQ2VudGVyXCIpLGUoMSwwLDAsLTEsXCJUb3BSaWdodFwiKSxlKDEsMSwwLDEsXCJCb3R0b21SaWdodFwiKSxlKDAsMCwwLC0xLFwiVG9wTGVmdFwiKSxlKDAsMSwwLDEsXCJCb3R0b21MZWZ0XCIpLGMuRGVmYXVsdHMuRHluYW1pY0FuY2hvcnM9ZnVuY3Rpb24oYSl7cmV0dXJuIGEuanNQbHVtYkluc3RhbmNlLm1ha2VBbmNob3JzKFtcIlRvcENlbnRlclwiLFwiUmlnaHRNaWRkbGVcIixcIkJvdHRvbUNlbnRlclwiLFwiTGVmdE1pZGRsZVwiXSxhLmVsZW1lbnRJZCxhLmpzUGx1bWJJbnN0YW5jZSl9LGMuQW5jaG9ycy5BdXRvRGVmYXVsdD1mdW5jdGlvbihhKXt2YXIgYj1hLmpzUGx1bWJJbnN0YW5jZS5tYWtlRHluYW1pY0FuY2hvcihjLkRlZmF1bHRzLkR5bmFtaWNBbmNob3JzKGEpKTtyZXR1cm4gYi50eXBlPVwiQXV0b0RlZmF1bHRcIixifTt2YXIgZj1mdW5jdGlvbihhLGIpe2MuQW5jaG9yc1thXT1mdW5jdGlvbihjKXt2YXIgZD1jLmpzUGx1bWJJbnN0YW5jZS5tYWtlQW5jaG9yKFtcIkNvbnRpbnVvdXNcIix7ZmFjZXM6Yn1dLGMuZWxlbWVudElkLGMuanNQbHVtYkluc3RhbmNlKTtyZXR1cm4gZC50eXBlPWEsZH19O2MuQW5jaG9ycy5Db250aW51b3VzPWZ1bmN0aW9uKGEpe3JldHVybiBhLmpzUGx1bWJJbnN0YW5jZS5jb250aW51b3VzQW5jaG9yRmFjdG9yeS5nZXQoYSl9LGYoXCJDb250aW51b3VzTGVmdFwiLFtcImxlZnRcIl0pLGYoXCJDb250aW51b3VzVG9wXCIsW1widG9wXCJdKSxmKFwiQ29udGludW91c0JvdHRvbVwiLFtcImJvdHRvbVwiXSksZihcIkNvbnRpbnVvdXNSaWdodFwiLFtcInJpZ2h0XCJdKSxlKDAsMCwwLDAsXCJBc3NpZ25cIixmdW5jdGlvbihhLGIpe3ZhciBjPWIucG9zaXRpb258fFwiRml4ZWRcIjthLnBvc2l0aW9uRmluZGVyPWMuY29uc3RydWN0b3I9PVN0cmluZz9iLmpzUGx1bWJJbnN0YW5jZS5BbmNob3JQb3NpdGlvbkZpbmRlcnNbY106YyxhLmNvbnN0cnVjdG9yUGFyYW1zPWJ9KSxhLmpzUGx1bWJJbnN0YW5jZS5wcm90b3R5cGUuQW5jaG9yUG9zaXRpb25GaW5kZXJzPXtGaXhlZDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuWyhhLmxlZnQtYi5sZWZ0KS9jWzBdLChhLnRvcC1iLnRvcCkvY1sxXV19LEdyaWQ6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5sZWZ0LWIubGVmdCxmPWEudG9wLWIudG9wLGc9Y1swXS9kLmdyaWRbMF0saD1jWzFdL2QuZ3JpZFsxXSxpPU1hdGguZmxvb3IoZS9nKSxqPU1hdGguZmxvb3IoZi9oKTtyZXR1cm5bKGkqZytnLzIpL2NbMF0sKGoqaCtoLzIpL2NbMV1dfX0sYy5BbmNob3JzLlBlcmltZXRlcj1mdW5jdGlvbihhKXthPWF8fHt9O3ZhciBiPWEuYW5jaG9yQ291bnR8fDYwLGM9YS5zaGFwZTtpZighYyl0aHJvdyBuZXcgRXJyb3IoXCJubyBzaGFwZSBzdXBwbGllZCB0byBQZXJpbWV0ZXIgQW5jaG9yIHR5cGVcIik7dmFyIGQ9ZnVuY3Rpb24oKXtmb3IodmFyIGE9LjUsYz0yKk1hdGguUEkvYixkPTAsZT1bXSxmPTA7Yj5mO2YrKyl7dmFyIGc9YSthKk1hdGguc2luKGQpLGg9YSthKk1hdGguY29zKGQpO2UucHVzaChbZyxoLDAsMF0pLGQrPWN9cmV0dXJuIGV9LGU9ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPWIvYS5sZW5ndGgsZD1bXSxlPWZ1bmN0aW9uKGEsZSxmLGcsaCl7Yz1iKmg7Zm9yKHZhciBpPShmLWEpL2Msaj0oZy1lKS9jLGs9MDtjPms7aysrKWQucHVzaChbYStpKmssZStqKmssMCwwXSl9LGY9MDtmPGEubGVuZ3RoO2YrKyllLmFwcGx5KG51bGwsYVtmXSk7cmV0dXJuIGR9LGY9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVtdLGM9MDtjPGEubGVuZ3RoO2MrKyliLnB1c2goW2FbY11bMF0sYVtjXVsxXSxhW2NdWzJdLGFbY11bM10sMS9hLmxlbmd0aF0pO3JldHVybiBlKGIpfSxnPWZ1bmN0aW9uKCl7cmV0dXJuIGYoW1swLDAsMSwwXSxbMSwwLDEsMV0sWzEsMSwwLDFdLFswLDEsMCwwXV0pfSxoPXtDaXJjbGU6ZCxFbGxpcHNlOmQsRGlhbW9uZDpmdW5jdGlvbigpe3JldHVybiBmKFtbLjUsMCwxLC41XSxbMSwuNSwuNSwxXSxbLjUsMSwwLC41XSxbMCwuNSwuNSwwXV0pfSxSZWN0YW5nbGU6ZyxTcXVhcmU6ZyxUcmlhbmdsZTpmdW5jdGlvbigpe3JldHVybiBmKFtbLjUsMCwxLDFdLFsxLDEsMCwxXSxbMCwxLC41LDBdXSl9LFBhdGg6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPWEucG9pbnRzLGM9W10sZD0wLGY9MDtmPGIubGVuZ3RoLTE7ZisrKXt2YXIgZz1NYXRoLnNxcnQoTWF0aC5wb3coYltmXVsyXS1iW2ZdWzBdKStNYXRoLnBvdyhiW2ZdWzNdLWJbZl1bMV0pKTtkKz1nLGMucHVzaChbYltmXVswXSxiW2ZdWzFdLGJbZisxXVswXSxiW2YrMV1bMV0sZ10pfWZvcih2YXIgaD0wO2g8Yy5sZW5ndGg7aCsrKWNbaF1bNF09Y1toXVs0XS9kO3JldHVybiBlKGMpfX0saT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1bXSxkPWIvMTgwKk1hdGguUEksZT0wO2U8YS5sZW5ndGg7ZSsrKXt2YXIgZj1hW2VdWzBdLS41LGc9YVtlXVsxXS0uNTtjLnB1c2goWy41KyhmKk1hdGguY29zKGQpLWcqTWF0aC5zaW4oZCkpLC41KyhmKk1hdGguc2luKGQpK2cqTWF0aC5jb3MoZCkpLGFbZV1bMl0sYVtlXVszXV0pfXJldHVybiBjfTtpZighaFtjXSl0aHJvdyBuZXcgRXJyb3IoXCJTaGFwZSBbXCIrYytcIl0gaXMgdW5rbm93biBieSBQZXJpbWV0ZXIgQW5jaG9yIHR5cGVcIik7dmFyIGo9aFtjXShhKTthLnJvdGF0aW9uJiYoaj1pKGosYS5yb3RhdGlvbikpO3ZhciBrPWEuanNQbHVtYkluc3RhbmNlLm1ha2VEeW5hbWljQW5jaG9yKGopO3JldHVybiBrLnR5cGU9XCJQZXJpbWV0ZXJcIixrfX0uY2FsbChcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp0aGlzKSxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBhPXRoaXMsYj1hLmpzUGx1bWIsYz1hLmpzUGx1bWJVdGlsLGQ9YS5CaWx0b25nO2IuU2VnbWVudHM9e0Fic3RyYWN0U2VnbWVudDpmdW5jdGlvbihhKXt0aGlzLnBhcmFtcz1hLHRoaXMuZmluZENsb3Nlc3RQb2ludE9uUGF0aD1mdW5jdGlvbigpe3JldHVybntkOjEvMCx4Om51bGwseTpudWxsLGw6bnVsbH19LHRoaXMuZ2V0Qm91bmRzPWZ1bmN0aW9uKCl7cmV0dXJue21pblg6TWF0aC5taW4oYS54MSxhLngyKSxtaW5ZOk1hdGgubWluKGEueTEsYS55MiksbWF4WDpNYXRoLm1heChhLngxLGEueDIpLG1heFk6TWF0aC5tYXgoYS55MSxhLnkyKX19fSxTdHJhaWdodDpmdW5jdGlvbihhKXt2YXIgYyxlLGYsZyxoLGksaixrPShiLlNlZ21lbnRzLkFic3RyYWN0U2VnbWVudC5hcHBseSh0aGlzLGFyZ3VtZW50cyksZnVuY3Rpb24oKXtjPU1hdGguc3FydChNYXRoLnBvdyhoLWcsMikrTWF0aC5wb3coai1pLDIpKSxlPWQuZ3JhZGllbnQoe3g6Zyx5Oml9LHt4OmgseTpqfSksZj0tMS9lfSk7dGhpcy50eXBlPVwiU3RyYWlnaHRcIix0aGlzLmdldExlbmd0aD1mdW5jdGlvbigpe3JldHVybiBjfSx0aGlzLmdldEdyYWRpZW50PWZ1bmN0aW9uKCl7cmV0dXJuIGV9LHRoaXMuZ2V0Q29vcmRpbmF0ZXM9ZnVuY3Rpb24oKXtyZXR1cm57eDE6Zyx5MTppLHgyOmgseTI6an19LHRoaXMuc2V0Q29vcmRpbmF0ZXM9ZnVuY3Rpb24oYSl7Zz1hLngxLGk9YS55MSxoPWEueDIsaj1hLnkyLGsoKX0sdGhpcy5zZXRDb29yZGluYXRlcyh7eDE6YS54MSx5MTphLnkxLHgyOmEueDIseTI6YS55Mn0pLHRoaXMuZ2V0Qm91bmRzPWZ1bmN0aW9uKCl7cmV0dXJue21pblg6TWF0aC5taW4oZyxoKSxtaW5ZOk1hdGgubWluKGksaiksbWF4WDpNYXRoLm1heChnLGgpLG1heFk6TWF0aC5tYXgoaSxqKX19LHRoaXMucG9pbnRPblBhdGg9ZnVuY3Rpb24oYSxiKXtpZigwIT09YXx8Yil7aWYoMSE9YXx8Yil7dmFyIGU9Yj9hPjA/YTpjK2E6YSpjO3JldHVybiBkLnBvaW50T25MaW5lKHt4OmcseTppfSx7eDpoLHk6an0sZSl9cmV0dXJue3g6aCx5Omp9fXJldHVybnt4OmcseTppfX0sdGhpcy5ncmFkaWVudEF0UG9pbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gZX0sdGhpcy5wb2ludEFsb25nUGF0aEZyb209ZnVuY3Rpb24oYSxiLGMpe3ZhciBlPXRoaXMucG9pbnRPblBhdGgoYSxjKSxmPTA+PWI/e3g6Zyx5Oml9Ont4OmgseTpqfTtyZXR1cm4gMD49YiYmTWF0aC5hYnMoYik+MSYmKGIqPS0xKSxkLnBvaW50T25MaW5lKGUsZixiKX07dmFyIGw9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBjPj1NYXRoLm1pbihhLGIpJiZjPD1NYXRoLm1heChhLGIpfSxtPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gTWF0aC5hYnMoYy1hKTxNYXRoLmFicyhjLWIpP2E6Yn07dGhpcy5maW5kQ2xvc2VzdFBvaW50T25QYXRoPWZ1bmN0aW9uKGEsYil7dmFyIGs9e2Q6MS8wLHg6bnVsbCx5Om51bGwsbDpudWxsLHgxOmcseDI6aCx5MTppLHkyOmp9O2lmKDA9PT1lKWsueT1pLGsueD1sKGcsaCxhKT9hOm0oZyxoLGEpO2Vsc2UgaWYoMS8wPT1lfHxlPT0tMS8wKWsueD1nLGsueT1sKGksaixiKT9iOm0oaSxqLGIpO2Vsc2V7dmFyIG49aS1lKmcsbz1iLWYqYSxwPShvLW4pLyhlLWYpLHE9ZSpwK247ay54PWwoZyxoLHApP3A6bShnLGgscCksay55PWwoaSxqLHEpP3E6bShpLGoscSl9dmFyIHI9ZC5saW5lTGVuZ3RoKFtrLngsay55XSxbZyxpXSk7cmV0dXJuIGsuZD1kLmxpbmVMZW5ndGgoW2EsYl0sW2sueCxrLnldKSxrLmw9ci9jLGt9fSxBcmM6ZnVuY3Rpb24oYSl7dmFyIGM9KGIuU2VnbWVudHMuQWJzdHJhY3RTZWdtZW50LmFwcGx5KHRoaXMsYXJndW1lbnRzKSxmdW5jdGlvbihiLGMpe3JldHVybiBkLnRoZXRhKFthLmN4LGEuY3ldLFtiLGNdKX0pLGU9ZnVuY3Rpb24oYSxiKXtpZihhLmFudGljbG9ja3dpc2Upe3ZhciBjPWEuc3RhcnRBbmdsZTxhLmVuZEFuZ2xlP2Euc3RhcnRBbmdsZStmOmEuc3RhcnRBbmdsZSxkPU1hdGguYWJzKGMtYS5lbmRBbmdsZSk7cmV0dXJuIGMtZCpifXZhciBlPWEuZW5kQW5nbGU8YS5zdGFydEFuZ2xlP2EuZW5kQW5nbGUrZjphLmVuZEFuZ2xlLGc9TWF0aC5hYnMoZS1hLnN0YXJ0QW5nbGUpO3JldHVybiBhLnN0YXJ0QW5nbGUrZypifSxmPTIqTWF0aC5QSTt0aGlzLnJhZGl1cz1hLnIsdGhpcy5hbnRpY2xvY2t3aXNlPWEuYWMsdGhpcy50eXBlPVwiQXJjXCIsYS5zdGFydEFuZ2xlJiZhLmVuZEFuZ2xlPyh0aGlzLnN0YXJ0QW5nbGU9YS5zdGFydEFuZ2xlLHRoaXMuZW5kQW5nbGU9YS5lbmRBbmdsZSx0aGlzLngxPWEuY3grdGhpcy5yYWRpdXMqTWF0aC5jb3MoYS5zdGFydEFuZ2xlKSx0aGlzLnkxPWEuY3krdGhpcy5yYWRpdXMqTWF0aC5zaW4oYS5zdGFydEFuZ2xlKSx0aGlzLngyPWEuY3grdGhpcy5yYWRpdXMqTWF0aC5jb3MoYS5lbmRBbmdsZSksdGhpcy55Mj1hLmN5K3RoaXMucmFkaXVzKk1hdGguc2luKGEuZW5kQW5nbGUpKToodGhpcy5zdGFydEFuZ2xlPWMoYS54MSxhLnkxKSx0aGlzLmVuZEFuZ2xlPWMoYS54MixhLnkyKSx0aGlzLngxPWEueDEsdGhpcy55MT1hLnkxLHRoaXMueDI9YS54Mix0aGlzLnkyPWEueTIpLHRoaXMuZW5kQW5nbGU8MCYmKHRoaXMuZW5kQW5nbGUrPWYpLHRoaXMuc3RhcnRBbmdsZTwwJiYodGhpcy5zdGFydEFuZ2xlKz1mKTt2YXIgZz10aGlzLmVuZEFuZ2xlPHRoaXMuc3RhcnRBbmdsZT90aGlzLmVuZEFuZ2xlK2Y6dGhpcy5lbmRBbmdsZTt0aGlzLnN3ZWVwPU1hdGguYWJzKGctdGhpcy5zdGFydEFuZ2xlKSx0aGlzLmFudGljbG9ja3dpc2UmJih0aGlzLnN3ZWVwPWYtdGhpcy5zd2VlcCk7dmFyIGg9MipNYXRoLlBJKnRoaXMucmFkaXVzLGk9dGhpcy5zd2VlcC9mLGo9aCppO3RoaXMuZ2V0TGVuZ3RoPWZ1bmN0aW9uKCl7cmV0dXJuIGp9LHRoaXMuZ2V0Qm91bmRzPWZ1bmN0aW9uKCl7cmV0dXJue21pblg6YS5jeC1hLnIsbWF4WDphLmN4K2EucixtaW5ZOmEuY3ktYS5yLG1heFk6YS5jeSthLnJ9fTt2YXIgaz0xZS0xMCxsPWZ1bmN0aW9uKGEpe3ZhciBiPU1hdGguZmxvb3IoYSksYz1NYXRoLmNlaWwoYSk7cmV0dXJuIGs+YS1iP2I6az5jLWE/YzphfTt0aGlzLnBvaW50T25QYXRoPWZ1bmN0aW9uKGIsYyl7aWYoMD09PWIpcmV0dXJue3g6dGhpcy54MSx5OnRoaXMueTEsdGhldGE6dGhpcy5zdGFydEFuZ2xlfTtpZigxPT1iKXJldHVybnt4OnRoaXMueDIseTp0aGlzLnkyLHRoZXRhOnRoaXMuZW5kQW5nbGV9O2MmJihiLz1qKTt2YXIgZD1lKHRoaXMsYiksZj1hLmN4K2EucipNYXRoLmNvcyhkKSxnPWEuY3krYS5yKk1hdGguc2luKGQpO3JldHVybnt4OmwoZikseTpsKGcpLHRoZXRhOmR9fSx0aGlzLmdyYWRpZW50QXRQb2ludD1mdW5jdGlvbihiLGMpe3ZhciBlPXRoaXMucG9pbnRPblBhdGgoYixjKSxmPWQubm9ybWFsKFthLmN4LGEuY3ldLFtlLngsZS55XSk7cmV0dXJuIHRoaXMuYW50aWNsb2Nrd2lzZXx8MS8wIT1mJiZmIT0tMS8wfHwoZio9LTEpLGZ9LHRoaXMucG9pbnRBbG9uZ1BhdGhGcm9tPWZ1bmN0aW9uKGIsYyxkKXt2YXIgZT10aGlzLnBvaW50T25QYXRoKGIsZCksZj0yKihjL2gpKk1hdGguUEksZz10aGlzLmFudGljbG9ja3dpc2U/LTE6MSxpPWUudGhldGErZypmLGo9YS5jeCt0aGlzLnJhZGl1cypNYXRoLmNvcyhpKSxrPWEuY3krdGhpcy5yYWRpdXMqTWF0aC5zaW4oaSk7cmV0dXJue3g6aix5Omt9fX0sQmV6aWVyOmZ1bmN0aW9uKGMpe3RoaXMuY3VydmU9W3t4OmMueDEseTpjLnkxfSx7eDpjLmNwMXgseTpjLmNwMXl9LHt4OmMuY3AyeCx5OmMuY3AyeX0se3g6Yy54Mix5OmMueTJ9XSxiLlNlZ21lbnRzLkFic3RyYWN0U2VnbWVudC5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy5ib3VuZHM9e21pblg6TWF0aC5taW4oYy54MSxjLngyLGMuY3AxeCxjLmNwMngpLG1pblk6TWF0aC5taW4oYy55MSxjLnkyLGMuY3AxeSxjLmNwMnkpLG1heFg6TWF0aC5tYXgoYy54MSxjLngyLGMuY3AxeCxjLmNwMngpLG1heFk6TWF0aC5tYXgoYy55MSxjLnkyLGMuY3AxeSxjLmNwMnkpfSx0aGlzLnR5cGU9XCJCZXppZXJcIjt2YXIgZD1mdW5jdGlvbihiLGMsZCl7cmV0dXJuIGQmJihjPWEuanNCZXppZXIubG9jYXRpb25BbG9uZ0N1cnZlRnJvbShiLGM+MD8wOjEsYykpLGN9O3RoaXMucG9pbnRPblBhdGg9ZnVuY3Rpb24oYixjKXtyZXR1cm4gYj1kKHRoaXMuY3VydmUsYixjKSxhLmpzQmV6aWVyLnBvaW50T25DdXJ2ZSh0aGlzLmN1cnZlLGIpfSx0aGlzLmdyYWRpZW50QXRQb2ludD1mdW5jdGlvbihiLGMpe3JldHVybiBiPWQodGhpcy5jdXJ2ZSxiLGMpLGEuanNCZXppZXIuZ3JhZGllbnRBdFBvaW50KHRoaXMuY3VydmUsYil9LHRoaXMucG9pbnRBbG9uZ1BhdGhGcm9tPWZ1bmN0aW9uKGIsYyxlKXtyZXR1cm4gYj1kKHRoaXMuY3VydmUsYixlKSxhLmpzQmV6aWVyLnBvaW50QWxvbmdDdXJ2ZUZyb20odGhpcy5jdXJ2ZSxiLGMpfSx0aGlzLmdldExlbmd0aD1mdW5jdGlvbigpe3JldHVybiBhLmpzQmV6aWVyLmdldExlbmd0aCh0aGlzLmN1cnZlKX0sdGhpcy5nZXRCb3VuZHM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ib3VuZHN9fX0sYi5TZWdtZW50UmVuZGVyZXI9e2dldFBhdGg6ZnVuY3Rpb24oYSl7cmV0dXJue1N0cmFpZ2h0OmZ1bmN0aW9uKCl7dmFyIGI9YS5nZXRDb29yZGluYXRlcygpO3JldHVyblwiTSBcIitiLngxK1wiIFwiK2IueTErXCIgTCBcIitiLngyK1wiIFwiK2IueTJ9LEJlemllcjpmdW5jdGlvbigpe3ZhciBiPWEucGFyYW1zO3JldHVyblwiTSBcIitiLngxK1wiIFwiK2IueTErXCIgQyBcIitiLmNwMXgrXCIgXCIrYi5jcDF5K1wiIFwiK2IuY3AyeCtcIiBcIitiLmNwMnkrXCIgXCIrYi54MitcIiBcIitiLnkyfSxBcmM6ZnVuY3Rpb24oKXt2YXIgYj1hLnBhcmFtcyxjPWEuc3dlZXA+TWF0aC5QST8xOjAsZD1hLmFudGljbG9ja3dpc2U/MDoxO3JldHVyblwiTVwiK2EueDErXCIgXCIrYS55MStcIiBBIFwiK2EucmFkaXVzK1wiIFwiK2IucitcIiAwIFwiK2MrXCIsXCIrZCtcIiBcIithLngyK1wiIFwiK2EueTJ9fVthLnR5cGVdKCl9fTt2YXIgZT1mdW5jdGlvbigpe3RoaXMucmVzZXRCb3VuZHM9ZnVuY3Rpb24oKXt0aGlzLmJvdW5kcz17bWluWDoxLzAsbWluWToxLzAsbWF4WDotMS8wLG1heFk6LTEvMH19LHRoaXMucmVzZXRCb3VuZHMoKX07Yi5Db25uZWN0b3JzLkFic3RyYWN0Q29ubmVjdG9yPWZ1bmN0aW9uKGEpe2UuYXBwbHkodGhpcyxhcmd1bWVudHMpO3ZhciBmPVtdLGc9MCxoPVtdLGk9W10saj1hLnN0dWJ8fDAsaz1jLmlzQXJyYXkoaik/alswXTpqLGw9Yy5pc0FycmF5KGopP2pbMV06aixtPWEuZ2FwfHwwLG49Yy5pc0FycmF5KG0pP21bMF06bSxvPWMuaXNBcnJheShtKT9tWzFdOm0scD1udWxsLHE9ITEscj1udWxsLHM9bnVsbCx0PWEuZWRpdGFibGUhPT0hMSYmbnVsbCE9Yi5Db25uZWN0b3JFZGl0b3JzJiZudWxsIT1iLkNvbm5lY3RvckVkaXRvcnNbdGhpcy50eXBlXSx1PXRoaXMuc2V0R2VvbWV0cnk9ZnVuY3Rpb24oYSxiKXtxPSFiLHM9YX0sdj10aGlzLmdldEdlb21ldHJ5PWZ1bmN0aW9uKCl7cmV0dXJuIHN9O3RoaXMuZ2V0UGF0aERhdGE9ZnVuY3Rpb24oKXtmb3IodmFyIGE9XCJcIixjPTA7YzxmLmxlbmd0aDtjKyspYSs9Yi5TZWdtZW50UmVuZGVyZXIuZ2V0UGF0aChmW2NdKSxhKz1cIiBcIjtyZXR1cm4gYX0sdGhpcy5oYXNCZWVuRWRpdGVkPWZ1bmN0aW9uKCl7cmV0dXJuIHF9LHRoaXMuaXNFZGl0aW5nPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPXRoaXMuZWRpdG9yJiZ0aGlzLmVkaXRvci5pc0FjdGl2ZSgpfSx0aGlzLnNldEVkaXRhYmxlPWZ1bmN0aW9uKGEpe3JldHVybiB0PWEmJm51bGwhPWIuQ29ubmVjdG9yRWRpdG9ycyYmbnVsbCE9Yi5Db25uZWN0b3JFZGl0b3JzW3RoaXMudHlwZV0mJihudWxsPT10aGlzLm92ZXJyaWRlU2V0RWRpdGFibGV8fHRoaXMub3ZlcnJpZGVTZXRFZGl0YWJsZSgpKT9hOiExfSx0aGlzLmlzRWRpdGFibGU9ZnVuY3Rpb24oKXtyZXR1cm4gdH0sdGhpcy5maW5kU2VnbWVudEZvclBvaW50PWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPXtkOjEvMCxzOm51bGwseDpudWxsLHk6bnVsbCxsOm51bGx9LGQ9MDtkPGYubGVuZ3RoO2QrKyl7dmFyIGU9ZltkXS5maW5kQ2xvc2VzdFBvaW50T25QYXRoKGEsYik7ZS5kPGMuZCYmKGMuZD1lLmQsYy5sPWUubCxjLng9ZS54LGMueT1lLnksYy5zPWZbZF0sYy54MT1lLngxLGMueDI9ZS54MixjLnkxPWUueTEsYy55Mj1lLnkyLGMuaW5kZXg9ZCl9cmV0dXJuIGN9O3ZhciB3PWZ1bmN0aW9uKCl7Zm9yKHZhciBhPTAsYj0wO2I8Zi5sZW5ndGg7YisrKXt2YXIgYz1mW2JdLmdldExlbmd0aCgpO2lbYl09Yy9nLGhbYl09W2EsYSs9Yy9nXX19LHg9ZnVuY3Rpb24oYSxiKXtiJiYoYT1hPjA/YS9nOihnK2EpL2cpO2Zvcih2YXIgYz1oLmxlbmd0aC0xLGQ9MSxlPTA7ZTxoLmxlbmd0aDtlKyspaWYoaFtlXVsxXT49YSl7Yz1lLGQ9MT09YT8xOjA9PT1hPzA6KGEtaFtlXVswXSkvaVtlXTticmVha31yZXR1cm57c2VnbWVudDpmW2NdLHByb3BvcnRpb246ZCxpbmRleDpjfX0seT1mdW5jdGlvbihhLGMsZCl7aWYoZC54MSE9ZC54Mnx8ZC55MSE9ZC55Mil7dmFyIGU9bmV3IGIuU2VnbWVudHNbY10oZCk7Zi5wdXNoKGUpLGcrPWUuZ2V0TGVuZ3RoKCksYS51cGRhdGVCb3VuZHMoZSl9fSx6PWZ1bmN0aW9uKCl7Zz1mLmxlbmd0aD1oLmxlbmd0aD1pLmxlbmd0aD0wfTt0aGlzLnNldFNlZ21lbnRzPWZ1bmN0aW9uKGEpe3A9W10sZz0wO2Zvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXAucHVzaChhW2JdKSxnKz1hW2JdLmdldExlbmd0aCgpfSx0aGlzLmdldExlbmd0aD1mdW5jdGlvbigpe3JldHVybiBnfTt2YXIgQT1mdW5jdGlvbihhKXt0aGlzLnN0cm9rZVdpZHRoPWEuc3Ryb2tlV2lkdGg7dmFyIGI9ZC5xdWFkcmFudChhLnNvdXJjZVBvcyxhLnRhcmdldFBvcyksYz1hLnRhcmdldFBvc1swXTxhLnNvdXJjZVBvc1swXSxlPWEudGFyZ2V0UG9zWzFdPGEuc291cmNlUG9zWzFdLGY9YS5zdHJva2VXaWR0aHx8MSxnPWEuc291cmNlRW5kcG9pbnQuYW5jaG9yLmdldE9yaWVudGF0aW9uKGEuc291cmNlRW5kcG9pbnQpLGg9YS50YXJnZXRFbmRwb2ludC5hbmNob3IuZ2V0T3JpZW50YXRpb24oYS50YXJnZXRFbmRwb2ludCksaT1jP2EudGFyZ2V0UG9zWzBdOmEuc291cmNlUG9zWzBdLGo9ZT9hLnRhcmdldFBvc1sxXTphLnNvdXJjZVBvc1sxXSxtPU1hdGguYWJzKGEudGFyZ2V0UG9zWzBdLWEuc291cmNlUG9zWzBdKSxwPU1hdGguYWJzKGEudGFyZ2V0UG9zWzFdLWEuc291cmNlUG9zWzFdKTtpZigwPT09Z1swXSYmMD09PWdbMV18fDA9PT1oWzBdJiYwPT09aFsxXSl7dmFyIHE9bT5wPzA6MSxyPVsxLDBdW3FdO2c9W10saD1bXSxnW3FdPWEuc291cmNlUG9zW3FdPmEudGFyZ2V0UG9zW3FdPy0xOjEsaFtxXT1hLnNvdXJjZVBvc1txXT5hLnRhcmdldFBvc1txXT8xOi0xLGdbcl09MCxoW3JdPTB9dmFyIHM9Yz9tK24qZ1swXTpuKmdbMF0sdD1lP3ArbipnWzFdOm4qZ1sxXSx1PWM/bypoWzBdOm0rbypoWzBdLHY9ZT9vKmhbMV06cCtvKmhbMV0sdz1nWzBdKmhbMF0rZ1sxXSpoWzFdLHg9e3N4OnMsc3k6dCx0eDp1LHR5OnYsbHc6Zix4U3BhbjpNYXRoLmFicyh1LXMpLHlTcGFuOk1hdGguYWJzKHYtdCksbXg6KHMrdSkvMixteToodCt2KS8yLHNvOmcsdG86aCx4OmkseTpqLHc6bSxoOnAsc2VnbWVudDpiLHN0YXJ0U3R1Ylg6cytnWzBdKmssc3RhcnRTdHViWTp0K2dbMV0qayxlbmRTdHViWDp1K2hbMF0qbCxlbmRTdHViWTp2K2hbMV0qbCxpc1hHcmVhdGVyVGhhblN0dWJUaW1lczI6TWF0aC5hYnMocy11KT5rK2wsaXNZR3JlYXRlclRoYW5TdHViVGltZXMyOk1hdGguYWJzKHQtdik+aytsLG9wcG9zaXRlOi0xPT13LHBlcnBlbmRpY3VsYXI6MD09PXcsb3J0aG9nb25hbDoxPT13LHNvdXJjZUF4aXM6MD09PWdbMF0/XCJ5XCI6XCJ4XCIscG9pbnRzOltpLGosbSxwLHMsdCx1LHZdfTtyZXR1cm4geC5hbmNob3JPcmllbnRhdGlvbj14Lm9wcG9zaXRlP1wib3Bwb3NpdGVcIjp4Lm9ydGhvZ29uYWw/XCJvcnRob2dvbmFsXCI6XCJwZXJwZW5kaWN1bGFyXCIseH07cmV0dXJuIHRoaXMuZ2V0U2VnbWVudHM9ZnVuY3Rpb24oKXtyZXR1cm4gZn0sdGhpcy51cGRhdGVCb3VuZHM9ZnVuY3Rpb24oYSl7dmFyIGI9YS5nZXRCb3VuZHMoKTt0aGlzLmJvdW5kcy5taW5YPU1hdGgubWluKHRoaXMuYm91bmRzLm1pblgsYi5taW5YKSx0aGlzLmJvdW5kcy5tYXhYPU1hdGgubWF4KHRoaXMuYm91bmRzLm1heFgsYi5tYXhYKSx0aGlzLmJvdW5kcy5taW5ZPU1hdGgubWluKHRoaXMuYm91bmRzLm1pblksYi5taW5ZKSx0aGlzLmJvdW5kcy5tYXhZPU1hdGgubWF4KHRoaXMuYm91bmRzLm1heFksYi5tYXhZKX0sdGhpcy5wb2ludE9uUGF0aD1mdW5jdGlvbihhLGIpe3ZhciBjPXgoYSxiKTtyZXR1cm4gYy5zZWdtZW50JiZjLnNlZ21lbnQucG9pbnRPblBhdGgoYy5wcm9wb3J0aW9uLCExKXx8WzAsMF19LHRoaXMuZ3JhZGllbnRBdFBvaW50PWZ1bmN0aW9uKGEsYil7dmFyIGM9eChhLGIpO3JldHVybiBjLnNlZ21lbnQmJmMuc2VnbWVudC5ncmFkaWVudEF0UG9pbnQoYy5wcm9wb3J0aW9uLCExKXx8MH0sdGhpcy5wb2ludEFsb25nUGF0aEZyb209ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXgoYSxjKTtyZXR1cm4gZC5zZWdtZW50JiZkLnNlZ21lbnQucG9pbnRBbG9uZ1BhdGhGcm9tKGQucHJvcG9ydGlvbixiLCExKXx8WzAsMF19LHRoaXMuY29tcHV0ZT1mdW5jdGlvbihhKXtyPUEuY2FsbCh0aGlzLGEpLHooKSx0aGlzLl9jb21wdXRlKHIsYSksdGhpcy54PXIucG9pbnRzWzBdLHRoaXMueT1yLnBvaW50c1sxXSx0aGlzLnc9ci5wb2ludHNbMl0sdGhpcy5oPXIucG9pbnRzWzNdLHRoaXMuc2VnbWVudD1yLnNlZ21lbnQsdygpfSx7YWRkU2VnbWVudDp5LHByZXBhcmVDb21wdXRlOkEsc291cmNlU3R1YjprLHRhcmdldFN0dWI6bCxtYXhTdHViOk1hdGgubWF4KGssbCksc291cmNlR2FwOm4sdGFyZ2V0R2FwOm8sbWF4R2FwOk1hdGgubWF4KG4sbyksc2V0R2VvbWV0cnk6dSxnZXRHZW9tZXRyeTp2fX0sYy5leHRlbmQoYi5Db25uZWN0b3JzLkFic3RyYWN0Q29ubmVjdG9yLGUpLGIuRW5kcG9pbnRzLkFic3RyYWN0RW5kcG9pbnQ9ZnVuY3Rpb24oYSl7ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dmFyIGI9dGhpcy5jb21wdXRlPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fY29tcHV0ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIHRoaXMueD1hWzBdLHRoaXMueT1hWzFdLHRoaXMudz1hWzJdLHRoaXMuaD1hWzNdLHRoaXMuYm91bmRzLm1pblg9dGhpcy54LHRoaXMuYm91bmRzLm1pblk9dGhpcy55LHRoaXMuYm91bmRzLm1heFg9dGhpcy54K3RoaXMudyx0aGlzLmJvdW5kcy5tYXhZPXRoaXMueSt0aGlzLmgsYX07cmV0dXJue2NvbXB1dGU6Yixjc3NDbGFzczphLmNzc0NsYXNzfX0sYy5leHRlbmQoYi5FbmRwb2ludHMuQWJzdHJhY3RFbmRwb2ludCxlKSxiLkVuZHBvaW50cy5Eb3Q9ZnVuY3Rpb24oYSl7dGhpcy50eXBlPVwiRG90XCIsYi5FbmRwb2ludHMuQWJzdHJhY3RFbmRwb2ludC5hcHBseSh0aGlzLGFyZ3VtZW50cyksYT1hfHx7fSx0aGlzLnJhZGl1cz1hLnJhZGl1c3x8MTAsdGhpcy5kZWZhdWx0T2Zmc2V0PS41KnRoaXMucmFkaXVzLHRoaXMuZGVmYXVsdElubmVyUmFkaXVzPXRoaXMucmFkaXVzLzMsdGhpcy5fY29tcHV0ZT1mdW5jdGlvbihhLGIsYyl7dGhpcy5yYWRpdXM9Yy5yYWRpdXN8fHRoaXMucmFkaXVzO3ZhciBkPWFbMF0tdGhpcy5yYWRpdXMsZT1hWzFdLXRoaXMucmFkaXVzLGY9Mip0aGlzLnJhZGl1cyxnPTIqdGhpcy5yYWRpdXM7aWYoYy5zdHJva2Upe3ZhciBoPWMuc3Ryb2tlV2lkdGh8fDE7ZC09aCxlLT1oLGYrPTIqaCxnKz0yKmh9cmV0dXJuW2QsZSxmLGcsdGhpcy5yYWRpdXNdfX0sYy5leHRlbmQoYi5FbmRwb2ludHMuRG90LGIuRW5kcG9pbnRzLkFic3RyYWN0RW5kcG9pbnQpLGIuRW5kcG9pbnRzLlJlY3RhbmdsZT1mdW5jdGlvbihhKXt0aGlzLnR5cGU9XCJSZWN0YW5nbGVcIixiLkVuZHBvaW50cy5BYnN0cmFjdEVuZHBvaW50LmFwcGx5KHRoaXMsYXJndW1lbnRzKSxhPWF8fHt9LHRoaXMud2lkdGg9YS53aWR0aHx8MjAsdGhpcy5oZWlnaHQ9YS5oZWlnaHR8fDIwLHRoaXMuX2NvbXB1dGU9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWMud2lkdGh8fHRoaXMud2lkdGgsZT1jLmhlaWdodHx8dGhpcy5oZWlnaHQsZj1hWzBdLWQvMixnPWFbMV0tZS8yO3JldHVybltmLGcsZCxlXX19LGMuZXh0ZW5kKGIuRW5kcG9pbnRzLlJlY3RhbmdsZSxiLkVuZHBvaW50cy5BYnN0cmFjdEVuZHBvaW50KTt2YXIgZj1mdW5jdGlvbigpe2IuanNQbHVtYlVJQ29tcG9uZW50LmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLl9qc1BsdW1iLmRpc3BsYXlFbGVtZW50cz1bXX07Yy5leHRlbmQoZixiLmpzUGx1bWJVSUNvbXBvbmVudCx7Z2V0RGlzcGxheUVsZW1lbnRzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2pzUGx1bWIuZGlzcGxheUVsZW1lbnRzfSxhcHBlbmREaXNwbGF5RWxlbWVudDpmdW5jdGlvbihhKXt0aGlzLl9qc1BsdW1iLmRpc3BsYXlFbGVtZW50cy5wdXNoKGEpfX0pLGIuRW5kcG9pbnRzLkltYWdlPWZ1bmN0aW9uKGQpe3RoaXMudHlwZT1cIkltYWdlXCIsZi5hcHBseSh0aGlzLGFyZ3VtZW50cyksYi5FbmRwb2ludHMuQWJzdHJhY3RFbmRwb2ludC5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dmFyIGU9ZC5vbmxvYWQsZz1kLnNyY3x8ZC51cmwsaD1kLmNzc0NsYXNzP1wiIFwiK2QuY3NzQ2xhc3M6XCJcIjt0aGlzLl9qc1BsdW1iLmltZz1uZXcgSW1hZ2UsdGhpcy5fanNQbHVtYi5yZWFkeT0hMSx0aGlzLl9qc1BsdW1iLmluaXRpYWxpemVkPSExLHRoaXMuX2pzUGx1bWIuZGVsZXRlZD0hMSx0aGlzLl9qc1BsdW1iLndpZHRoVG9Vc2U9ZC53aWR0aCx0aGlzLl9qc1BsdW1iLmhlaWdodFRvVXNlPWQuaGVpZ2h0LHRoaXMuX2pzUGx1bWIuZW5kcG9pbnQ9ZC5lbmRwb2ludCx0aGlzLl9qc1BsdW1iLmltZy5vbmxvYWQ9ZnVuY3Rpb24oKXtudWxsIT10aGlzLl9qc1BsdW1iJiYodGhpcy5fanNQbHVtYi5yZWFkeT0hMCx0aGlzLl9qc1BsdW1iLndpZHRoVG9Vc2U9dGhpcy5fanNQbHVtYi53aWR0aFRvVXNlfHx0aGlzLl9qc1BsdW1iLmltZy53aWR0aCx0aGlzLl9qc1BsdW1iLmhlaWdodFRvVXNlPXRoaXMuX2pzUGx1bWIuaGVpZ2h0VG9Vc2V8fHRoaXMuX2pzUGx1bWIuaW1nLmhlaWdodCxlJiZlKHRoaXMpKX0uYmluZCh0aGlzKSx0aGlzLl9qc1BsdW1iLmVuZHBvaW50LnNldEltYWdlPWZ1bmN0aW9uKGEsYil7dmFyIGM9YS5jb25zdHJ1Y3Rvcj09U3RyaW5nP2E6YS5zcmM7ZT1iLHRoaXMuX2pzUGx1bWIuaW1nLnNyYz1jLG51bGwhPXRoaXMuY2FudmFzJiZ0aGlzLmNhbnZhcy5zZXRBdHRyaWJ1dGUoXCJzcmNcIix0aGlzLl9qc1BsdW1iLmltZy5zcmMpfS5iaW5kKHRoaXMpLHRoaXMuX2pzUGx1bWIuZW5kcG9pbnQuc2V0SW1hZ2UoZyxlKSx0aGlzLl9jb21wdXRlPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmFuY2hvclBvaW50PWEsdGhpcy5fanNQbHVtYi5yZWFkeT9bYVswXS10aGlzLl9qc1BsdW1iLndpZHRoVG9Vc2UvMixhWzFdLXRoaXMuX2pzUGx1bWIuaGVpZ2h0VG9Vc2UvMix0aGlzLl9qc1BsdW1iLndpZHRoVG9Vc2UsdGhpcy5fanNQbHVtYi5oZWlnaHRUb1VzZV06WzAsMCwwLDBdfSx0aGlzLmNhbnZhcz1iLmNyZWF0ZUVsZW1lbnQoXCJpbWdcIix7cG9zaXRpb246XCJhYnNvbHV0ZVwiLG1hcmdpbjowLHBhZGRpbmc6MCxvdXRsaW5lOjB9LHRoaXMuX2pzUGx1bWIuaW5zdGFuY2UuZW5kcG9pbnRDbGFzcytoKSx0aGlzLl9qc1BsdW1iLndpZHRoVG9Vc2UmJnRoaXMuY2FudmFzLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsdGhpcy5fanNQbHVtYi53aWR0aFRvVXNlKSx0aGlzLl9qc1BsdW1iLmhlaWdodFRvVXNlJiZ0aGlzLmNhbnZhcy5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIix0aGlzLl9qc1BsdW1iLmhlaWdodFRvVXNlKSx0aGlzLl9qc1BsdW1iLmluc3RhbmNlLmFwcGVuZEVsZW1lbnQodGhpcy5jYW52YXMpLHRoaXMuYWN0dWFsbHlQYWludD1mdW5jdGlvbigpe2lmKCF0aGlzLl9qc1BsdW1iLmRlbGV0ZWQpe3RoaXMuX2pzUGx1bWIuaW5pdGlhbGl6ZWR8fCh0aGlzLmNhbnZhcy5zZXRBdHRyaWJ1dGUoXCJzcmNcIix0aGlzLl9qc1BsdW1iLmltZy5zcmMpLHRoaXMuYXBwZW5kRGlzcGxheUVsZW1lbnQodGhpcy5jYW52YXMpLHRoaXMuX2pzUGx1bWIuaW5pdGlhbGl6ZWQ9ITApO3ZhciBhPXRoaXMuYW5jaG9yUG9pbnRbMF0tdGhpcy5fanNQbHVtYi53aWR0aFRvVXNlLzIsYj10aGlzLmFuY2hvclBvaW50WzFdLXRoaXMuX2pzUGx1bWIuaGVpZ2h0VG9Vc2UvMjtjLnNpemVFbGVtZW50KHRoaXMuY2FudmFzLGEsYix0aGlzLl9qc1BsdW1iLndpZHRoVG9Vc2UsdGhpcy5fanNQbHVtYi5oZWlnaHRUb1VzZSl9fSx0aGlzLnBhaW50PWZ1bmN0aW9uKGIsYyl7bnVsbCE9dGhpcy5fanNQbHVtYiYmKHRoaXMuX2pzUGx1bWIucmVhZHk/dGhpcy5hY3R1YWxseVBhaW50KGIsYyk6YS5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhpcy5wYWludChiLGMpfS5iaW5kKHRoaXMpLDIwMCkpfX0sYy5leHRlbmQoYi5FbmRwb2ludHMuSW1hZ2UsW2YsYi5FbmRwb2ludHMuQWJzdHJhY3RFbmRwb2ludF0se2NsZWFudXA6ZnVuY3Rpb24oYSl7YSYmKHRoaXMuX2pzUGx1bWIuZGVsZXRlZD0hMCx0aGlzLmNhbnZhcyYmdGhpcy5jYW52YXMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmNhbnZhcyksdGhpcy5jYW52YXM9bnVsbCl9fSksYi5FbmRwb2ludHMuQmxhbms9ZnVuY3Rpb24oYSl7Yi5FbmRwb2ludHMuQWJzdHJhY3RFbmRwb2ludC5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy50eXBlPVwiQmxhbmtcIixmLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLl9jb21wdXRlPWZ1bmN0aW9uKGEpe3JldHVyblthWzBdLGFbMV0sMTAsMF19O3ZhciBkPWEuY3NzQ2xhc3M/XCIgXCIrYS5jc3NDbGFzczpcIlwiO3RoaXMuY2FudmFzPWIuY3JlYXRlRWxlbWVudChcImRpdlwiLHtkaXNwbGF5OlwiYmxvY2tcIix3aWR0aDpcIjFweFwiLGhlaWdodDpcIjFweFwiLGJhY2tncm91bmQ6XCJ0cmFuc3BhcmVudFwiLHBvc2l0aW9uOlwiYWJzb2x1dGVcIn0sdGhpcy5fanNQbHVtYi5pbnN0YW5jZS5lbmRwb2ludENsYXNzK2QpLHRoaXMuX2pzUGx1bWIuaW5zdGFuY2UuYXBwZW5kRWxlbWVudCh0aGlzLmNhbnZhcyksdGhpcy5wYWludD1mdW5jdGlvbigpe2Muc2l6ZUVsZW1lbnQodGhpcy5jYW52YXMsdGhpcy54LHRoaXMueSx0aGlzLncsdGhpcy5oKX19LGMuZXh0ZW5kKGIuRW5kcG9pbnRzLkJsYW5rLFtiLkVuZHBvaW50cy5BYnN0cmFjdEVuZHBvaW50LGZdLHtjbGVhbnVwOmZ1bmN0aW9uKCl7dGhpcy5jYW52YXMmJnRoaXMuY2FudmFzLnBhcmVudE5vZGUmJnRoaXMuY2FudmFzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5jYW52YXMpfX0pLGIuRW5kcG9pbnRzLlRyaWFuZ2xlPWZ1bmN0aW9uKGEpe3RoaXMudHlwZT1cIlRyaWFuZ2xlXCIsYi5FbmRwb2ludHMuQWJzdHJhY3RFbmRwb2ludC5hcHBseSh0aGlzLGFyZ3VtZW50cyksYT1hfHx7fSxhLndpZHRoPWEud2lkdGh8fDU1LGEuaGVpZ2h0PWEuaGVpZ2h0fHw1NSx0aGlzLndpZHRoPWEud2lkdGgsdGhpcy5oZWlnaHQ9YS5oZWlnaHQsdGhpcy5fY29tcHV0ZT1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yy53aWR0aHx8c2VsZi53aWR0aCxlPWMuaGVpZ2h0fHxzZWxmLmhlaWdodCxmPWFbMF0tZC8yLGc9YVsxXS1lLzI7cmV0dXJuW2YsZyxkLGVdfX07dmFyIGc9Yi5PdmVybGF5cy5BYnN0cmFjdE92ZXJsYXk9ZnVuY3Rpb24oYSl7dGhpcy52aXNpYmxlPSEwLHRoaXMuaXNBcHBlbmRlZEF0VG9wTGV2ZWw9ITAsdGhpcy5jb21wb25lbnQ9YS5jb21wb25lbnQsdGhpcy5sb2M9bnVsbD09YS5sb2NhdGlvbj8uNTphLmxvY2F0aW9uLHRoaXMuZW5kcG9pbnRMb2M9bnVsbD09YS5lbmRwb2ludExvY2F0aW9uP1suNSwuNV06YS5lbmRwb2ludExvY2F0aW9uLHRoaXMudmlzaWJsZT1hLnZpc2libGUhPT0hMX07Zy5wcm90b3R5cGU9e2NsZWFudXA6ZnVuY3Rpb24oYSl7YSYmKHRoaXMuY29tcG9uZW50PW51bGwsdGhpcy5jYW52YXM9bnVsbCx0aGlzLmVuZHBvaW50TG9jPW51bGwpfSxyZWF0dGFjaDpmdW5jdGlvbigpe30sc2V0VmlzaWJsZTpmdW5jdGlvbihhKXt0aGlzLnZpc2libGU9YSx0aGlzLmNvbXBvbmVudC5yZXBhaW50KCl9LGlzVmlzaWJsZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZpc2libGV9LGhpZGU6ZnVuY3Rpb24oKXt0aGlzLnNldFZpc2libGUoITEpfSxzaG93OmZ1bmN0aW9uKCl7dGhpcy5zZXRWaXNpYmxlKCEwKX0saW5jcmVtZW50TG9jYXRpb246ZnVuY3Rpb24oYSl7dGhpcy5sb2MrPWEsdGhpcy5jb21wb25lbnQucmVwYWludCgpfSxzZXRMb2NhdGlvbjpmdW5jdGlvbihhKXt0aGlzLmxvYz1hLHRoaXMuY29tcG9uZW50LnJlcGFpbnQoKX0sZ2V0TG9jYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sb2N9LHVwZGF0ZUZyb206ZnVuY3Rpb24oKXt9fSxiLk92ZXJsYXlzLkFycm93PWZ1bmN0aW9uKGEpe3RoaXMudHlwZT1cIkFycm93XCIsZy5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy5pc0FwcGVuZGVkQXRUb3BMZXZlbD0hMSxhPWF8fHt9LHRoaXMubGVuZ3RoPWEubGVuZ3RofHwyMCx0aGlzLndpZHRoPWEud2lkdGh8fDIwLHRoaXMuaWQ9YS5pZDt2YXIgZT0oYS5kaXJlY3Rpb258fDEpPDA/LTE6MSxmPWEucGFpbnRTdHlsZXx8e1wic3Ryb2tlLXdpZHRoXCI6MX0saD1hLmZvbGRiYWNrfHwuNjIzO3RoaXMuY29tcHV0ZU1heFNpemU9ZnVuY3Rpb24oKXtyZXR1cm4gMS41KnNlbGYud2lkdGh9LHRoaXMuZWxlbWVudENyZWF0ZWQ9ZnVuY3Rpb24oYyl7aWYodGhpcy5wYXRoPWMsYS5ldmVudHMpZm9yKHZhciBkIGluIGEuZXZlbnRzKWIub24oYyxkLGEuZXZlbnRzW2RdKX0sdGhpcy5kcmF3PWZ1bmN0aW9uKGEsYil7dmFyIGcsaSxqLGssbDtpZihhLnBvaW50QWxvbmdQYXRoRnJvbSl7aWYoYy5pc1N0cmluZyh0aGlzLmxvYyl8fHRoaXMubG9jPjF8fHRoaXMubG9jPDApe3ZhciBtPXBhcnNlSW50KHRoaXMubG9jLDEwKSxuPXRoaXMubG9jPDA/MTowO2c9YS5wb2ludEFsb25nUGF0aEZyb20obixtLCExKSxpPWEucG9pbnRBbG9uZ1BhdGhGcm9tKG4sbS1lKnRoaXMubGVuZ3RoLzIsITEpLGo9ZC5wb2ludE9uTGluZShnLGksdGhpcy5sZW5ndGgpfWVsc2UgaWYoMT09dGhpcy5sb2Mpe2lmKGc9YS5wb2ludE9uUGF0aCh0aGlzLmxvYyksaT1hLnBvaW50QWxvbmdQYXRoRnJvbSh0aGlzLmxvYywtdGhpcy5sZW5ndGgpLGo9ZC5wb2ludE9uTGluZShnLGksdGhpcy5sZW5ndGgpLC0xPT1lKXt2YXIgbz1qO2o9ZyxnPW99fWVsc2UgaWYoMD09PXRoaXMubG9jKXtpZihqPWEucG9pbnRPblBhdGgodGhpcy5sb2MpLGk9YS5wb2ludEFsb25nUGF0aEZyb20odGhpcy5sb2MsdGhpcy5sZW5ndGgpLGc9ZC5wb2ludE9uTGluZShqLGksdGhpcy5sZW5ndGgpLC0xPT1lKXt2YXIgcD1qO2o9ZyxnPXB9fWVsc2UgZz1hLnBvaW50QWxvbmdQYXRoRnJvbSh0aGlzLmxvYyxlKnRoaXMubGVuZ3RoLzIpLGk9YS5wb2ludE9uUGF0aCh0aGlzLmxvYyksaj1kLnBvaW50T25MaW5lKGcsaSx0aGlzLmxlbmd0aCk7az1kLnBlcnBlbmRpY3VsYXJMaW5lVG8oZyxqLHRoaXMud2lkdGgpLGw9ZC5wb2ludE9uTGluZShnLGosaCp0aGlzLmxlbmd0aCk7dmFyIHE9e2h4eTpnLHRhaWw6ayxjeHk6bH0scj1mLnN0cm9rZXx8Yi5zdHJva2Uscz1mLmZpbGx8fGIuc3Ryb2tlLHQ9Zi5zdHJva2VXaWR0aHx8Yi5zdHJva2VXaWR0aDtyZXR1cm57Y29tcG9uZW50OmEsZDpxLFwic3Ryb2tlLXdpZHRoXCI6dCxzdHJva2U6cixmaWxsOnMsbWluWDpNYXRoLm1pbihnLngsa1swXS54LGtbMV0ueCksbWF4WDpNYXRoLm1heChnLngsa1swXS54LGtbMV0ueCksbWluWTpNYXRoLm1pbihnLnksa1swXS55LGtbMV0ueSksbWF4WTpNYXRoLm1heChnLnksa1swXS55LGtbMV0ueSl9fXJldHVybntjb21wb25lbnQ6YSxtaW5YOjAsbWF4WDowLG1pblk6MCxtYXhZOjB9fX0sYy5leHRlbmQoYi5PdmVybGF5cy5BcnJvdyxnLHt1cGRhdGVGcm9tOmZ1bmN0aW9uKGEpe3RoaXMubGVuZ3RoPWEubGVuZ3RofHx0aGlzLmxlbmd0aCx0aGlzLndpZHRoPWEud2lkdGh8fHRoaXMud2lkdGgsdGhpcy5kaXJlY3Rpb249bnVsbCE9YS5kaXJlY3Rpb24/YS5kaXJlY3Rpb246dGhpcy5kaXJlY3Rpb24sdGhpcy5mb2xkYmFjaz1hLmZvbGRiYWNrfHx0aGlzLmZvbGRiYWNrfX0pLGIuT3ZlcmxheXMuUGxhaW5BcnJvdz1mdW5jdGlvbihhKXthPWF8fHt9O3ZhciBjPWIuZXh0ZW5kKGEse2ZvbGRiYWNrOjF9KTtiLk92ZXJsYXlzLkFycm93LmNhbGwodGhpcyxjKSx0aGlzLnR5cGU9XCJQbGFpbkFycm93XCJ9LGMuZXh0ZW5kKGIuT3ZlcmxheXMuUGxhaW5BcnJvdyxiLk92ZXJsYXlzLkFycm93KSxiLk92ZXJsYXlzLkRpYW1vbmQ9ZnVuY3Rpb24oYSl7YT1hfHx7fTt2YXIgYz1hLmxlbmd0aHx8NDAsZD1iLmV4dGVuZChhLHtsZW5ndGg6Yy8yLGZvbGRiYWNrOjJ9KTtiLk92ZXJsYXlzLkFycm93LmNhbGwodGhpcyxkKSx0aGlzLnR5cGU9XCJEaWFtb25kXCJ9LGMuZXh0ZW5kKGIuT3ZlcmxheXMuRGlhbW9uZCxiLk92ZXJsYXlzLkFycm93KTt2YXIgaD1mdW5jdGlvbihhLGIpe3JldHVybihudWxsPT1hLl9qc1BsdW1iLmNhY2hlZERpbWVuc2lvbnN8fGIpJiYoYS5fanNQbHVtYi5jYWNoZWREaW1lbnNpb25zPWEuZ2V0RGltZW5zaW9ucygpKSxhLl9qc1BsdW1iLmNhY2hlZERpbWVuc2lvbnN9LGk9ZnVuY3Rpb24oYSl7Yi5qc1BsdW1iVUlDb21wb25lbnQuYXBwbHkodGhpcyxhcmd1bWVudHMpLGcuYXBwbHkodGhpcyxhcmd1bWVudHMpO1xudmFyIGQ9dGhpcy5maXJlO3RoaXMuZmlyZT1mdW5jdGlvbigpe2QuYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMuY29tcG9uZW50JiZ0aGlzLmNvbXBvbmVudC5maXJlLmFwcGx5KHRoaXMuY29tcG9uZW50LGFyZ3VtZW50cyl9LHRoaXMuZGV0YWNoZWQ9ITEsdGhpcy5pZD1hLmlkLHRoaXMuX2pzUGx1bWIuZGl2PW51bGwsdGhpcy5fanNQbHVtYi5pbml0aWFsaXNlZD0hMSx0aGlzLl9qc1BsdW1iLmNvbXBvbmVudD1hLmNvbXBvbmVudCx0aGlzLl9qc1BsdW1iLmNhY2hlZERpbWVuc2lvbnM9bnVsbCx0aGlzLl9qc1BsdW1iLmNyZWF0ZT1hLmNyZWF0ZSx0aGlzLl9qc1BsdW1iLmluaXRpYWxseUludmlzaWJsZT1hLnZpc2libGU9PT0hMSx0aGlzLmdldEVsZW1lbnQ9ZnVuY3Rpb24oKXtpZihudWxsPT10aGlzLl9qc1BsdW1iLmRpdil7dmFyIGM9dGhpcy5fanNQbHVtYi5kaXY9Yi5nZXRFbGVtZW50KHRoaXMuX2pzUGx1bWIuY3JlYXRlKHRoaXMuX2pzUGx1bWIuY29tcG9uZW50KSk7Yy5zdHlsZS5wb3NpdGlvbj1cImFic29sdXRlXCIsYy5jbGFzc05hbWU9dGhpcy5fanNQbHVtYi5pbnN0YW5jZS5vdmVybGF5Q2xhc3MrXCIgXCIrKHRoaXMuY3NzQ2xhc3M/dGhpcy5jc3NDbGFzczphLmNzc0NsYXNzP2EuY3NzQ2xhc3M6XCJcIiksdGhpcy5fanNQbHVtYi5pbnN0YW5jZS5hcHBlbmRFbGVtZW50KGMpLHRoaXMuX2pzUGx1bWIuaW5zdGFuY2UuZ2V0SWQoYyksdGhpcy5jYW52YXM9Yzt2YXIgZD1cInRyYW5zbGF0ZSgtNTAlLCAtNTAlKVwiO2Muc3R5bGUud2Via2l0VHJhbnNmb3JtPWQsYy5zdHlsZS5tb3pUcmFuc2Zvcm09ZCxjLnN0eWxlLm1zVHJhbnNmb3JtPWQsYy5zdHlsZS5vVHJhbnNmb3JtPWQsYy5zdHlsZS50cmFuc2Zvcm09ZCxjLl9qc1BsdW1iPXRoaXMsYS52aXNpYmxlPT09ITEmJihjLnN0eWxlLmRpc3BsYXk9XCJub25lXCIpfXJldHVybiB0aGlzLl9qc1BsdW1iLmRpdn0sdGhpcy5kcmF3PWZ1bmN0aW9uKGEsYixkKXt2YXIgZT1oKHRoaXMpO2lmKG51bGwhPWUmJjI9PWUubGVuZ3RoKXt2YXIgZj17eDowLHk6MH07aWYoZClmPXt4OmRbMF0seTpkWzFdfTtlbHNlIGlmKGEucG9pbnRPblBhdGgpe3ZhciBnPXRoaXMubG9jLGk9ITE7KGMuaXNTdHJpbmcodGhpcy5sb2MpfHx0aGlzLmxvYzwwfHx0aGlzLmxvYz4xKSYmKGc9cGFyc2VJbnQodGhpcy5sb2MsMTApLGk9ITApLGY9YS5wb2ludE9uUGF0aChnLGkpfWVsc2V7dmFyIGo9dGhpcy5sb2MuY29uc3RydWN0b3I9PUFycmF5P3RoaXMubG9jOnRoaXMuZW5kcG9pbnRMb2M7Zj17eDpqWzBdKmEudyx5OmpbMV0qYS5ofX12YXIgaz1mLngtZVswXS8yLGw9Zi55LWVbMV0vMjtyZXR1cm57Y29tcG9uZW50OmEsZDp7bWlueDprLG1pbnk6bCx0ZDplLGN4eTpmfSxtaW5YOmssbWF4WDprK2VbMF0sbWluWTpsLG1heFk6bCtlWzFdfX1yZXR1cm57bWluWDowLG1heFg6MCxtaW5ZOjAsbWF4WTowfX19O2MuZXh0ZW5kKGksW2IuanNQbHVtYlVJQ29tcG9uZW50LGddLHtnZXREaW1lbnNpb25zOmZ1bmN0aW9uKCl7cmV0dXJuWzEsMV19LHNldFZpc2libGU6ZnVuY3Rpb24oYSl7dGhpcy5fanNQbHVtYi5kaXYmJih0aGlzLl9qc1BsdW1iLmRpdi5zdHlsZS5kaXNwbGF5PWE/XCJibG9ja1wiOlwibm9uZVwiLGEmJnRoaXMuX2pzUGx1bWIuaW5pdGlhbGx5SW52aXNpYmxlJiYoaCh0aGlzLCEwKSx0aGlzLmNvbXBvbmVudC5yZXBhaW50KCksdGhpcy5fanNQbHVtYi5pbml0aWFsbHlJbnZpc2libGU9ITEpKX0sY2xlYXJDYWNoZWREaW1lbnNpb25zOmZ1bmN0aW9uKCl7dGhpcy5fanNQbHVtYi5jYWNoZWREaW1lbnNpb25zPW51bGx9LGNsZWFudXA6ZnVuY3Rpb24oYSl7YT9udWxsIT10aGlzLl9qc1BsdW1iLmRpdiYmKHRoaXMuX2pzUGx1bWIuZGl2Ll9qc1BsdW1iPW51bGwsdGhpcy5fanNQbHVtYi5pbnN0YW5jZS5yZW1vdmVFbGVtZW50KHRoaXMuX2pzUGx1bWIuZGl2KSk6KHRoaXMuX2pzUGx1bWImJnRoaXMuX2pzUGx1bWIuZGl2JiZ0aGlzLl9qc1BsdW1iLmRpdi5wYXJlbnROb2RlJiZ0aGlzLl9qc1BsdW1iLmRpdi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuX2pzUGx1bWIuZGl2KSx0aGlzLmRldGFjaGVkPSEwKX0scmVhdHRhY2g6ZnVuY3Rpb24oYSl7bnVsbCE9dGhpcy5fanNQbHVtYi5kaXYmJmEuZ2V0Q29udGFpbmVyKCkuYXBwZW5kQ2hpbGQodGhpcy5fanNQbHVtYi5kaXYpLHRoaXMuZGV0YWNoZWQ9ITF9LGNvbXB1dGVNYXhTaXplOmZ1bmN0aW9uKCl7dmFyIGE9aCh0aGlzKTtyZXR1cm4gTWF0aC5tYXgoYVswXSxhWzFdKX0scGFpbnQ6ZnVuY3Rpb24oYSl7dGhpcy5fanNQbHVtYi5pbml0aWFsaXNlZHx8KHRoaXMuZ2V0RWxlbWVudCgpLGEuY29tcG9uZW50LmFwcGVuZERpc3BsYXlFbGVtZW50KHRoaXMuX2pzUGx1bWIuZGl2KSx0aGlzLl9qc1BsdW1iLmluaXRpYWxpc2VkPSEwLHRoaXMuZGV0YWNoZWQmJnRoaXMuX2pzUGx1bWIuZGl2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5fanNQbHVtYi5kaXYpKSx0aGlzLl9qc1BsdW1iLmRpdi5zdHlsZS5sZWZ0PWEuY29tcG9uZW50LngrYS5kLm1pbngrXCJweFwiLHRoaXMuX2pzUGx1bWIuZGl2LnN0eWxlLnRvcD1hLmNvbXBvbmVudC55K2EuZC5taW55K1wicHhcIn19KSxiLk92ZXJsYXlzLkN1c3RvbT1mdW5jdGlvbigpe3RoaXMudHlwZT1cIkN1c3RvbVwiLGkuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxjLmV4dGVuZChiLk92ZXJsYXlzLkN1c3RvbSxpKSxiLk92ZXJsYXlzLkd1aWRlTGluZXM9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO2EubGVuZ3RoPTUwLGEuc3Ryb2tlV2lkdGg9NSx0aGlzLnR5cGU9XCJHdWlkZUxpbmVzXCIsZy5hcHBseSh0aGlzLGFyZ3VtZW50cyksYi5qc1BsdW1iVUlDb21wb25lbnQuYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMuZHJhdz1mdW5jdGlvbihiKXt2YXIgYz1iLnBvaW50QWxvbmdQYXRoRnJvbShhLmxvYyxhLmxlbmd0aC8yKSxlPWIucG9pbnRPblBhdGgoYS5sb2MpLGY9ZC5wb2ludE9uTGluZShjLGUsYS5sZW5ndGgpLGc9ZC5wZXJwZW5kaWN1bGFyTGluZVRvKGMsZiw0MCksaD1kLnBlcnBlbmRpY3VsYXJMaW5lVG8oZixjLDIwKTtyZXR1cm57Y29ubmVjdG9yOmIsaGVhZDpjLHRhaWw6ZixoZWFkTGluZTpoLHRhaWxMaW5lOmcsbWluWDpNYXRoLm1pbihjLngsZi54LGhbMF0ueCxoWzFdLngpLG1pblk6TWF0aC5taW4oYy55LGYueSxoWzBdLnksaFsxXS55KSxtYXhYOk1hdGgubWF4KGMueCxmLngsaFswXS54LGhbMV0ueCksbWF4WTpNYXRoLm1heChjLnksZi55LGhbMF0ueSxoWzFdLnkpfX19LGIuT3ZlcmxheXMuTGFiZWw9ZnVuY3Rpb24oYSl7dGhpcy5sYWJlbFN0eWxlPWEubGFiZWxTdHlsZSx0aGlzLmNzc0NsYXNzPW51bGwhPXRoaXMubGFiZWxTdHlsZT90aGlzLmxhYmVsU3R5bGUuY3NzQ2xhc3M6bnVsbDt2YXIgYz1iLmV4dGVuZCh7Y3JlYXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGIuY3JlYXRlRWxlbWVudChcImRpdlwiKX19LGEpO2lmKGIuT3ZlcmxheXMuQ3VzdG9tLmNhbGwodGhpcyxjKSx0aGlzLnR5cGU9XCJMYWJlbFwiLHRoaXMubGFiZWw9YS5sYWJlbHx8XCJcIix0aGlzLmxhYmVsVGV4dD1udWxsLHRoaXMubGFiZWxTdHlsZSl7dmFyIGQ9dGhpcy5nZXRFbGVtZW50KCk7aWYodGhpcy5sYWJlbFN0eWxlLmZvbnQ9dGhpcy5sYWJlbFN0eWxlLmZvbnR8fFwiMTJweCBzYW5zLXNlcmlmXCIsZC5zdHlsZS5mb250PXRoaXMubGFiZWxTdHlsZS5mb250LGQuc3R5bGUuY29sb3I9dGhpcy5sYWJlbFN0eWxlLmNvbG9yfHxcImJsYWNrXCIsdGhpcy5sYWJlbFN0eWxlLmZpbGwmJihkLnN0eWxlLmJhY2tncm91bmQ9dGhpcy5sYWJlbFN0eWxlLmZpbGwpLHRoaXMubGFiZWxTdHlsZS5ib3JkZXJXaWR0aD4wKXt2YXIgZT10aGlzLmxhYmVsU3R5bGUuYm9yZGVyU3R5bGU/dGhpcy5sYWJlbFN0eWxlLmJvcmRlclN0eWxlOlwiYmxhY2tcIjtkLnN0eWxlLmJvcmRlcj10aGlzLmxhYmVsU3R5bGUuYm9yZGVyV2lkdGgrXCJweCBzb2xpZCBcIitlfXRoaXMubGFiZWxTdHlsZS5wYWRkaW5nJiYoZC5zdHlsZS5wYWRkaW5nPXRoaXMubGFiZWxTdHlsZS5wYWRkaW5nKX19LGMuZXh0ZW5kKGIuT3ZlcmxheXMuTGFiZWwsYi5PdmVybGF5cy5DdXN0b20se2NsZWFudXA6ZnVuY3Rpb24oYSl7YSYmKHRoaXMuZGl2PW51bGwsdGhpcy5sYWJlbD1udWxsLHRoaXMubGFiZWxUZXh0PW51bGwsdGhpcy5jc3NDbGFzcz1udWxsLHRoaXMubGFiZWxTdHlsZT1udWxsKX0sZ2V0TGFiZWw6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sYWJlbH0sc2V0TGFiZWw6ZnVuY3Rpb24oYSl7dGhpcy5sYWJlbD1hLHRoaXMubGFiZWxUZXh0PW51bGwsdGhpcy5jbGVhckNhY2hlZERpbWVuc2lvbnMoKSx0aGlzLnVwZGF0ZSgpLHRoaXMuY29tcG9uZW50LnJlcGFpbnQoKX0sZ2V0RGltZW5zaW9uczpmdW5jdGlvbigpe3JldHVybiB0aGlzLnVwZGF0ZSgpLGkucHJvdG90eXBlLmdldERpbWVuc2lvbnMuYXBwbHkodGhpcyxhcmd1bWVudHMpfSx1cGRhdGU6ZnVuY3Rpb24oKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLmxhYmVsKXt2YXIgYT10aGlzLmxhYmVsKHRoaXMpO3RoaXMuZ2V0RWxlbWVudCgpLmlubmVySFRNTD1hLnJlcGxhY2UoL1xcclxcbi9nLFwiPGJyLz5cIil9ZWxzZSBudWxsPT10aGlzLmxhYmVsVGV4dCYmKHRoaXMubGFiZWxUZXh0PXRoaXMubGFiZWwsdGhpcy5nZXRFbGVtZW50KCkuaW5uZXJIVE1MPXRoaXMubGFiZWxUZXh0LnJlcGxhY2UoL1xcclxcbi9nLFwiPGJyLz5cIikpfSx1cGRhdGVGcm9tOmZ1bmN0aW9uKGEpe251bGwhPWEubGFiZWwmJnRoaXMuc2V0TGFiZWwoYS5sYWJlbCl9fSl9LmNhbGwoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dGhpcyksZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgYT10aGlzLGI9YS5qc1BsdW1iLGM9ZnVuY3Rpb24oYil7dmFyIGM9Yi5fbW90dGxlO3JldHVybiBjfHwoYz1iLl9tb3R0bGU9bmV3IGEuTW90dGxlKSxjfTtiLmV4dGVuZChhLmpzUGx1bWJJbnN0YW5jZS5wcm90b3R5cGUse2dldEV2ZW50TWFuYWdlcjpmdW5jdGlvbigpe3JldHVybiBjKHRoaXMpfSxvbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmdldEV2ZW50TWFuYWdlcigpLm9uLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzfSxvZmY6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRFdmVudE1hbmFnZXIoKS5vZmYuYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXN9fSl9LmNhbGwoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dGhpcyksZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgYT10aGlzLGI9YS5qc1BsdW1iVXRpbCxjPWEuanNQbHVtYkluc3RhbmNlLGQ9XCJqdGstZ3JvdXAtY29sbGFwc2VkXCIsZT1cImp0ay1ncm91cC1leHBhbmRlZFwiLGY9XCJbanRrLWdyb3VwLWNvbnRlbnRdXCIsZz1cImVsZW1lbnREcmFnZ2FibGVcIixoPVwic3RvcFwiLGk9XCJyZXZlcnRcIixqPVwiX2dyb3VwTWFuYWdlclwiLGs9XCJfanNQbHVtYkdyb3VwXCIsbD1cIl9qc1BsdW1iR3JvdXBEcmFnXCIsbT1cImdyb3VwOmFkZE1lbWJlclwiLG49XCJncm91cDpyZW1vdmVNZW1iZXJcIixvPVwiZ3JvdXA6YWRkXCIscD1cImdyb3VwOnJlbW92ZVwiLHE9XCJncm91cDpleHBhbmRcIixyPVwiZ3JvdXA6Y29sbGFwc2VcIixzPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGMoYSl7ZGVsZXRlIGEucHJveGllczt2YXIgYyxkPWlbYS5pZF07bnVsbCE9ZCYmKGM9ZnVuY3Rpb24oYil7cmV0dXJuIGIuaWQ9PT1hLmlkfSxiLnJlbW92ZVdpdGhGdW5jdGlvbihkLmNvbm5lY3Rpb25zLnNvdXJjZSxjKSxiLnJlbW92ZVdpdGhGdW5jdGlvbihkLmNvbm5lY3Rpb25zLnRhcmdldCxjKSxkZWxldGUgaVthLmlkXSksZD1qW2EuaWRdLG51bGwhPWQmJihjPWZ1bmN0aW9uKGIpe3JldHVybiBiLmlkPT09YS5pZH0sYi5yZW1vdmVXaXRoRnVuY3Rpb24oZC5jb25uZWN0aW9ucy5zb3VyY2UsYyksYi5yZW1vdmVXaXRoRnVuY3Rpb24oZC5jb25uZWN0aW9ucy50YXJnZXQsYyksZGVsZXRlIGpbYS5pZF0pfWZ1bmN0aW9uIGYoYixjKXtmb3IodmFyIGQ9Yi5nZXRNZW1iZXJzKCksZT0wO2U8ZC5sZW5ndGg7ZSsrKWFbYz9cInNob3dcIjpcImhpZGVcIl0oZFtlXSwhMCl9ZnVuY3Rpb24gZyhiKXt2YXIgYz1iLmdldE1lbWJlcnMoKSxkPWEuZ2V0Q29ubmVjdGlvbnMoe3NvdXJjZTpjfSwhMCksZT1hLmdldENvbm5lY3Rpb25zKHt0YXJnZXQ6Y30sITApLGY9e307Yi5jb25uZWN0aW9ucy5zb3VyY2UubGVuZ3RoPTAsYi5jb25uZWN0aW9ucy50YXJnZXQubGVuZ3RoPTA7dmFyIGc9ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspZlthW2NdLmlkXXx8KGZbYVtjXS5pZF09ITAsYVtjXS5zb3VyY2UuX2pzUGx1bWJHcm91cD09PWI/KGFbY10udGFyZ2V0Ll9qc1BsdW1iR3JvdXAhPT1iJiZiLmNvbm5lY3Rpb25zLnNvdXJjZS5wdXNoKGFbY10pLGlbYVtjXS5pZF09Yik6YVtjXS50YXJnZXQuX2pzUGx1bWJHcm91cD09PWImJihiLmNvbm5lY3Rpb25zLnRhcmdldC5wdXNoKGFbY10pLGpbYVtjXS5pZF09YikpfTtnKGQpLGcoZSl9dmFyIGg9e30saT17fSxqPXt9LGw9dGhpczthLmJpbmQoXCJjb25uZWN0aW9uXCIsZnVuY3Rpb24oYSl7bnVsbCE9YS5zb3VyY2Vba10mJm51bGwhPWEudGFyZ2V0W2tdJiZhLnNvdXJjZVtrXT09PWEudGFyZ2V0W2tdPyhpW2EuY29ubmVjdGlvbi5pZF09YS5zb3VyY2Vba10salthLmNvbm5lY3Rpb24uaWRdPWEuc291cmNlW2tdKToobnVsbCE9YS5zb3VyY2Vba10mJihiLnN1Z2dlc3QoYS5zb3VyY2Vba10uY29ubmVjdGlvbnMuc291cmNlLGEuY29ubmVjdGlvbiksaVthLmNvbm5lY3Rpb24uaWRdPWEuc291cmNlW2tdKSxudWxsIT1hLnRhcmdldFtrXSYmKGIuc3VnZ2VzdChhLnRhcmdldFtrXS5jb25uZWN0aW9ucy50YXJnZXQsYS5jb25uZWN0aW9uKSxqW2EuY29ubmVjdGlvbi5pZF09YS50YXJnZXRba10pKX0pLGEuYmluZChcImludGVybmFsLmNvbm5lY3Rpb25EZXRhY2hlZFwiLGZ1bmN0aW9uKGEpe2MoYS5jb25uZWN0aW9uKX0pLGEuYmluZChcImNvbm5lY3Rpb25Nb3ZlZFwiLGZ1bmN0aW9uKGEpe3ZhciBiPTA9PT1hLmluZGV4P2k6aixjPWJbYS5jb25uZWN0aW9uLmlkXTtpZihjKXt2YXIgZD1jLmNvbm5lY3Rpb25zWzA9PT1hLmluZGV4P1wic291cmNlXCI6XCJ0YXJnZXRcIl0sZT1kLmluZGV4T2YoYS5jb25uZWN0aW9uKTstMSE9ZSYmZC5zcGxpY2UoZSwxKX19KSx0aGlzLmFkZEdyb3VwPWZ1bmN0aW9uKGIpe2EuYWRkQ2xhc3MoYi5nZXRFbCgpLGUpLGhbYi5pZF09YixiLm1hbmFnZXI9dGhpcyxnKGIpLGEuZmlyZShvLHtncm91cDpifSl9LHRoaXMuYWRkVG9Hcm91cD1mdW5jdGlvbihiLGMsZCl7aWYoYj10aGlzLmdldEdyb3VwKGIpKXt2YXIgZT1iLmdldEVsKCk7aWYoYy5faXNKc1BsdW1iR3JvdXApcmV0dXJuO3ZhciBmPWMuX2pzUGx1bWJHcm91cDtpZihmIT09Yil7dmFyIGc9YS5nZXRPZmZzZXQoYywhMCksaD1iLmNvbGxhcHNlZD9hLmdldE9mZnNldChlLCEwKTphLmdldE9mZnNldChiLmdldERyYWdBcmVhKCksITApO251bGwhPWYmJihmLnJlbW92ZShjLGQpLGwudXBkYXRlQ29ubmVjdGlvbnNGb3JHcm91cChmKSksYi5hZGQoYyxkKTt2YXIgaT1mdW5jdGlvbihhLGMpe3ZhciBkPTA9PWM/MTowO2EuZWFjaChmdW5jdGlvbihhKXthLnNldFZpc2libGUoITEpLGEuZW5kcG9pbnRzW2RdLmVsZW1lbnQuX2pzUGx1bWJHcm91cD09PWI/KGEuZW5kcG9pbnRzW2RdLnNldFZpc2libGUoITEpLGwuZXhwYW5kQ29ubmVjdGlvbihhLGQsYikpOihhLmVuZHBvaW50c1tjXS5zZXRWaXNpYmxlKCExKSxsLmNvbGxhcHNlQ29ubmVjdGlvbihhLGMsYikpfSl9O2IuY29sbGFwc2VkJiYoaShhLnNlbGVjdCh7c291cmNlOmN9KSwwKSxpKGEuc2VsZWN0KHt0YXJnZXQ6Y30pLDEpKTt2YXIgaj1hLmdldElkKGMpO2EuZHJhZ01hbmFnZXIuc2V0UGFyZW50KGMsaixlLGEuZ2V0SWQoZSksZyk7dmFyIGs9e2xlZnQ6Zy5sZWZ0LWgubGVmdCx0b3A6Zy50b3AtaC50b3B9O2Euc2V0UG9zaXRpb24oYyxrKSxhLmRyYWdNYW5hZ2VyLnJldmFsaWRhdGVQYXJlbnQoYyxqLGcpLGwudXBkYXRlQ29ubmVjdGlvbnNGb3JHcm91cChiKSxhLnJldmFsaWRhdGUoaiksc2V0VGltZW91dChmdW5jdGlvbigpe2EuZmlyZShtLHtncm91cDpiLGVsOmN9KX0sMCl9fX0sdGhpcy5yZW1vdmVGcm9tR3JvdXA9ZnVuY3Rpb24oYSxiLGMpe2E9dGhpcy5nZXRHcm91cChhKSxhJiZhLnJlbW92ZShiLG51bGwsYyl9LHRoaXMuZ2V0R3JvdXA9ZnVuY3Rpb24oYSl7dmFyIGM9YTtpZihiLmlzU3RyaW5nKGEpJiYoYz1oW2FdLG51bGw9PWMpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBzdWNoIGdyb3VwIFtcIithK1wiXVwiKTtyZXR1cm4gY30sdGhpcy5nZXRHcm91cHM9ZnVuY3Rpb24oKXt2YXIgYT1bXTtmb3IodmFyIGIgaW4gaClhLnB1c2goaFtiXSk7cmV0dXJuIGF9LHRoaXMucmVtb3ZlR3JvdXA9ZnVuY3Rpb24oYixjLGQsZSl7Yj10aGlzLmdldEdyb3VwKGIpLHRoaXMuZXhwYW5kR3JvdXAoYiwhMCksYltjP1wicmVtb3ZlQWxsXCI6XCJvcnBoYW5BbGxcIl0oZCxlKSxhLnJlbW92ZShiLmdldEVsKCkpLGRlbGV0ZSBoW2IuaWRdLGRlbGV0ZSBhLl9ncm91cHNbYi5pZF0sYS5maXJlKHAse2dyb3VwOmJ9KX0sdGhpcy5yZW1vdmVBbGxHcm91cHM9ZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZCBpbiBoKXRoaXMucmVtb3ZlR3JvdXAoaFtkXSxhLGIsYyl9O3ZhciBuPXRoaXMuY29sbGFwc2VDb25uZWN0aW9uPWZ1bmN0aW9uKGIsYyxkKXt2YXIgZSxmPWQuZ2V0RWwoKSxnPWEuZ2V0SWQoZiksaD1iLmVuZHBvaW50c1tjXS5lbGVtZW50SWQsaT1iLmVuZHBvaW50c1swPT09Yz8xOjBdLmVsZW1lbnQ7aVtrXSYmIWlba10uc2hvdWxkUHJveHkoKSYmaVtrXS5jb2xsYXBzZWR8fChiLnByb3hpZXM9Yi5wcm94aWVzfHxbXSxiLnByb3hpZXNbY10/ZT1iLnByb3hpZXNbY10uZXA6KGU9YS5hZGRFbmRwb2ludChmLHtlbmRwb2ludDpkLmdldEVuZHBvaW50KGIsYyksYW5jaG9yOmQuZ2V0QW5jaG9yKGIsYykscGFyYW1ldGVyczp7aXNQcm94eUVuZHBvaW50OiEwfX0pLGUuX2ZvcmNlRGVsZXRlT25EZXRhY2g9ITApLGIucHJveGllc1tjXT17ZXA6ZSxvcmlnaW5hbEVwOmIuZW5kcG9pbnRzW2NdfSwwPT09Yz9hLmFuY2hvck1hbmFnZXIuc291cmNlQ2hhbmdlZChoLGcsYixmKTooYS5hbmNob3JNYW5hZ2VyLnVwZGF0ZU90aGVyRW5kcG9pbnQoYi5lbmRwb2ludHNbMF0uZWxlbWVudElkLGgsZyxiKSxiLnRhcmdldD1mLGIudGFyZ2V0SWQ9ZyksYi5wcm94aWVzW2NdLm9yaWdpbmFsRXAuZGV0YWNoRnJvbUNvbm5lY3Rpb24oYixudWxsLCEwKSxlLmNvbm5lY3Rpb25zPVtiXSxiLmVuZHBvaW50c1tjXT1lLGIuc2V0VmlzaWJsZSghMCkpfTt0aGlzLmNvbGxhcHNlR3JvdXA9ZnVuY3Rpb24oYil7aWYoYj10aGlzLmdldEdyb3VwKGIpLG51bGwhPWImJiFiLmNvbGxhcHNlZCl7dmFyIGM9Yi5nZXRFbCgpO2lmKGYoYiwhMSksYi5zaG91bGRQcm94eSgpKXt2YXIgZz1mdW5jdGlvbihhLGMpe2Zvcih2YXIgZD0wO2Q8YS5sZW5ndGg7ZCsrKXt2YXIgZT1hW2RdO24oZSxjLGIpfX07ZyhiLmNvbm5lY3Rpb25zLnNvdXJjZSwwKSxnKGIuY29ubmVjdGlvbnMudGFyZ2V0LDEpfWIuY29sbGFwc2VkPSEwLGEucmVtb3ZlQ2xhc3MoYyxlKSxhLmFkZENsYXNzKGMsZCksYS5yZXZhbGlkYXRlKGMpLGEuZmlyZShyLHtncm91cDpifSl9fTt2YXIgcz10aGlzLmV4cGFuZENvbm5lY3Rpb249ZnVuY3Rpb24oYixjLGQpe2lmKG51bGwhPWIucHJveGllcyYmbnVsbCE9Yi5wcm94aWVzW2NdKXt2YXIgZT1hLmdldElkKGQuZ2V0RWwoKSksZj1iLnByb3hpZXNbY10ub3JpZ2luYWxFcC5lbGVtZW50LGc9Yi5wcm94aWVzW2NdLm9yaWdpbmFsRXAuZWxlbWVudElkO2IuZW5kcG9pbnRzW2NdPWIucHJveGllc1tjXS5vcmlnaW5hbEVwLDA9PT1jP2EuYW5jaG9yTWFuYWdlci5zb3VyY2VDaGFuZ2VkKGUsZyxiLGYpOihhLmFuY2hvck1hbmFnZXIudXBkYXRlT3RoZXJFbmRwb2ludChiLmVuZHBvaW50c1swXS5lbGVtZW50SWQsZSxnLGIpLGIudGFyZ2V0PWYsYi50YXJnZXRJZD1nKSxiLnByb3hpZXNbY10uZXAuZGV0YWNoRnJvbUNvbm5lY3Rpb24oYixudWxsLCEwKSxiLnByb3hpZXNbY10ub3JpZ2luYWxFcC5hZGRDb25uZWN0aW9uKGIpLGRlbGV0ZSBiLnByb3hpZXNbY119fTt0aGlzLmV4cGFuZEdyb3VwPWZ1bmN0aW9uKGIsYyl7aWYoYj10aGlzLmdldEdyb3VwKGIpLG51bGwhPWImJmIuY29sbGFwc2VkKXt2YXIgZz1iLmdldEVsKCk7aWYoZihiLCEwKSxiLnNob3VsZFByb3h5KCkpe3ZhciBoPWZ1bmN0aW9uKGEsYyl7Zm9yKHZhciBkPTA7ZDxhLmxlbmd0aDtkKyspe3ZhciBlPWFbZF07cyhlLGMsYil9fTtoKGIuY29ubmVjdGlvbnMuc291cmNlLDApLGgoYi5jb25uZWN0aW9ucy50YXJnZXQsMSl9Yi5jb2xsYXBzZWQ9ITEsYS5hZGRDbGFzcyhnLGUpLGEucmVtb3ZlQ2xhc3MoZyxkKSxhLnJldmFsaWRhdGUoZyksdGhpcy5yZXBhaW50R3JvdXAoYiksY3x8YS5maXJlKHEse2dyb3VwOmJ9KX19LHRoaXMucmVwYWludEdyb3VwPWZ1bmN0aW9uKGIpe2I9dGhpcy5nZXRHcm91cChiKTtmb3IodmFyIGM9Yi5nZXRNZW1iZXJzKCksZD0wO2Q8Yy5sZW5ndGg7ZCsrKWEucmV2YWxpZGF0ZShjW2RdKX0sdGhpcy51cGRhdGVDb25uZWN0aW9uc0Zvckdyb3VwPWcsdGhpcy5yZWZyZXNoQWxsR3JvdXBzPWZ1bmN0aW9uKCl7Zm9yKHZhciBiIGluIGgpZyhoW2JdKSxhLmRyYWdNYW5hZ2VyLnVwZGF0ZU9mZnNldHMoYS5nZXRJZChoW2JdLmdldEVsKCkpKX19LHQ9ZnVuY3Rpb24oYyxkKXtmdW5jdGlvbiBlKGEpe3JldHVybiBhLm9mZnNldFBhcmVudH1mdW5jdGlvbiBqKGEsYil7dmFyIGQ9ZShhKSxmPWMuZ2V0U2l6ZShkKSxnPWMuZ2V0U2l6ZShhKSxoPWJbMF0saT1oK2dbMF0saj1iWzFdLGs9aitnWzFdO3JldHVybiBpPjAmJmg8ZlswXSYmaz4wJiZqPGZbMV19ZnVuY3Rpb24gbyhhKXt2YXIgYj1jLmdldElkKGEpLGQ9Yy5nZXRPZmZzZXQoYSk7YS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGEpLGMuZ2V0Q29udGFpbmVyKCkuYXBwZW5kQ2hpbGQoYSksYy5zZXRQb3NpdGlvbihhLGQpLGRlbGV0ZSBhLl9qc1BsdW1iR3JvdXAscihhKSxjLmRyYWdNYW5hZ2VyLmNsZWFyUGFyZW50KGEsYil9ZnVuY3Rpb24gcChhKXtqKGEuZWwsYS5wb3MpfHwoYS5lbC5fanNQbHVtYkdyb3VwLnJlbW92ZShhLmVsKSxBP2MucmVtb3ZlKGEuZWwpOm8oYS5lbCkpfWZ1bmN0aW9uIHEoYSl7dmFyIGI9Yy5nZXRJZChhKTtjLnJldmFsaWRhdGUoYSksYy5kcmFnTWFuYWdlci5yZXZhbGlkYXRlUGFyZW50KGEsYil9ZnVuY3Rpb24gcihhKXthLl9rYXRhdm9yaW9EcmFnJiYoKEF8fHopJiZhLl9rYXRhdm9yaW9EcmFnLm9mZihoLHApLEF8fHp8fCF5fHwoYS5fa2F0YXZvcmlvRHJhZy5vZmYoaSxxKSxhLl9rYXRhdm9yaW9EcmFnLnNldFJldmVydChudWxsKSkpfWZ1bmN0aW9uIHMoYSl7YS5fa2F0YXZvcmlvRHJhZyYmKChBfHx6KSYmYS5fa2F0YXZvcmlvRHJhZy5vbihoLHApLHgmJmEuX2thdGF2b3Jpb0RyYWcuc2V0Q29uc3RyYWluKCEwKSx3JiZhLl9rYXRhdm9yaW9EcmFnLnNldFVzZUdob3N0UHJveHkoITApLEF8fHp8fCF5fHwoYS5fa2F0YXZvcmlvRHJhZy5vbihpLHEpLGEuX2thdGF2b3Jpb0RyYWcuc2V0UmV2ZXJ0KGZ1bmN0aW9uKGEsYil7cmV0dXJuIWooYSxiKX0pKSl9dmFyIHQ9dGhpcyx1PWQuZWw7dGhpcy5nZXRFbD1mdW5jdGlvbigpe3JldHVybiB1fSx0aGlzLmlkPWQuaWR8fGIudXVpZCgpLHUuX2lzSnNQbHVtYkdyb3VwPSEwO3ZhciB2PXRoaXMuZ2V0RHJhZ0FyZWE9ZnVuY3Rpb24oKXt2YXIgYT1jLmdldFNlbGVjdG9yKHUsZik7cmV0dXJuIGEmJmEubGVuZ3RoPjA/YVswXTp1fSx3PWQuZ2hvc3Q9PT0hMCx4PXd8fGQuY29uc3RyYWluPT09ITAseT1kLnJldmVydCE9PSExLHo9ZC5vcnBoYW49PT0hMCxBPWQucHJ1bmU9PT0hMCxCPWQuZHJvcE92ZXJyaWRlPT09ITAsQz1kLnByb3hpZWQhPT0hMSxEPVtdO2lmKHRoaXMuY29ubmVjdGlvbnM9e3NvdXJjZTpbXSx0YXJnZXQ6W10saW50ZXJuYWw6W119LHRoaXMuZ2V0QW5jaG9yPWZ1bmN0aW9uKCl7cmV0dXJuIGQuYW5jaG9yfHxcIkNvbnRpbnVvdXNcIn0sdGhpcy5nZXRFbmRwb2ludD1mdW5jdGlvbigpe3JldHVybiBkLmVuZHBvaW50fHxbXCJEb3RcIix7cmFkaXVzOjEwfV19LHRoaXMuY29sbGFwc2VkPSExLGQuZHJhZ2dhYmxlIT09ITEpe3ZhciBFPXtzdG9wOmZ1bmN0aW9uKGEpe2MuZmlyZShcImdyb3VwRHJhZ1N0b3BcIixqc1BsdW1iLmV4dGVuZChhLHtncm91cDp0fSkpfSxzY29wZTpsfTtkLmRyYWdPcHRpb25zJiZhLmpzUGx1bWIuZXh0ZW5kKEUsZC5kcmFnT3B0aW9ucyksYy5kcmFnZ2FibGUoZC5lbCxFKX1kLmRyb3BwYWJsZSE9PSExJiZjLmRyb3BwYWJsZShkLmVsLHtkcm9wOmZ1bmN0aW9uKGEpe3ZhciBiPWEuZHJhZy5lbDtpZighYi5faXNKc1BsdW1iR3JvdXApe3ZhciBkPWIuX2pzUGx1bWJHcm91cDtpZihkIT09dCl7aWYobnVsbCE9ZCYmZC5vdmVycmlkZURyb3AoYix0KSlyZXR1cm47Yy5nZXRHcm91cE1hbmFnZXIoKS5hZGRUb0dyb3VwKHQsYiwhMSl9fX19KTt2YXIgRj1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1udWxsPT1hLm5vZGVUeXBlP2E6W2FdLGQ9MDtkPGMubGVuZ3RoO2QrKyliKGNbZF0pfTt0aGlzLm92ZXJyaWRlRHJvcD1mdW5jdGlvbigpe3JldHVybiBCJiYoeXx8QXx8eil9LHRoaXMuYWRkPWZ1bmN0aW9uKGEsYil7dmFyIGQ9digpO0YoYSxmdW5jdGlvbihhKXtpZihudWxsIT1hLl9qc1BsdW1iR3JvdXApe2lmKGEuX2pzUGx1bWJHcm91cD09PXQpcmV0dXJuO2EuX2pzUGx1bWJHcm91cC5yZW1vdmUoYSwhMCxiLCExKX1hLl9qc1BsdW1iR3JvdXA9dCxELnB1c2goYSksYy5pc0FscmVhZHlEcmFnZ2FibGUoYSkmJnMoYSksYS5wYXJlbnROb2RlIT1kJiZkLmFwcGVuZENoaWxkKGEpLGJ8fGMuZmlyZShtLHtncm91cDp0LGVsOmF9KX0pLGMuZ2V0R3JvdXBNYW5hZ2VyKCkudXBkYXRlQ29ubmVjdGlvbnNGb3JHcm91cCh0KX0sdGhpcy5yZW1vdmU9ZnVuY3Rpb24oYSxkLGUsZil7RihhLGZ1bmN0aW9uKGEpe2lmKGRlbGV0ZSBhLl9qc1BsdW1iR3JvdXAsYi5yZW1vdmVXaXRoRnVuY3Rpb24oRCxmdW5jdGlvbihiKXtyZXR1cm4gYj09PWF9KSxkKXRyeXt0LmdldERyYWdBcmVhKCkucmVtb3ZlQ2hpbGQoYSl9Y2F0Y2goZil7anNQbHVtYlV0aWwubG9nKFwiQ291bGQgbm90IHJlbW92ZSBlbGVtZW50IGZyb20gR3JvdXAgXCIrZil9cihhKSxlfHxjLmZpcmUobix7Z3JvdXA6dCxlbDphfSl9KSxmfHxjLmdldEdyb3VwTWFuYWdlcigpLnVwZGF0ZUNvbm5lY3Rpb25zRm9yR3JvdXAodCl9LHRoaXMucmVtb3ZlQWxsPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBkPTAsZT1ELmxlbmd0aDtlPmQ7ZCsrKXQucmVtb3ZlKERbMF0sYSxiLCEwKTtELmxlbmd0aD0wLGMuZ2V0R3JvdXBNYW5hZ2VyKCkudXBkYXRlQ29ubmVjdGlvbnNGb3JHcm91cCh0KX0sdGhpcy5vcnBoYW5BbGw9ZnVuY3Rpb24oKXtmb3IodmFyIGE9MDthPEQubGVuZ3RoO2ErKylvKERbYV0pO0QubGVuZ3RoPTB9LHRoaXMuZ2V0TWVtYmVycz1mdW5jdGlvbigpe3JldHVybiBEfSx1W2tdPXRoaXMsYy5iaW5kKGcsZnVuY3Rpb24oYSl7YS5lbC5fanNQbHVtYkdyb3VwPT10aGlzJiZzKGEuZWwpfS5iaW5kKHRoaXMpKSx0aGlzLnNob3VsZFByb3h5PWZ1bmN0aW9uKCl7cmV0dXJuIEN9LGMuZ2V0R3JvdXBNYW5hZ2VyKCkuYWRkR3JvdXAodGhpcyl9O2MucHJvdG90eXBlLmFkZEdyb3VwPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7aWYoYi5fZ3JvdXBzPWIuX2dyb3Vwc3x8e30sbnVsbCE9Yi5fZ3JvdXBzW2EuaWRdKXRocm93IG5ldyBUeXBlRXJyb3IoXCJjYW5ub3QgY3JlYXRlIEdyb3VwIFtcIithLmlkK1wiXTsgYSBHcm91cCB3aXRoIHRoYXQgSUQgZXhpc3RzXCIpO2lmKG51bGwhPWEuZWxba10pdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbm5vdCBjcmVhdGUgR3JvdXAgW1wiK2EuaWQrXCJdOyB0aGUgZ2l2ZW4gZWxlbWVudCBpcyBhbHJlYWR5IGEgR3JvdXBcIik7dmFyIGM9bmV3IHQoYixhKTtyZXR1cm4gYi5fZ3JvdXBzW2MuaWRdPWMsY30sYy5wcm90b3R5cGUuYWRkVG9Hcm91cD1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZnVuY3Rpb24oYil7dmFyIGQ9dGhpcy5nZXRJZChiKTt0aGlzLm1hbmFnZShkLGIpLHRoaXMuZ2V0R3JvdXBNYW5hZ2VyKCkuYWRkVG9Hcm91cChhLGIsYyl9LmJpbmQodGhpcyk7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGU9MDtlPGIubGVuZ3RoO2UrKylkKGJbZV0pO2Vsc2UgZChiKX0sYy5wcm90b3R5cGUucmVtb3ZlRnJvbUdyb3VwPWZ1bmN0aW9uKGEsYixjKXt0aGlzLmdldEdyb3VwTWFuYWdlcigpLnJlbW92ZUZyb21Hcm91cChhLGIsYyl9LGMucHJvdG90eXBlLnJlbW92ZUdyb3VwPWZ1bmN0aW9uKGEsYixjLGQpe3RoaXMuZ2V0R3JvdXBNYW5hZ2VyKCkucmVtb3ZlR3JvdXAoYSxiLGMsZCl9LGMucHJvdG90eXBlLnJlbW92ZUFsbEdyb3Vwcz1mdW5jdGlvbihhLGIsYyl7dGhpcy5nZXRHcm91cE1hbmFnZXIoKS5yZW1vdmVBbGxHcm91cHMoYSxiLGMpfSxjLnByb3RvdHlwZS5nZXRHcm91cD1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5nZXRHcm91cE1hbmFnZXIoKS5nZXRHcm91cChhKX0sYy5wcm90b3R5cGUuZ2V0R3JvdXBzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0R3JvdXBNYW5hZ2VyKCkuZ2V0R3JvdXBzKCl9LGMucHJvdG90eXBlLmV4cGFuZEdyb3VwPWZ1bmN0aW9uKGEpe3RoaXMuZ2V0R3JvdXBNYW5hZ2VyKCkuZXhwYW5kR3JvdXAoYSl9LGMucHJvdG90eXBlLmNvbGxhcHNlR3JvdXA9ZnVuY3Rpb24oYSl7dGhpcy5nZXRHcm91cE1hbmFnZXIoKS5jb2xsYXBzZUdyb3VwKGEpfSxjLnByb3RvdHlwZS5yZXBhaW50R3JvdXA9ZnVuY3Rpb24oYSl7dGhpcy5nZXRHcm91cE1hbmFnZXIoKS5yZXBhaW50R3JvdXAoYSl9LGMucHJvdG90eXBlLnRvZ2dsZUdyb3VwPWZ1bmN0aW9uKGEpe2E9dGhpcy5nZXRHcm91cE1hbmFnZXIoKS5nZXRHcm91cChhKSxudWxsIT1hJiZ0aGlzLmdldEdyb3VwTWFuYWdlcigpW2EuY29sbGFwc2VkP1wiZXhwYW5kR3JvdXBcIjpcImNvbGxhcHNlR3JvdXBcIl0oYSl9LGMucHJvdG90eXBlLmdldEdyb3VwTWFuYWdlcj1mdW5jdGlvbigpe3ZhciBhPXRoaXNbal07cmV0dXJuIG51bGw9PWEmJihhPXRoaXNbal09bmV3IHModGhpcykpLGF9LGMucHJvdG90eXBlLnJlbW92ZUdyb3VwTWFuYWdlcj1mdW5jdGlvbigpe2RlbGV0ZSB0aGlzW2pdfSxjLnByb3RvdHlwZS5nZXRHcm91cEZvcj1mdW5jdGlvbihhKXtyZXR1cm4gYT10aGlzLmdldEVsZW1lbnQoYSksYT9hW2tdOnZvaWQgMH19LmNhbGwoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dGhpcyksZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgYT10aGlzLGI9YS5qc1BsdW1iLGM9YS5qc1BsdW1iVXRpbCxkPWZ1bmN0aW9uKGEpe3RoaXMudHlwZT1cIkZsb3djaGFydFwiLGE9YXx8e30sYS5zdHViPW51bGw9PWEuc3R1Yj8zMDphLnN0dWI7dmFyIGMsZCxlPWIuQ29ubmVjdG9ycy5BYnN0cmFjdENvbm5lY3Rvci5hcHBseSh0aGlzLGFyZ3VtZW50cyksZj1udWxsPT1hLm1pZHBvaW50Py41OmEubWlkcG9pbnQsZz1hLmFsd2F5c1Jlc3BlY3RTdHVicz09PSEwLGg9bnVsbCxpPW51bGwsaj1udWxsIT1hLmNvcm5lclJhZGl1cz9hLmNvcm5lclJhZGl1czowLGs9KGEubG9vcGJhY2tSYWRpdXN8fDI1LGZ1bmN0aW9uKGEpe3JldHVybiAwPmE/LTE6MD09PWE/MDoxfSksbD1mdW5jdGlvbihhLGIsYyxkKXtpZihoIT1ifHxpIT1jKXt2YXIgZT1udWxsPT1oP2Quc3g6aCxmPW51bGw9PWk/ZC5zeTppLGc9ZT09Yj9cInZcIjpcImhcIixqPWsoYi1lKSxsPWsoYy1mKTtoPWIsaT1jLGEucHVzaChbZSxmLGIsYyxnLGosbF0pfX0sbT1mdW5jdGlvbihhKXtyZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KGFbMF0tYVsyXSwyKStNYXRoLnBvdyhhWzFdLWFbM10sMikpfSxuPWZ1bmN0aW9uKGEpe3ZhciBiPVtdO3JldHVybiBiLnB1c2guYXBwbHkoYixhKSxifSxvPWZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQsZj1udWxsLGc9MDtnPGIubGVuZ3RoLTE7ZysrKXtpZihmPWZ8fG4oYltnXSksZD1uKGJbZysxXSksaj4wJiZmWzRdIT1kWzRdKXt2YXIgaD1NYXRoLm1pbihqLG0oZiksbShkKSk7ZlsyXS09Zls1XSpoLGZbM10tPWZbNl0qaCxkWzBdKz1kWzVdKmgsZFsxXSs9ZFs2XSpoO3ZhciBpPWZbNl09PWRbNV0mJjE9PWRbNV18fGZbNl09PWRbNV0mJjA9PT1kWzVdJiZmWzVdIT1kWzZdfHxmWzZdPT1kWzVdJiYtMT09ZFs1XSxrPWRbMV0+ZlszXT8xOi0xLGw9ZFswXT5mWzJdPzE6LTEsbz1rPT1sLHA9byYmaXx8IW8mJiFpP2RbMF06ZlsyXSxxPW8mJml8fCFvJiYhaT9mWzNdOmRbMV07ZS5hZGRTZWdtZW50KGEsXCJTdHJhaWdodFwiLHt4MTpmWzBdLHkxOmZbMV0seDI6ZlsyXSx5MjpmWzNdfSksZS5hZGRTZWdtZW50KGEsXCJBcmNcIix7cjpoLHgxOmZbMl0seTE6ZlszXSx4MjpkWzBdLHkyOmRbMV0sY3g6cCxjeTpxLGFjOml9KX1lbHNle3ZhciByPWZbMl09PWZbMF0/MDpmWzJdPmZbMF0/Yy5sdy8yOi0oYy5sdy8yKSxzPWZbM109PWZbMV0/MDpmWzNdPmZbMV0/Yy5sdy8yOi0oYy5sdy8yKTtlLmFkZFNlZ21lbnQoYSxcIlN0cmFpZ2h0XCIse3gxOmZbMF0tcix5MTpmWzFdLXMseDI6ZlsyXStyLHkyOmZbM10rc30pfWY9ZH1udWxsIT1kJiZlLmFkZFNlZ21lbnQoYSxcIlN0cmFpZ2h0XCIse3gxOmRbMF0seTE6ZFsxXSx4MjpkWzJdLHkyOmRbM119KX07dGhpcy5fY29tcHV0ZT1mdW5jdGlvbihhLGIpe2M9W10saD1udWxsLGk9bnVsbCxkPW51bGw7dmFyIGo9ZnVuY3Rpb24oKXtyZXR1cm5bYS5zdGFydFN0dWJYLGEuc3RhcnRTdHViWSxhLmVuZFN0dWJYLGEuZW5kU3R1YlldfSxrPXtwZXJwZW5kaWN1bGFyOmosb3J0aG9nb25hbDpqLG9wcG9zaXRlOmZ1bmN0aW9uKGIpe3ZhciBjPWEsZD1cInhcIj09Yj8wOjEsZT17eDpmdW5jdGlvbigpe3JldHVybiAxPT1jLnNvW2RdJiYoYy5zdGFydFN0dWJYPmMuZW5kU3R1YlgmJmMudHg+Yy5zdGFydFN0dWJYfHxjLnN4PmMuZW5kU3R1YlgmJmMudHg+Yy5zeCl8fC0xPT1jLnNvW2RdJiYoYy5zdGFydFN0dWJYPGMuZW5kU3R1YlgmJmMudHg8Yy5zdGFydFN0dWJYfHxjLnN4PGMuZW5kU3R1YlgmJmMudHg8Yy5zeCl9LHk6ZnVuY3Rpb24oKXtyZXR1cm4gMT09Yy5zb1tkXSYmKGMuc3RhcnRTdHViWT5jLmVuZFN0dWJZJiZjLnR5PmMuc3RhcnRTdHViWXx8Yy5zeT5jLmVuZFN0dWJZJiZjLnR5PmMuc3kpfHwtMT09Yy5zb1tkXSYmKGMuc3RhcnRTdHViWTxjLmVuZFN0dWJZJiZjLnR5PGMuc3RhcnRTdHViWXx8Yy5zeTxjLmVuZFN0dWJZJiZjLnR5PGMuc3kpfX07cmV0dXJuIWcmJmVbYl0oKT97eDpbKGEuc3grYS50eCkvMixhLnN0YXJ0U3R1YlksKGEuc3grYS50eCkvMixhLmVuZFN0dWJZXSx5OlthLnN0YXJ0U3R1YlgsKGEuc3krYS50eSkvMixhLmVuZFN0dWJYLChhLnN5K2EudHkpLzJdfVtiXTpbYS5zdGFydFN0dWJYLGEuc3RhcnRTdHViWSxhLmVuZFN0dWJYLGEuZW5kU3R1YlldfX0sbT1rW2EuYW5jaG9yT3JpZW50YXRpb25dKGEuc291cmNlQXhpcyksbj1cInhcIj09YS5zb3VyY2VBeGlzPzA6MSxwPVwieFwiPT1hLnNvdXJjZUF4aXM/MTowLHE9bVtuXSxyPW1bcF0scz1tW24rMl0sdD1tW3ArMl07bChjLG1bMF0sbVsxXSxhKTt2YXIgdT1hLnN0YXJ0U3R1YlgrKGEuZW5kU3R1YlgtYS5zdGFydFN0dWJYKSpmLHY9YS5zdGFydFN0dWJZKyhhLmVuZFN0dWJZLWEuc3RhcnRTdHViWSkqZix3PXt4OlswLDFdLHk6WzEsMF19LHg9e3BlcnBlbmRpY3VsYXI6ZnVuY3Rpb24oYil7dmFyIGM9YSxkPXt4OltbWzEsMiwzLDRdLG51bGwsWzIsMSw0LDNdXSxudWxsLFtbNCwzLDIsMV0sbnVsbCxbMyw0LDEsMl1dXSx5OltbWzMsMiwxLDRdLG51bGwsWzIsMyw0LDFdXSxudWxsLFtbNCwxLDIsM10sbnVsbCxbMSw0LDMsMl1dXX0sZT17eDpbW2Muc3RhcnRTdHViWCxjLmVuZFN0dWJYXSxudWxsLFtjLmVuZFN0dWJYLGMuc3RhcnRTdHViWF1dLHk6W1tjLnN0YXJ0U3R1YlksYy5lbmRTdHViWV0sbnVsbCxbYy5lbmRTdHViWSxjLnN0YXJ0U3R1YlldXX0sZj17eDpbW3UsYy5zdGFydFN0dWJZXSxbdSxjLmVuZFN0dWJZXV0seTpbW2Muc3RhcnRTdHViWCx2XSxbYy5lbmRTdHViWCx2XV19LGc9e3g6W1tjLmVuZFN0dWJYLGMuc3RhcnRTdHViWV1dLHk6W1tjLnN0YXJ0U3R1YlgsYy5lbmRTdHViWV1dfSxoPXt4OltbYy5zdGFydFN0dWJYLGMuZW5kU3R1YlldLFtjLmVuZFN0dWJYLGMuZW5kU3R1YlldXSx5OltbYy5lbmRTdHViWCxjLnN0YXJ0U3R1YlldLFtjLmVuZFN0dWJYLGMuZW5kU3R1YlldXX0saT17eDpbW2Muc3RhcnRTdHViWCx2XSxbYy5lbmRTdHViWCx2XSxbYy5lbmRTdHViWCxjLmVuZFN0dWJZXV0seTpbW3UsYy5zdGFydFN0dWJZXSxbdSxjLmVuZFN0dWJZXSxbYy5lbmRTdHViWCxjLmVuZFN0dWJZXV19LGo9e3g6W2Muc3RhcnRTdHViWSxjLmVuZFN0dWJZXSx5OltjLnN0YXJ0U3R1YlgsYy5lbmRTdHViWF19LGs9d1tiXVswXSxsPXdbYl1bMV0sbT1jLnNvW2tdKzEsbj1jLnRvW2xdKzEsbz0tMT09Yy50b1tsXSYmaltiXVsxXTxqW2JdWzBdfHwxPT1jLnRvW2xdJiZqW2JdWzFdPmpbYl1bMF0scD1lW2JdW21dWzBdLHE9ZVtiXVttXVsxXSxyPWRbYl1bbV1bbl07cmV0dXJuIGMuc2VnbWVudD09clszXXx8Yy5zZWdtZW50PT1yWzJdJiZvP2ZbYl06Yy5zZWdtZW50PT1yWzJdJiZwPnE/Z1tiXTpjLnNlZ21lbnQ9PXJbMl0mJnE+PXB8fGMuc2VnbWVudD09clsxXSYmIW8/aVtiXTpjLnNlZ21lbnQ9PXJbMF18fGMuc2VnbWVudD09clsxXSYmbz9oW2JdOnZvaWQgMH0sb3J0aG9nb25hbDpmdW5jdGlvbihiLGMsZCxlLGYpe3ZhciBnPWEsaD17eDotMT09Zy5zb1swXT9NYXRoLm1pbihjLGUpOk1hdGgubWF4KGMsZSkseTotMT09Zy5zb1sxXT9NYXRoLm1pbihjLGUpOk1hdGgubWF4KGMsZSl9W2JdO3JldHVybnt4OltbaCxkXSxbaCxmXSxbZSxmXV0seTpbW2QsaF0sW2YsaF0sW2YsZV1dfVtiXX0sb3Bwb3NpdGU6ZnVuY3Rpb24oYyxkLGYsZyl7dmFyIGg9YSxpPXt4OlwieVwiLHk6XCJ4XCJ9W2NdLGo9e3g6XCJoZWlnaHRcIix5Olwid2lkdGhcIn1bY10saz1oW1wiaXNcIitjLnRvVXBwZXJDYXNlKCkrXCJHcmVhdGVyVGhhblN0dWJUaW1lczJcIl07aWYoYi5zb3VyY2VFbmRwb2ludC5lbGVtZW50SWQ9PWIudGFyZ2V0RW5kcG9pbnQuZWxlbWVudElkKXt2YXIgbD1mKygxLWIuc291cmNlRW5kcG9pbnQuYW5jaG9yW2ldKSpiLnNvdXJjZUluZm9bal0rZS5tYXhTdHViO3JldHVybnt4OltbZCxsXSxbZyxsXV0seTpbW2wsZF0sW2wsZ11dfVtjXX1yZXR1cm4ha3x8MT09aC5zb1tuXSYmZD5nfHwtMT09aC5zb1tuXSYmZz5kP3t4OltbZCx2XSxbZyx2XV0seTpbW3UsZF0sW3UsZ11dfVtjXToxPT1oLnNvW25dJiZnPmR8fC0xPT1oLnNvW25dJiZkPmc/e3g6W1t1LGguc3ldLFt1LGgudHldXSx5OltbaC5zeCx2XSxbaC50eCx2XV19W2NdOnZvaWQgMH19LHk9eFthLmFuY2hvck9yaWVudGF0aW9uXShhLnNvdXJjZUF4aXMscSxyLHMsdCk7aWYoeSlmb3IodmFyIHo9MDt6PHkubGVuZ3RoO3orKylsKGMseVt6XVswXSx5W3pdWzFdLGEpO2woYyxtWzJdLG1bM10sYSksbChjLGEudHgsYS50eSxhKSxvKHRoaXMsYyxhKX19O2MuZXh0ZW5kKGQsYi5Db25uZWN0b3JzLkFic3RyYWN0Q29ubmVjdG9yKSxiLnJlZ2lzdGVyQ29ubmVjdG9yVHlwZShkLFwiRmxvd2NoYXJ0XCIpfS5jYWxsKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OnRoaXMpLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGE9dGhpcyxiPWEuanNQbHVtYixjPWEuanNQbHVtYlV0aWw7Yi5Db25uZWN0b3JzLkFic3RyYWN0QmV6aWVyQ29ubmVjdG9yPWZ1bmN0aW9uKGEpe2E9YXx8e307dmFyIGMsZD1hLnNob3dMb29wYmFjayE9PSExLGU9KGEuY3VydmluZXNzfHwxMCxhLm1hcmdpbnx8NSksZj0oYS5wcm94aW1pdHlMaW1pdHx8ODAsYS5vcmllbnRhdGlvbiYmXCJjbG9ja3dpc2VcIj09PWEub3JpZW50YXRpb24pLGc9YS5sb29wYmFja1JhZGl1c3x8MjUsaD0hMTtyZXR1cm4gdGhpcy5vdmVycmlkZVNldEVkaXRhYmxlPWZ1bmN0aW9uKCl7cmV0dXJuIWh9LHRoaXMuX2NvbXB1dGU9ZnVuY3Rpb24oYSxiKXt2YXIgaT1iLnNvdXJjZVBvcyxqPWIudGFyZ2V0UG9zLGs9TWF0aC5hYnMoaVswXS1qWzBdKSxsPU1hdGguYWJzKGlbMV0talsxXSk7aWYoZCYmYi5zb3VyY2VFbmRwb2ludC5lbGVtZW50SWQ9PT1iLnRhcmdldEVuZHBvaW50LmVsZW1lbnRJZCl7aD0hMDt2YXIgbT1iLnNvdXJjZVBvc1swXSxuPWIuc291cmNlUG9zWzFdLWUsbz1tLHA9bi1nLHE9by1nLHI9cC1nO2s9MipnLGw9MipnLGEucG9pbnRzWzBdPXEsYS5wb2ludHNbMV09cixhLnBvaW50c1syXT1rLGEucG9pbnRzWzNdPWwsYy5hZGRTZWdtZW50KHRoaXMsXCJBcmNcIix7bG9vcGJhY2s6ITAseDE6bS1xKzQseTE6bi1yLHN0YXJ0QW5nbGU6MCxlbmRBbmdsZToyKk1hdGguUEkscjpnLGFjOiFmLHgyOm0tcS00LHkyOm4tcixjeDpvLXEsY3k6cC1yfSl9ZWxzZSBoPSExLHRoaXMuX2NvbXB1dGVCZXppZXIoYSxiLGksaixrLGwpfSxjPWIuQ29ubmVjdG9ycy5BYnN0cmFjdENvbm5lY3Rvci5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGMuZXh0ZW5kKGIuQ29ubmVjdG9ycy5BYnN0cmFjdEJlemllckNvbm5lY3RvcixiLkNvbm5lY3RvcnMuQWJzdHJhY3RDb25uZWN0b3IpO3ZhciBkPWZ1bmN0aW9uKGEpe2E9YXx8e30sdGhpcy50eXBlPVwiQmV6aWVyXCI7dmFyIGM9Yi5Db25uZWN0b3JzLkFic3RyYWN0QmV6aWVyQ29ubmVjdG9yLmFwcGx5KHRoaXMsYXJndW1lbnRzKSxkPWEuY3VydmluZXNzfHwxNTAsZT0xMDt0aGlzLmdldEN1cnZpbmVzcz1mdW5jdGlvbigpe3JldHVybiBkfSx0aGlzLl9maW5kQ29udHJvbFBvaW50PWZ1bmN0aW9uKGEsYixjLGYsZyxoLGkpe3ZhciBqPWhbMF0hPWlbMF18fGhbMV09PWlbMV0saz1bXTtyZXR1cm4gaj8oMD09PWlbMF0/ay5wdXNoKGNbMF08YlswXT9hWzBdK2U6YVswXS1lKTprLnB1c2goYVswXStkKmlbMF0pLDA9PT1pWzFdP2sucHVzaChjWzFdPGJbMV0/YVsxXStlOmFbMV0tZSk6ay5wdXNoKGFbMV0rZCpoWzFdKSk6KDA9PT1oWzBdP2sucHVzaChiWzBdPGNbMF0/YVswXStlOmFbMF0tZSk6ay5wdXNoKGFbMF0tZCpoWzBdKSwwPT09aFsxXT9rLnB1c2goYlsxXTxjWzFdP2FbMV0rZTphWzFdLWUpOmsucHVzaChhWzFdK2QqaVsxXSkpLGt9LHRoaXMuX2NvbXB1dGVCZXppZXI9ZnVuY3Rpb24oYSxiLGQsZSxmLGcpe3ZhciBoLGksaj10aGlzLmdldEdlb21ldHJ5KCksaz1kWzBdPGVbMF0/ZjowLGw9ZFsxXTxlWzFdP2c6MCxtPWRbMF08ZVswXT8wOmYsbj1kWzFdPGVbMV0/MDpnOyh0aGlzLmhhc0JlZW5FZGl0ZWQoKXx8dGhpcy5pc0VkaXRpbmcoKSkmJm51bGwhPWomJm51bGwhPWouY29udHJvbFBvaW50cyYmbnVsbCE9ai5jb250cm9sUG9pbnRzWzBdJiZudWxsIT1qLmNvbnRyb2xQb2ludHNbMV0/KGg9ai5jb250cm9sUG9pbnRzWzBdLGk9ai5jb250cm9sUG9pbnRzWzFdKTooaD10aGlzLl9maW5kQ29udHJvbFBvaW50KFtrLGxdLGQsZSxiLnNvdXJjZUVuZHBvaW50LGIudGFyZ2V0RW5kcG9pbnQsYS5zbyxhLnRvKSxpPXRoaXMuX2ZpbmRDb250cm9sUG9pbnQoW20sbl0sZSxkLGIudGFyZ2V0RW5kcG9pbnQsYi5zb3VyY2VFbmRwb2ludCxhLnRvLGEuc28pKSxjLnNldEdlb21ldHJ5KHtjb250cm9sUG9pbnRzOltoLGldfSwhMCksYy5hZGRTZWdtZW50KHRoaXMsXCJCZXppZXJcIix7eDE6ayx5MTpsLHgyOm0seTI6bixjcDF4OmhbMF0sY3AxeTpoWzFdLGNwMng6aVswXSxjcDJ5OmlbMV19KX19O2MuZXh0ZW5kKGQsYi5Db25uZWN0b3JzLkFic3RyYWN0QmV6aWVyQ29ubmVjdG9yKSxiLnJlZ2lzdGVyQ29ubmVjdG9yVHlwZShkLFwiQmV6aWVyXCIpfS5jYWxsKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OnRoaXMpLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGE9dGhpcyxiPWEuanNQbHVtYixjPWEuanNQbHVtYlV0aWwsZD1mdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gYz49YSYmYj49ZD8xOmM+PWEmJmQ+PWI/MjphPj1jJiZkPj1iPzM6NH0sZT1mdW5jdGlvbihhLGIsYyxkLGUsZixnLGgsaSl7cmV0dXJuIGk+PWg/W2EsYl06MT09PWM/ZFszXTw9MCYmZVszXT49MT9bYSsoZFsyXTwuNT8tMSpmOmYpLGJdOmRbMl0+PTEmJmVbMl08PTA/W2EsYisoZFszXTwuNT8tMSpnOmcpXTpbYSstMSpmLGIrLTEqZ106Mj09PWM/ZFszXT49MSYmZVszXTw9MD9bYSsoZFsyXTwuNT8tMSpmOmYpLGJdOmRbMl0+PTEmJmVbMl08PTA/W2EsYisoZFszXTwuNT8tMSpnOmcpXTpbYStmLGIrLTEqZ106Mz09PWM/ZFszXT49MSYmZVszXTw9MD9bYSsoZFsyXTwuNT8tMSpmOmYpLGJdOmRbMl08PTAmJmVbMl0+PTE/W2EsYisoZFszXTwuNT8tMSpnOmcpXTpbYSstMSpmLGIrLTEqZ106ND09PWM/ZFszXTw9MCYmZVszXT49MT9bYSsoZFsyXTwuNT8tMSpmOmYpLGJdOmRbMl08PTAmJmVbMl0+PTE/W2EsYisoZFszXTwuNT8tMSpnOmcpXTpbYStmLGIrLTEqZ106dm9pZCAwfSxmPWZ1bmN0aW9uKGEpe2E9YXx8e30sdGhpcy50eXBlPVwiU3RhdGVNYWNoaW5lXCI7dmFyIGMsZj1iLkNvbm5lY3RvcnMuQWJzdHJhY3RCZXppZXJDb25uZWN0b3IuYXBwbHkodGhpcyxhcmd1bWVudHMpLGc9YS5jdXJ2aW5lc3N8fDEwLGg9YS5tYXJnaW58fDUsaT1hLnByb3hpbWl0eUxpbWl0fHw4MDthLm9yaWVudGF0aW9uJiZcImNsb2Nrd2lzZVwiPT09YS5vcmllbnRhdGlvbix0aGlzLl9jb21wdXRlQmV6aWVyPWZ1bmN0aW9uKGEsYixqLGssbCxtKXt2YXIgbj1iLnNvdXJjZVBvc1swXTxiLnRhcmdldFBvc1swXT8wOmwsbz1iLnNvdXJjZVBvc1sxXTxiLnRhcmdldFBvc1sxXT8wOm0scD1iLnNvdXJjZVBvc1swXTxiLnRhcmdldFBvc1swXT9sOjAscT1iLnNvdXJjZVBvc1sxXTxiLnRhcmdldFBvc1sxXT9tOjA7MD09PWIuc291cmNlUG9zWzJdJiYobi09aCksMT09PWIuc291cmNlUG9zWzJdJiYobis9aCksMD09PWIuc291cmNlUG9zWzNdJiYoby09aCksMT09PWIuc291cmNlUG9zWzNdJiYobys9aCksMD09PWIudGFyZ2V0UG9zWzJdJiYocC09aCksMT09PWIudGFyZ2V0UG9zWzJdJiYocCs9aCksMD09PWIudGFyZ2V0UG9zWzNdJiYocS09aCksMT09PWIudGFyZ2V0UG9zWzNdJiYocSs9aCk7dmFyIHIscyx0LHUsdj0obitwKS8yLHc9KG8rcSkvMix4PWQobixvLHAscSkseT1NYXRoLnNxcnQoTWF0aC5wb3cocC1uLDIpK01hdGgucG93KHEtbywyKSksej1mLmdldEdlb21ldHJ5KCk7KHRoaXMuaGFzQmVlbkVkaXRlZCgpfHx0aGlzLmlzRWRpdGluZygpKSYmbnVsbCE9ej8ocj16LmNvbnRyb2xQb2ludHNbMF1bMF0sdD16LmNvbnRyb2xQb2ludHNbMF1bMV0scz16LmNvbnRyb2xQb2ludHNbMV1bMF0sdT16LmNvbnRyb2xQb2ludHNbMV1bMV0pOihjPWUodix3LHgsYi5zb3VyY2VQb3MsYi50YXJnZXRQb3MsZyxnLHksaSkscj1jWzBdLHM9Y1swXSx0PWNbMV0sdT1jWzFdLGYuc2V0R2VvbWV0cnkoe2NvbnRyb2xQb2ludHM6W2MsY119LCEwKSksZi5hZGRTZWdtZW50KHRoaXMsXCJCZXppZXJcIix7eDE6cCx5MTpxLHgyOm4seTI6byxjcDF4OnIsY3AxeTp0LGNwMng6cyxjcDJ5OnV9KX19O2MuZXh0ZW5kKGYsYi5Db25uZWN0b3JzLkFic3RyYWN0QmV6aWVyQ29ubmVjdG9yKSxiLnJlZ2lzdGVyQ29ubmVjdG9yVHlwZShmLFwiU3RhdGVNYWNoaW5lXCIpfS5jYWxsKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OnRoaXMpLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGE9dGhpcyxiPWEuanNQbHVtYixjPWEuanNQbHVtYlV0aWwsZD1cIlN0cmFpZ2h0XCIsZT1mdW5jdGlvbigpe3RoaXMudHlwZT1kO3ZhciBhPWIuQ29ubmVjdG9ycy5BYnN0cmFjdENvbm5lY3Rvci5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dGhpcy5fY29tcHV0ZT1mdW5jdGlvbihiKXthLmFkZFNlZ21lbnQodGhpcyxkLHt4MTpiLnN4LHkxOmIuc3kseDI6Yi5zdGFydFN0dWJYLHkyOmIuc3RhcnRTdHViWX0pLGEuYWRkU2VnbWVudCh0aGlzLGQse3gxOmIuc3RhcnRTdHViWCx5MTpiLnN0YXJ0U3R1YlkseDI6Yi5lbmRTdHViWCx5MjpiLmVuZFN0dWJZfSksYS5hZGRTZWdtZW50KHRoaXMsZCx7eDE6Yi5lbmRTdHViWCx5MTpiLmVuZFN0dWJZLHgyOmIudHgseTI6Yi50eX0pfX07Yy5leHRlbmQoZSxiLkNvbm5lY3RvcnMuQWJzdHJhY3RDb25uZWN0b3IpLGIucmVnaXN0ZXJDb25uZWN0b3JUeXBlKGUsZCl9LmNhbGwoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dGhpcyksZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgYT10aGlzLGI9YS5qc1BsdW1iLGM9YS5qc1BsdW1iVXRpbCxkPXtcInN0cm9rZS1saW5lam9pblwiOlwic3Ryb2tlLWxpbmVqb2luXCIsXCJzdHJva2UtZGFzaG9mZnNldFwiOlwic3Ryb2tlLWRhc2hvZmZzZXRcIixcInN0cm9rZS1saW5lY2FwXCI6XCJzdHJva2UtbGluZWNhcFwifSxlPVwic3Ryb2tlLWRhc2hhcnJheVwiLGY9XCJkYXNoc3R5bGVcIixnPVwibGluZWFyR3JhZGllbnRcIixoPVwicmFkaWFsR3JhZGllbnRcIixpPVwiZGVmc1wiLGo9XCJmaWxsXCIsaz1cInN0b3BcIixsPVwic3Ryb2tlXCIsbT1cInN0cm9rZS13aWR0aFwiLG49XCJzdHlsZVwiLG89XCJub25lXCIscD1cImpzcGx1bWJfZ3JhZGllbnRfXCIscT1cInN0cm9rZVdpZHRoXCIscj17c3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIix4aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn0scz1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYyBpbiBiKWEuc2V0QXR0cmlidXRlKGMsXCJcIitiW2NdKX0sdD1mdW5jdGlvbihhLGMpe3JldHVybiBjPWN8fHt9LGMudmVyc2lvbj1cIjEuMVwiLGMueG1sbnM9ci54aHRtbCxiLmNyZWF0ZUVsZW1lbnROUyhyLnN2ZyxhLG51bGwsbnVsbCxjKX0sdT1mdW5jdGlvbihhKXtyZXR1cm5cInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6XCIrYVswXStcInB4O3RvcDpcIithWzFdK1wicHhcIn0sdj1mdW5jdGlvbihhKXtmb3IodmFyIGI9YS5xdWVyeVNlbGVjdG9yQWxsKFwiIGRlZnMsbGluZWFyR3JhZGllbnQscmFkaWFsR3JhZGllbnRcIiksYz0wO2M8Yi5sZW5ndGg7YysrKWJbY10ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiW2NdKX0sdz1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPXArZS5fanNQbHVtYi5pbnN0YW5jZS5pZHN0YW1wKCk7dihhKTt2YXIgbTttPWMuZ3JhZGllbnQub2Zmc2V0P3QoaCx7aWQ6Zn0pOnQoZyx7aWQ6ZixncmFkaWVudFVuaXRzOlwidXNlclNwYWNlT25Vc2VcIn0pO3ZhciBuPXQoaSk7YS5hcHBlbmRDaGlsZChuKSxuLmFwcGVuZENoaWxkKG0pO2Zvcih2YXIgbz0wO288Yy5ncmFkaWVudC5zdG9wcy5sZW5ndGg7bysrKXt2YXIgcT0xPT1lLnNlZ21lbnR8fDI9PWUuc2VnbWVudD9vOmMuZ3JhZGllbnQuc3RvcHMubGVuZ3RoLTEtbyxyPWMuZ3JhZGllbnQuc3RvcHNbcV1bMV0scz10KGsse29mZnNldDpNYXRoLmZsb29yKDEwMCpjLmdyYWRpZW50LnN0b3BzW29dWzBdKStcIiVcIixcInN0b3AtY29sb3JcIjpyfSk7bS5hcHBlbmRDaGlsZChzKX12YXIgdT1jLnN0cm9rZT9sOmo7Yi5zZXRBdHRyaWJ1dGUodSxcInVybCgjXCIrZitcIilcIil9LHg9ZnVuY3Rpb24oYSxiLGMsZyxoKXtpZihiLnNldEF0dHJpYnV0ZShqLGMuZmlsbD9jLmZpbGw6byksYi5zZXRBdHRyaWJ1dGUobCxjLnN0cm9rZT9jLnN0cm9rZTpvKSxjLmdyYWRpZW50P3coYSxiLGMsZyxoKToodihhKSxiLnNldEF0dHJpYnV0ZShuLFwiXCIpKSxjLnN0cm9rZVdpZHRoJiZiLnNldEF0dHJpYnV0ZShtLGMuc3Ryb2tlV2lkdGgpLGNbZl0mJmNbcV0mJiFjW2VdKXt2YXIgaT0tMT09Y1tmXS5pbmRleE9mKFwiLFwiKT9cIiBcIjpcIixcIixrPWNbZl0uc3BsaXQoaSkscD1cIlwiO2suZm9yRWFjaChmdW5jdGlvbihhKXtwKz1NYXRoLmZsb29yKGEqYy5zdHJva2VXaWR0aCkraX0pLGIuc2V0QXR0cmlidXRlKGUscCl9ZWxzZSBjW2VdJiZiLnNldEF0dHJpYnV0ZShlLGNbZV0pO2Zvcih2YXIgciBpbiBkKWNbcl0mJmIuc2V0QXR0cmlidXRlKGRbcl0sY1tyXSl9LHk9ZnVuY3Rpb24oYSxiLGMpe2EuY2hpbGROb2Rlcy5sZW5ndGg+Yz9hLmluc2VydEJlZm9yZShiLGEuY2hpbGROb2Rlc1tjXSk6YS5hcHBlbmRDaGlsZChiKX07Yy5zdmc9e25vZGU6dCxhdHRyOnMscG9zOnV9O3ZhciB6PWZ1bmN0aW9uKGEpe3ZhciBkPWEucG9pbnRlckV2ZW50c1NwZWN8fFwiYWxsXCIsZT17fTtiLmpzUGx1bWJVSUNvbXBvbmVudC5hcHBseSh0aGlzLGEub3JpZ2luYWxBcmdzKSx0aGlzLmNhbnZhcz1udWxsLHRoaXMucGF0aD1udWxsLHRoaXMuc3ZnPW51bGwsdGhpcy5iZ0NhbnZhcz1udWxsO3ZhciBmPWEuY3NzQ2xhc3MrXCIgXCIrKGEub3JpZ2luYWxBcmdzWzBdLmNzc0NsYXNzfHxcIlwiKSxnPXtzdHlsZTpcIlwiLHdpZHRoOjAsaGVpZ2h0OjAsXCJwb2ludGVyLWV2ZW50c1wiOmQscG9zaXRpb246XCJhYnNvbHV0ZVwifTt0aGlzLnN2Zz10KFwic3ZnXCIsZyksYS51c2VEaXZXcmFwcGVyPyh0aGlzLmNhbnZhcz1iLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7cG9zaXRpb246XCJhYnNvbHV0ZVwifSksYy5zaXplRWxlbWVudCh0aGlzLmNhbnZhcywwLDAsMSwxKSx0aGlzLmNhbnZhcy5jbGFzc05hbWU9Zik6KHModGhpcy5zdmcse1wiY2xhc3NcIjpmfSksdGhpcy5jYW52YXM9dGhpcy5zdmcpLGEuX2pzUGx1bWIuYXBwZW5kRWxlbWVudCh0aGlzLmNhbnZhcyxhLm9yaWdpbmFsQXJnc1swXS5wYXJlbnQpLGEudXNlRGl2V3JhcHBlciYmdGhpcy5jYW52YXMuYXBwZW5kQ2hpbGQodGhpcy5zdmcpO3ZhciBoPVt0aGlzLmNhbnZhc107cmV0dXJuIHRoaXMuZ2V0RGlzcGxheUVsZW1lbnRzPWZ1bmN0aW9uKCl7cmV0dXJuIGh9LHRoaXMuYXBwZW5kRGlzcGxheUVsZW1lbnQ9ZnVuY3Rpb24oYSl7aC5wdXNoKGEpfSx0aGlzLnBhaW50PWZ1bmN0aW9uKGIsZCxmKXtpZihudWxsIT1iKXt2YXIgZyxoPVt0aGlzLngsdGhpcy55XSxpPVt0aGlzLncsdGhpcy5oXTtudWxsIT1mJiYoZi54bWluPDAmJihoWzBdKz1mLnhtaW4pLGYueW1pbjwwJiYoaFsxXSs9Zi55bWluKSxpWzBdPWYueG1heCsoZi54bWluPDA/LWYueG1pbjowKSxpWzFdPWYueW1heCsoZi55bWluPDA/LWYueW1pbjowKSksYS51c2VEaXZXcmFwcGVyPyhjLnNpemVFbGVtZW50KHRoaXMuY2FudmFzLGhbMF0saFsxXSxpWzBdLGlbMV0pLGhbMF09MCxoWzFdPTAsZz11KFswLDBdKSk6Zz11KFtoWzBdLGhbMV1dKSxlLnBhaW50LmFwcGx5KHRoaXMsYXJndW1lbnRzKSxzKHRoaXMuc3ZnLHtzdHlsZTpnLHdpZHRoOmlbMF18fDAsaGVpZ2h0OmlbMV18fDB9KX19LHtyZW5kZXJlcjplfX07Yy5leHRlbmQoeixiLmpzUGx1bWJVSUNvbXBvbmVudCx7Y2xlYW51cDpmdW5jdGlvbihhKXthfHxudWxsPT10aGlzLnR5cGVJZD8odGhpcy5jYW52YXMmJih0aGlzLmNhbnZhcy5fanNQbHVtYj1udWxsKSx0aGlzLnN2ZyYmKHRoaXMuc3ZnLl9qc1BsdW1iPW51bGwpLHRoaXMuYmdDYW52YXMmJih0aGlzLmJnQ2FudmFzLl9qc1BsdW1iPW51bGwpLHRoaXMuY2FudmFzJiZ0aGlzLmNhbnZhcy5wYXJlbnROb2RlJiZ0aGlzLmNhbnZhcy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuY2FudmFzKSx0aGlzLmJnQ2FudmFzJiZ0aGlzLmJnQ2FudmFzLnBhcmVudE5vZGUmJnRoaXMuY2FudmFzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5jYW52YXMpLHRoaXMuc3ZnPW51bGwsdGhpcy5jYW52YXM9bnVsbCx0aGlzLnBhdGg9bnVsbCx0aGlzLmdyb3VwPW51bGwpOih0aGlzLmNhbnZhcyYmdGhpcy5jYW52YXMucGFyZW50Tm9kZSYmdGhpcy5jYW52YXMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmNhbnZhcyksdGhpcy5iZ0NhbnZhcyYmdGhpcy5iZ0NhbnZhcy5wYXJlbnROb2RlJiZ0aGlzLmJnQ2FudmFzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5iZ0NhbnZhcykpfSxyZWF0dGFjaDpmdW5jdGlvbihhKXt2YXIgYj1hLmdldENvbnRhaW5lcigpO3RoaXMuY2FudmFzJiZudWxsPT10aGlzLmNhbnZhcy5wYXJlbnROb2RlJiZiLmFwcGVuZENoaWxkKHRoaXMuY2FudmFzKSx0aGlzLmJnQ2FudmFzJiZudWxsPT10aGlzLmJnQ2FudmFzLnBhcmVudE5vZGUmJmIuYXBwZW5kQ2hpbGQodGhpcy5iZ0NhbnZhcyl9LHNldFZpc2libGU6ZnVuY3Rpb24oYSl7dGhpcy5jYW52YXMmJih0aGlzLmNhbnZhcy5zdHlsZS5kaXNwbGF5PWE/XCJibG9ja1wiOlwibm9uZVwiKX19KSxiLkNvbm5lY3RvclJlbmRlcmVycy5zdmc9ZnVuY3Rpb24oYSl7dmFyIGM9dGhpcyxkPXouYXBwbHkodGhpcyxbe2Nzc0NsYXNzOmEuX2pzUGx1bWIuY29ubmVjdG9yQ2xhc3MrKHRoaXMuaXNFZGl0YWJsZSgpP1wiIFwiK2EuX2pzUGx1bWIuZWRpdGFibGVDb25uZWN0b3JDbGFzczpcIlwiKSxvcmlnaW5hbEFyZ3M6YXJndW1lbnRzLHBvaW50ZXJFdmVudHNTcGVjOlwibm9uZVwiLF9qc1BsdW1iOmEuX2pzUGx1bWJ9XSksZT10aGlzLnNldEVkaXRhYmxlO3RoaXMuc2V0RWRpdGFibGU9ZnVuY3Rpb24oYSl7dmFyIGM9ZS5hcHBseSh0aGlzLFthXSk7YltjP1wiYWRkQ2xhc3NcIjpcInJlbW92ZUNsYXNzXCJdKHRoaXMuY2FudmFzLHRoaXMuX2pzUGx1bWIuaW5zdGFuY2UuZWRpdGFibGVDb25uZWN0b3JDbGFzcyl9LGQucmVuZGVyZXIucGFpbnQ9ZnVuY3Rpb24oZCxlLGYpe3ZhciBnPWMuZ2V0U2VnbWVudHMoKSxoPVwiXCIsaT1bMCwwXTtpZihmLnhtaW48MCYmKGlbMF09LWYueG1pbiksZi55bWluPDAmJihpWzFdPS1mLnltaW4pLGcubGVuZ3RoPjApe2g9Yy5nZXRQYXRoRGF0YSgpO3ZhciBqPXtkOmgsdHJhbnNmb3JtOlwidHJhbnNsYXRlKFwiK2lbMF0rXCIsXCIraVsxXStcIilcIixcInBvaW50ZXItZXZlbnRzXCI6YVtcInBvaW50ZXItZXZlbnRzXCJdfHxcInZpc2libGVTdHJva2VcIn0saz1udWxsLGw9W2MueCxjLnksYy53LGMuaF07aWYoZC5vdXRsaW5lU3Ryb2tlKXt2YXIgbT1kLm91dGxpbmVXaWR0aHx8MSxuPWQuc3Ryb2tlV2lkdGgrMiptO2s9Yi5leHRlbmQoe30sZCksZGVsZXRlIGsuZ3JhZGllbnQsay5zdHJva2U9ZC5vdXRsaW5lU3Ryb2tlLGsuc3Ryb2tlV2lkdGg9bixudWxsPT1jLmJnUGF0aD8oYy5iZ1BhdGg9dChcInBhdGhcIixqKSxiLmFkZENsYXNzKGMuYmdQYXRoLGIuY29ubmVjdG9yT3V0bGluZUNsYXNzKSx5KGMuc3ZnLGMuYmdQYXRoLDApKTpzKGMuYmdQYXRoLGopLHgoYy5zdmcsYy5iZ1BhdGgsayxsLGMpfW51bGw9PWMucGF0aD8oYy5wYXRoPXQoXCJwYXRoXCIsaikseShjLnN2ZyxjLnBhdGgsZC5vdXRsaW5lU3Ryb2tlPzE6MCkpOnMoYy5wYXRoLGopLHgoYy5zdmcsYy5wYXRoLGQsbCxjKX19fSxjLmV4dGVuZChiLkNvbm5lY3RvclJlbmRlcmVycy5zdmcseik7dmFyIEE9Yi5TdmdFbmRwb2ludD1mdW5jdGlvbihhKXt2YXIgYz16LmFwcGx5KHRoaXMsW3tjc3NDbGFzczphLl9qc1BsdW1iLmVuZHBvaW50Q2xhc3Msb3JpZ2luYWxBcmdzOmFyZ3VtZW50cyxwb2ludGVyRXZlbnRzU3BlYzpcImFsbFwiLHVzZURpdldyYXBwZXI6ITAsX2pzUGx1bWI6YS5fanNQbHVtYn1dKTtjLnJlbmRlcmVyLnBhaW50PWZ1bmN0aW9uKGEpe3ZhciBjPWIuZXh0ZW5kKHt9LGEpO2Mub3V0bGluZVN0cm9rZSYmKGMuc3Ryb2tlV2lkdGg9Yy5zdHJva2VXaWR0aCxjLnN0cm9rZT1jLm91dGxpbmVTdHJva2UpLG51bGw9PXRoaXMubm9kZT8odGhpcy5ub2RlPXRoaXMubWFrZU5vZGUoYyksdGhpcy5zdmcuYXBwZW5kQ2hpbGQodGhpcy5ub2RlKSk6bnVsbCE9dGhpcy51cGRhdGVOb2RlJiZ0aGlzLnVwZGF0ZU5vZGUodGhpcy5ub2RlKSx4KHRoaXMuc3ZnLHRoaXMubm9kZSxjLFt0aGlzLngsdGhpcy55LHRoaXMudyx0aGlzLmhdLHRoaXMpLHUodGhpcy5ub2RlLFt0aGlzLngsdGhpcy55XSl9LmJpbmQodGhpcyl9O2MuZXh0ZW5kKEEseiksYi5FbmRwb2ludHMuc3ZnLkRvdD1mdW5jdGlvbigpe2IuRW5kcG9pbnRzLkRvdC5hcHBseSh0aGlzLGFyZ3VtZW50cyksQS5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy5tYWtlTm9kZT1mdW5jdGlvbigpe3JldHVybiB0KFwiY2lyY2xlXCIse2N4OnRoaXMudy8yLGN5OnRoaXMuaC8yLHI6dGhpcy5yYWRpdXN9KX0sdGhpcy51cGRhdGVOb2RlPWZ1bmN0aW9uKGEpe3MoYSx7Y3g6dGhpcy53LzIsY3k6dGhpcy5oLzIscjp0aGlzLnJhZGl1c30pfX0sYy5leHRlbmQoYi5FbmRwb2ludHMuc3ZnLkRvdCxbYi5FbmRwb2ludHMuRG90LEFdKSxiLkVuZHBvaW50cy5zdmcuUmVjdGFuZ2xlPWZ1bmN0aW9uKCl7Yi5FbmRwb2ludHMuUmVjdGFuZ2xlLmFwcGx5KHRoaXMsYXJndW1lbnRzKSxBLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLm1ha2VOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIHQoXCJyZWN0XCIse3dpZHRoOnRoaXMudyxoZWlnaHQ6dGhpcy5ofSl9LHRoaXMudXBkYXRlTm9kZT1mdW5jdGlvbihhKXtzKGEse3dpZHRoOnRoaXMudyxoZWlnaHQ6dGhpcy5ofSl9fSxjLmV4dGVuZChiLkVuZHBvaW50cy5zdmcuUmVjdGFuZ2xlLFtiLkVuZHBvaW50cy5SZWN0YW5nbGUsQV0pLGIuRW5kcG9pbnRzLnN2Zy5JbWFnZT1iLkVuZHBvaW50cy5JbWFnZSxiLkVuZHBvaW50cy5zdmcuQmxhbms9Yi5FbmRwb2ludHMuQmxhbmssYi5PdmVybGF5cy5zdmcuTGFiZWw9Yi5PdmVybGF5cy5MYWJlbCxiLk92ZXJsYXlzLnN2Zy5DdXN0b209Yi5PdmVybGF5cy5DdXN0b207dmFyIEI9ZnVuY3Rpb24oYSxjKXthLmFwcGx5KHRoaXMsYyksYi5qc1BsdW1iVUlDb21wb25lbnQuYXBwbHkodGhpcyxjKSx0aGlzLmlzQXBwZW5kZWRBdFRvcExldmVsPSExLHRoaXMucGF0aD1udWxsLHRoaXMucGFpbnQ9ZnVuY3Rpb24oYSxiKXtpZihhLmNvbXBvbmVudC5zdmcmJmIpe251bGw9PXRoaXMucGF0aCYmKHRoaXMucGF0aD10KFwicGF0aFwiLHtcInBvaW50ZXItZXZlbnRzXCI6XCJhbGxcIn0pLGEuY29tcG9uZW50LnN2Zy5hcHBlbmRDaGlsZCh0aGlzLnBhdGgpLHRoaXMuZWxlbWVudENyZWF0ZWQmJnRoaXMuZWxlbWVudENyZWF0ZWQodGhpcy5wYXRoLGEuY29tcG9uZW50KSx0aGlzLmNhbnZhcz1hLmNvbXBvbmVudC5zdmcpO3ZhciBlPWMmJjE9PWMubGVuZ3RoP2NbMF0uY3NzQ2xhc3N8fFwiXCI6XCJcIixmPVswLDBdO2IueG1pbjwwJiYoZlswXT0tYi54bWluKSxiLnltaW48MCYmKGZbMV09LWIueW1pbikscyh0aGlzLnBhdGgse2Q6ZChhLmQpLFwiY2xhc3NcIjplLHN0cm9rZTphLnN0cm9rZT9hLnN0cm9rZTpudWxsLGZpbGw6YS5maWxsP2EuZmlsbDpudWxsLHRyYW5zZm9ybTpcInRyYW5zbGF0ZShcIitmWzBdK1wiLFwiK2ZbMV0rXCIpXCJ9KX19O3ZhciBkPWZ1bmN0aW9uKGEpe3JldHVybiBpc05hTihhLmN4eS54KXx8aXNOYU4oYS5jeHkueSk/XCJcIjpcIk1cIithLmh4eS54K1wiLFwiK2EuaHh5LnkrXCIgTFwiK2EudGFpbFswXS54K1wiLFwiK2EudGFpbFswXS55K1wiIExcIithLmN4eS54K1wiLFwiK2EuY3h5LnkrXCIgTFwiK2EudGFpbFsxXS54K1wiLFwiK2EudGFpbFsxXS55K1wiIExcIithLmh4eS54K1wiLFwiK2EuaHh5Lnl9O3RoaXMudHJhbnNmZXI9ZnVuY3Rpb24oYSl7YS5jYW52YXMmJnRoaXMucGF0aCYmdGhpcy5wYXRoLnBhcmVudE5vZGUmJih0aGlzLnBhdGgucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnBhdGgpLGEuY2FudmFzLmFwcGVuZENoaWxkKHRoaXMucGF0aCkpfX07Yy5leHRlbmQoQixbYi5qc1BsdW1iVUlDb21wb25lbnQsYi5PdmVybGF5cy5BYnN0cmFjdE92ZXJsYXldLHtjbGVhbnVwOmZ1bmN0aW9uKGEpe251bGwhPXRoaXMucGF0aCYmKGE/dGhpcy5fanNQbHVtYi5pbnN0YW5jZS5yZW1vdmVFbGVtZW50KHRoaXMucGF0aCk6dGhpcy5wYXRoLnBhcmVudE5vZGUmJnRoaXMucGF0aC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucGF0aCkpfSxyZWF0dGFjaDpmdW5jdGlvbigpe3RoaXMucGF0aCYmdGhpcy5jYW52YXMmJm51bGw9PXRoaXMucGF0aC5wYXJlbnROb2RlJiZ0aGlzLmNhbnZhcy5hcHBlbmRDaGlsZCh0aGlzLnBhdGgpfSxzZXRWaXNpYmxlOmZ1bmN0aW9uKGEpe251bGwhPXRoaXMucGF0aCYmKHRoaXMucGF0aC5zdHlsZS5kaXNwbGF5PWE/XCJibG9ja1wiOlwibm9uZVwiKX19KSxiLk92ZXJsYXlzLnN2Zy5BcnJvdz1mdW5jdGlvbigpe0IuYXBwbHkodGhpcyxbYi5PdmVybGF5cy5BcnJvdyxhcmd1bWVudHNdKX0sYy5leHRlbmQoYi5PdmVybGF5cy5zdmcuQXJyb3csW2IuT3ZlcmxheXMuQXJyb3csQl0pLGIuT3ZlcmxheXMuc3ZnLlBsYWluQXJyb3c9ZnVuY3Rpb24oKXtCLmFwcGx5KHRoaXMsW2IuT3ZlcmxheXMuUGxhaW5BcnJvdyxhcmd1bWVudHNdKX0sYy5leHRlbmQoYi5PdmVybGF5cy5zdmcuUGxhaW5BcnJvdyxbYi5PdmVybGF5cy5QbGFpbkFycm93LEJdKSxiLk92ZXJsYXlzLnN2Zy5EaWFtb25kPWZ1bmN0aW9uKCl7Qi5hcHBseSh0aGlzLFtiLk92ZXJsYXlzLkRpYW1vbmQsYXJndW1lbnRzXSlcbn0sYy5leHRlbmQoYi5PdmVybGF5cy5zdmcuRGlhbW9uZCxbYi5PdmVybGF5cy5EaWFtb25kLEJdKSxiLk92ZXJsYXlzLnN2Zy5HdWlkZUxpbmVzPWZ1bmN0aW9uKCl7dmFyIGEsYyxkPW51bGwsZT10aGlzO2IuT3ZlcmxheXMuR3VpZGVMaW5lcy5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy5wYWludD1mdW5jdGlvbihiLGcpe251bGw9PWQmJihkPXQoXCJwYXRoXCIpLGIuY29ubmVjdG9yLnN2Zy5hcHBlbmRDaGlsZChkKSxlLmF0dGFjaExpc3RlbmVycyhkLGIuY29ubmVjdG9yKSxlLmF0dGFjaExpc3RlbmVycyhkLGUpLGE9dChcInBhdGhcIiksYi5jb25uZWN0b3Iuc3ZnLmFwcGVuZENoaWxkKGEpLGUuYXR0YWNoTGlzdGVuZXJzKGEsYi5jb25uZWN0b3IpLGUuYXR0YWNoTGlzdGVuZXJzKGEsZSksYz10KFwicGF0aFwiKSxiLmNvbm5lY3Rvci5zdmcuYXBwZW5kQ2hpbGQoYyksZS5hdHRhY2hMaXN0ZW5lcnMoYyxiLmNvbm5lY3RvciksZS5hdHRhY2hMaXN0ZW5lcnMoYyxlKSk7dmFyIGg9WzAsMF07Zy54bWluPDAmJihoWzBdPS1nLnhtaW4pLGcueW1pbjwwJiYoaFsxXT0tZy55bWluKSxzKGQse2Q6ZihiLmhlYWQsYi50YWlsKSxzdHJva2U6XCJyZWRcIixmaWxsOm51bGwsdHJhbnNmb3JtOlwidHJhbnNsYXRlKFwiK2hbMF0rXCIsXCIraFsxXStcIilcIn0pLHMoYSx7ZDpmKGIudGFpbExpbmVbMF0sYi50YWlsTGluZVsxXSksc3Ryb2tlOlwiYmx1ZVwiLGZpbGw6bnVsbCx0cmFuc2Zvcm06XCJ0cmFuc2xhdGUoXCIraFswXStcIixcIitoWzFdK1wiKVwifSkscyhjLHtkOmYoYi5oZWFkTGluZVswXSxiLmhlYWRMaW5lWzFdKSxzdHJva2U6XCJncmVlblwiLGZpbGw6bnVsbCx0cmFuc2Zvcm06XCJ0cmFuc2xhdGUoXCIraFswXStcIixcIitoWzFdK1wiKVwifSl9O3ZhciBmPWZ1bmN0aW9uKGEsYil7cmV0dXJuXCJNIFwiK2EueCtcIixcIithLnkrXCIgTFwiK2IueCtcIixcIitiLnl9fSxjLmV4dGVuZChiLk92ZXJsYXlzLnN2Zy5HdWlkZUxpbmVzLGIuT3ZlcmxheXMuR3VpZGVMaW5lcyl9LmNhbGwoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dGhpcyksZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgYT10aGlzLGI9YS5qc1BsdW1iLGM9YS5qc1BsdW1iVXRpbCxkPWEuS2F0YXZvcmlvLGU9YS5CaWx0b25nLGY9ZnVuY3Rpb24oYSxjKXtjPWN8fFwibWFpblwiO3ZhciBmPVwiX2thdGF2b3Jpb19cIitjLGc9YVtmXSxoPWEuZ2V0RXZlbnRNYW5hZ2VyKCk7cmV0dXJuIGd8fChnPW5ldyBkKHtiaW5kOmgub24sdW5iaW5kOmgub2ZmLGdldFNpemU6Yi5nZXRTaXplLGdldFBvc2l0aW9uOmZ1bmN0aW9uKGIsYyl7dmFyIGQ9YS5nZXRPZmZzZXQoYixjLGIuX2thdGF2b3Jpb0RyYWc/Yi5vZmZzZXRQYXJlbnQ6bnVsbCk7cmV0dXJuW2QubGVmdCxkLnRvcF19LHNldFBvc2l0aW9uOmZ1bmN0aW9uKGEsYil7YS5zdHlsZS5sZWZ0PWJbMF0rXCJweFwiLGEuc3R5bGUudG9wPWJbMV0rXCJweFwifSxhZGRDbGFzczpiLmFkZENsYXNzLHJlbW92ZUNsYXNzOmIucmVtb3ZlQ2xhc3MsaW50ZXJzZWN0czplLmludGVyc2VjdHMsaW5kZXhPZjpmdW5jdGlvbihhLGIpe3JldHVybiBhLmluZGV4T2YoYil9LHNjb3BlOmEuZ2V0RGVmYXVsdFNjb3BlKCksY3NzOntub1NlbGVjdDphLmRyYWdTZWxlY3RDbGFzcyxkcm9wcGFibGU6XCJqdGstZHJvcHBhYmxlXCIsZHJhZ2dhYmxlOlwianRrLWRyYWdnYWJsZVwiLGRyYWc6XCJqdGstZHJhZ1wiLHNlbGVjdGVkOlwianRrLWRyYWctc2VsZWN0ZWRcIixhY3RpdmU6XCJqdGstZHJhZy1hY3RpdmVcIixob3ZlcjpcImp0ay1kcmFnLWhvdmVyXCIsZ2hvc3RQcm94eTpcImp0ay1naG9zdC1wcm94eVwifX0pLGFbZl09ZyxhLmJpbmQoXCJ6b29tXCIsZy5zZXRab29tKSksZ30sZz1mdW5jdGlvbihhLGIpe3ZhciBkPWZ1bmN0aW9uKGQpe2lmKG51bGwhPWJbZF0pe2lmKGMuaXNTdHJpbmcoYltkXSkpe3ZhciBlPWJbZF0ubWF0Y2goLy09Lyk/LTE6MSxmPWJbZF0uc3Vic3RyaW5nKDIpO3JldHVybiBhW2RdK2UqZn1yZXR1cm4gYltkXX1yZXR1cm4gYVtkXX07cmV0dXJuW2QoXCJsZWZ0XCIpLGQoXCJ0b3BcIildfTtiLmV4dGVuZChhLmpzUGx1bWJJbnN0YW5jZS5wcm90b3R5cGUse2FuaW1hdGlvblN1cHBvcnRlZDohMCxnZXRFbGVtZW50OmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hP251bGw6KGE9XCJzdHJpbmdcIj09dHlwZW9mIGE/YTpudWxsIT1hLmxlbmd0aCYmbnVsbD09YS5lbmN0eXBlP2FbMF06YSxcInN0cmluZ1wiPT10eXBlb2YgYT9kb2N1bWVudC5nZXRFbGVtZW50QnlJZChhKTphKX0scmVtb3ZlRWxlbWVudDpmdW5jdGlvbihhKXtmKHRoaXMpLmVsZW1lbnRSZW1vdmVkKGEpLHRoaXMuZ2V0RXZlbnRNYW5hZ2VyKCkucmVtb3ZlKGEpfSxkb0FuaW1hdGU6ZnVuY3Rpb24oYSxjLGQpe2Q9ZHx8e307dmFyIGU9dGhpcy5nZXRPZmZzZXQoYSksZj1nKGUsYyksaD1mWzBdLWUubGVmdCxpPWZbMV0tZS50b3Asaj1kLmR1cmF0aW9ufHwyNTAsaz0xNSxsPWovayxtPWsvaipoLG49ay9qKmksbz0wLHA9c2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtiLnNldFBvc2l0aW9uKGEse2xlZnQ6ZS5sZWZ0K20qKG8rMSksdG9wOmUudG9wK24qKG8rMSl9KSxudWxsIT1kLnN0ZXAmJmQuc3RlcChvLE1hdGguY2VpbChsKSksbysrLG8+PWwmJih3aW5kb3cuY2xlYXJJbnRlcnZhbChwKSxudWxsIT1kLmNvbXBsZXRlJiZkLmNvbXBsZXRlKCkpfSxrKX0sZGVzdHJveURyYWdnYWJsZTpmdW5jdGlvbihhLGIpe2YodGhpcyxiKS5kZXN0cm95RHJhZ2dhYmxlKGEpfSxkZXN0cm95RHJvcHBhYmxlOmZ1bmN0aW9uKGEsYil7Zih0aGlzLGIpLmRlc3Ryb3lEcm9wcGFibGUoYSl9LGluaXREcmFnZ2FibGU6ZnVuY3Rpb24oYSxiLGMpe2YodGhpcyxjKS5kcmFnZ2FibGUoYSxiKX0saW5pdERyb3BwYWJsZTpmdW5jdGlvbihhLGIsYyl7Zih0aGlzLGMpLmRyb3BwYWJsZShhLGIpfSxpc0FscmVhZHlEcmFnZ2FibGU6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGwhPWEuX2thdGF2b3Jpb0RyYWd9LGlzRHJhZ1N1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiEwfSxpc0Ryb3BTdXBwb3J0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMH0saXNFbGVtZW50RHJhZ2dhYmxlOmZ1bmN0aW9uKGEpe3JldHVybiBhPWIuZ2V0RWxlbWVudChhKSxhLl9rYXRhdm9yaW9EcmFnJiZhLl9rYXRhdm9yaW9EcmFnLmlzRW5hYmxlZCgpfSxnZXREcmFnT2JqZWN0OmZ1bmN0aW9uKGEpe3JldHVybiBhWzBdLmRyYWcuZ2V0RHJhZ0VsZW1lbnQoKX0sZ2V0RHJhZ1Njb3BlOmZ1bmN0aW9uKGEpe3JldHVybiBhLl9rYXRhdm9yaW9EcmFnJiZhLl9rYXRhdm9yaW9EcmFnLnNjb3Blcy5qb2luKFwiIFwiKXx8XCJcIn0sZ2V0RHJvcEV2ZW50OmZ1bmN0aW9uKGEpe3JldHVybiBhWzBdLmV9LGdldFVJUG9zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9YVswXS5lbDtpZihudWxsPT1iLm9mZnNldFBhcmVudClyZXR1cm4gbnVsbDt2YXIgYz1hWzBdLmZpbmFsUG9zfHxhWzBdLnBvcyxkPXtsZWZ0OmNbMF0sdG9wOmNbMV19O2lmKGIuX2thdGF2b3Jpb0RyYWcmJmIub2Zmc2V0UGFyZW50IT09dGhpcy5nZXRDb250YWluZXIoKSl7dmFyIGU9dGhpcy5nZXRPZmZzZXQoYi5vZmZzZXRQYXJlbnQpO2QubGVmdCs9ZS5sZWZ0LGQudG9wKz1lLnRvcH1yZXR1cm4gZH0sc2V0RHJhZ0ZpbHRlcjpmdW5jdGlvbihhLGIsYyl7YS5fa2F0YXZvcmlvRHJhZyYmYS5fa2F0YXZvcmlvRHJhZy5zZXRGaWx0ZXIoYixjKX0sc2V0RWxlbWVudERyYWdnYWJsZTpmdW5jdGlvbihhLGMpe2E9Yi5nZXRFbGVtZW50KGEpLGEuX2thdGF2b3Jpb0RyYWcmJmEuX2thdGF2b3Jpb0RyYWcuc2V0RW5hYmxlZChjKX0sc2V0RHJhZ1Njb3BlOmZ1bmN0aW9uKGEsYil7YS5fa2F0YXZvcmlvRHJhZyYmYS5fa2F0YXZvcmlvRHJhZy5rLnNldERyYWdTY29wZShhLGIpfSxzZXREcm9wU2NvcGU6ZnVuY3Rpb24oYSxiKXthLl9rYXRhdm9yaW9Ecm9wJiZhLl9rYXRhdm9yaW9Ecm9wLmxlbmd0aD4wJiZhLl9rYXRhdm9yaW9Ecm9wWzBdLmsuc2V0RHJvcFNjb3BlKGEsYil9LGFkZFRvUG9zc2U6ZnVuY3Rpb24oYSl7dmFyIGM9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpLGQ9Zih0aGlzKTtiLmVhY2goYSxmdW5jdGlvbihhKXthPVtiLmdldEVsZW1lbnQoYSldLGEucHVzaC5hcHBseShhLGMpLGQuYWRkVG9Qb3NzZS5hcHBseShkLGEpfSl9LHNldFBvc3NlOmZ1bmN0aW9uKGEpe3ZhciBjPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSxkPWYodGhpcyk7Yi5lYWNoKGEsZnVuY3Rpb24oYSl7YT1bYi5nZXRFbGVtZW50KGEpXSxhLnB1c2guYXBwbHkoYSxjKSxkLnNldFBvc3NlLmFwcGx5KGQsYSl9KX0scmVtb3ZlRnJvbVBvc3NlOmZ1bmN0aW9uKGEpe3ZhciBjPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSxkPWYodGhpcyk7Yi5lYWNoKGEsZnVuY3Rpb24oYSl7YT1bYi5nZXRFbGVtZW50KGEpXSxhLnB1c2guYXBwbHkoYSxjKSxkLnJlbW92ZUZyb21Qb3NzZS5hcHBseShkLGEpfSl9LHJlbW92ZUZyb21BbGxQb3NzZXM6ZnVuY3Rpb24oYSl7dmFyIGM9Zih0aGlzKTtiLmVhY2goYSxmdW5jdGlvbihhKXtjLnJlbW92ZUZyb21BbGxQb3NzZXMoYi5nZXRFbGVtZW50KGEpKX0pfSxzZXRQb3NzZVN0YXRlOmZ1bmN0aW9uKGEsYyxkKXt2YXIgZT1mKHRoaXMpO2IuZWFjaChhLGZ1bmN0aW9uKGEpe2Uuc2V0UG9zc2VTdGF0ZShiLmdldEVsZW1lbnQoYSksYyxkKX0pfSxkcmFnRXZlbnRzOntzdGFydDpcInN0YXJ0XCIsc3RvcDpcInN0b3BcIixkcmFnOlwiZHJhZ1wiLHN0ZXA6XCJzdGVwXCIsb3ZlcjpcIm92ZXJcIixvdXQ6XCJvdXRcIixkcm9wOlwiZHJvcFwiLGNvbXBsZXRlOlwiY29tcGxldGVcIixiZWZvcmVTdGFydDpcImJlZm9yZVN0YXJ0XCJ9LGFuaW1FdmVudHM6e3N0ZXA6XCJzdGVwXCIsY29tcGxldGU6XCJjb21wbGV0ZVwifSxzdG9wRHJhZzpmdW5jdGlvbihhKXthLl9rYXRhdm9yaW9EcmFnJiZhLl9rYXRhdm9yaW9EcmFnLmFib3J0KCl9LGFkZFRvRHJhZ1NlbGVjdGlvbjpmdW5jdGlvbihhKXtmKHRoaXMpLnNlbGVjdChhKX0scmVtb3ZlRnJvbURyYWdTZWxlY3Rpb246ZnVuY3Rpb24oYSl7Zih0aGlzKS5kZXNlbGVjdChhKX0sY2xlYXJEcmFnU2VsZWN0aW9uOmZ1bmN0aW9uKCl7Zih0aGlzKS5kZXNlbGVjdEFsbCgpfSx0cmlnZ2VyOmZ1bmN0aW9uKGEsYixjLGQpe3RoaXMuZ2V0RXZlbnRNYW5hZ2VyKCkudHJpZ2dlcihhLGIsYyxkKX0sZG9SZXNldDpmdW5jdGlvbigpe2Zvcih2YXIgYSBpbiB0aGlzKTA9PT1hLmluZGV4T2YoXCJfa2F0YXZvcmlvX1wiKSYmdGhpc1thXS5yZXNldCgpfX0pO3ZhciBoPWZ1bmN0aW9uKGEpe3ZhciBiPWZ1bmN0aW9uKCl7L2NvbXBsZXRlfGxvYWRlZHxpbnRlcmFjdGl2ZS8udGVzdChkb2N1bWVudC5yZWFkeVN0YXRlKSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50LmJvZHkmJm51bGwhPWRvY3VtZW50LmJvZHk/YSgpOnNldFRpbWVvdXQoYiw5KX07YigpfTtoKGIuaW5pdCl9LmNhbGwoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dGhpcyk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vdXRpbHMvanNwbHVtYi5taW4uanMiXSwic291cmNlUm9vdCI6IiJ9